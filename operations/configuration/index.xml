<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – Manage Dapr configuration</title><link>https://dapr-cn.github.io/docs/operations/configuration/</link><description>Recent content in Manage Dapr configuration on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dapr-cn.github.io/docs/operations/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Operations: Overview of Dapr configuration options</title><link>https://dapr-cn.github.io/docs/operations/configuration/configuration-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/operations/configuration/configuration-overview/</guid><description>
&lt;h2 id="sidecar-configuration">Sidecar configuration&lt;/h2>
&lt;h3 id="setup-sidecar-configuration">Setup sidecar configuration&lt;/h3>
&lt;h4 id="self-hosted-sidecar">Self-hosted sidecar&lt;/h4>
&lt;p>In self hosted mode the Dapr configuration is a configuration file, for example &lt;code>config.yaml&lt;/code>. By default the Dapr sidecar looks in the default Dapr folder for the runtime configuration eg: &lt;code>$HOME/.dapr/config.yaml&lt;/code> in Linux/MacOS and &lt;code>%USERPROFILE%\.dapr\config.yaml&lt;/code> in Windows.&lt;/p>
&lt;p>A Dapr sidecar can also apply a configuration by using a &lt;code>--config&lt;/code> flag to the file path with &lt;code>dapr run&lt;/code> CLI command.&lt;/p>
&lt;h4 id="kubernetes-sidecar">Kubernetes sidecar&lt;/h4>
&lt;p>In Kubernetes mode the Dapr configuration is a Configuration CRD, that is applied to the cluster. For example;&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f myappconfig.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use the Dapr CLI to list the Configuration CRDs&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr configurations -k
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A Dapr sidecar can apply a specific configuration by using a &lt;code>dapr.io/config&lt;/code> annotation. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml"> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nodeapp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3000&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;myappconfig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: There are more &lt;a href="https://dapr-cn.github.io/docs/operations/hosting/kubernetes/kubernetes-annotations/">Kubernetes annotations&lt;/a> available to configure the Dapr sidecar on activation by sidecar Injector system service.&lt;/p>
&lt;h3 id="sidecar-configuration-settings">Sidecar configuration settings&lt;/h3>
&lt;p>The following configuration settings can be applied to Dapr application sidecars;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#tracing">Tracing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#metrics">Metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="#middleware">Middleware&lt;/a>&lt;/li>
&lt;li>&lt;a href="#scoping-secrets-for-secret-stores">Scoping secrets for secret stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="#access-control-allow-lists-for-service-invocation">Access control allow lists for service invocation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-application-sidecar-configuration">Example application sidecar configuration&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="tracing">Tracing&lt;/h4>
&lt;p>Tracing configuration turns on tracing for an application.&lt;/p>
&lt;p>The &lt;code>tracing&lt;/code> section under the &lt;code>Configuration&lt;/code> spec contains the following properties:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://zipkin.default.svc.cluster.local:9411/api/v2/spans&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following table lists the properties for tracing:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>samplingRate&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Set sampling rate for tracing to be enabled or disabled.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>zipkin.endpointAddress&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Set the Zipkin server address.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>samplingRate&lt;/code> is used to enable or disable the tracing. To disable the sampling rate , set &lt;code>samplingRate : &amp;quot;0&amp;quot;&lt;/code> in the configuration. The valid range of samplingRate is between 0 and 1 inclusive. The sampling rate determines whether a trace span should be sampled or not based on value. &lt;code>samplingRate : &amp;quot;1&amp;quot;&lt;/code> samples all traces. By default, the sampling rate is (0.0001) or 1 in 10,000 traces.&lt;/p>
&lt;p>See &lt;a href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/observability/tracing/">Observability distributed tracing&lt;/a> for more information&lt;/p>
&lt;h4 id="metrics">Metrics&lt;/h4>
&lt;p>The metrics section can be used to enable or disable metrics for an application.&lt;/p>
&lt;p>The &lt;code>metrics&lt;/code> section under the &lt;code>Configuration&lt;/code> spec contains the following properties:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">metrics&lt;/span>:
&lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following table lists the properties for metrics:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>enabled&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Whether metrics should to be enabled.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>See &lt;a href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/observability/metrics/">metrics documentation&lt;/a> for more information&lt;/p>
&lt;h4 id="middleware">Middleware&lt;/h4>
&lt;p>Middleware configuration set named Http pipeline middleware handlers The &lt;code>httpPipeline&lt;/code> section under the &lt;code>Configuration&lt;/code> spec contains the following properties:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">httpPipeline&lt;/span>:
&lt;span style="color:#f92672">handlers&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">oauth2&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">middleware.http.oauth2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">uppercase&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">middleware.http.uppercase&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following table lists the properties for HTTP handlers:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Name of the middleware component&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Type of middleware component&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>See &lt;a href="https://dapr-cn.github.io/docs/concepts/middleware-concept/">Middleware pipelines&lt;/a> for more information&lt;/p>
&lt;h4 id="scope-secret-store-access">Scope secret store access&lt;/h4>
&lt;p>See the &lt;a href="https://dapr-cn.github.io/docs/operations/configuration/secret-scope/">Scoping secrets&lt;/a> guide for information and examples on how to scope secrets to an application.&lt;/p>
&lt;h4 id="access-control-allow-lists-for-service-invocation">Access Control allow lists for service invocation&lt;/h4>
&lt;p>See the &lt;a href="https://dapr-cn.github.io/docs/operations/configuration/invoke-allowlist/">Allow lists for service invocation&lt;/a> guide for information and examples on how to set allow lists.&lt;/p>
&lt;h3 id="example-sidecar-configuration">Example sidecar configuration&lt;/h3>
&lt;p>The following yaml shows an example configuration file that can be applied to an applications' Dapr sidecar.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myappconfig&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">httpPipeline&lt;/span>:
&lt;span style="color:#f92672">handlers&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">oauth2&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">middleware.http.oauth2&lt;/span>
&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">localstore&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">deniedSecrets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;redis-password&amp;#34;&lt;/span>]
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;public&amp;#34;&lt;/span>
&lt;span style="color:#f92672">policies&lt;/span>:
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app1&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;public&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;span style="color:#f92672">operations&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">/op1&lt;/span>
&lt;span style="color:#f92672">httpVerb&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;GET&amp;#39;&lt;/span>]
&lt;span style="color:#f92672">action&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">/op2/*&lt;/span>
&lt;span style="color:#f92672">httpVerb&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>]
&lt;span style="color:#f92672">action&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="control-plane-configuration">Control-plane configuration&lt;/h2>
&lt;p>There is a single configuration file called &lt;code>default&lt;/code> installed with the Dapr control plane system services that applies global settings. This is only set up when Dapr is deployed to Kubernetes.&lt;/p>
&lt;h3 id="control-plane-configuration-settings">Control-plane configuration settings&lt;/h3>
&lt;p>A Dapr control plane configuration can configure the following settings:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>enabled&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>Set mtls to be enabled or disabled&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>allowedClockSkew&lt;/td>
&lt;td>string&lt;/td>
&lt;td>The extra time to give for certificate expiry based on possible clock skew on a machine. Default is 15 minutes.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>workloadCertTTL&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Time a certificate is valid for. Default is 24 hours&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>See the &lt;a href="https://dapr-cn.github.io/docs/operations/security/mtls/">Mutual TLS&lt;/a> HowTo and &lt;a href="https://dapr-cn.github.io/docs/concepts/security-concept/">security concepts&lt;/a> for more information.&lt;/p>
&lt;h3 id="example-control-plane-configuration">Example control plane configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">mtls&lt;/span>:
&lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">allowedClockSkew&lt;/span>: &lt;span style="color:#ae81ff">15m&lt;/span>
&lt;span style="color:#f92672">workloadCertTTL&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Operations: How-To: Control concurrency and rate limit applications</title><link>https://dapr-cn.github.io/docs/operations/configuration/control-concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/operations/configuration/control-concurrency/</guid><description>
&lt;p>A common scenario in distributed computing is to only allow for a given number of requests to execute concurrently. Using Dapr, you can control how many requests and events will invoke your application simultaneously.&lt;/p>
&lt;p>&lt;em>Note that this rate limiting is guaranteed for every event that&amp;rsquo;s coming from Dapr, meaning Pub/Sub events, direct invocation from other services, bindings events etc. Dapr can&amp;rsquo;t enforce the concurrency policy on requests that are coming to your app externally.&lt;/em>&lt;/p>
&lt;h2 id="setting-app-max-concurrency">Setting app-max-concurrency&lt;/h2>
&lt;p>Without using Dapr, a developer would need to create some sort of a semaphore in the application and take care of acquiring and releasing it. Using Dapr, there are no code changes needed to an app.&lt;/p>
&lt;h3 id="setting-app-max-concurrency-in-kubernetes">Setting app-max-concurrency in Kubernetes&lt;/h3>
&lt;p>To set app-max-concurrency in Kubernetes, add the following annotation to your pod:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nodesubscriber&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nodesubscriber&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nodesubscriber&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nodesubscriber&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nodesubscriber&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3000&amp;#34;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;b&amp;gt;dapr.io/app-max-concurrency&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">&amp;lt;/b&amp;gt;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setting-app-max-concurrency-using-the-dapr-cli">Setting app-max-concurrency using the Dapr CLI&lt;/h3>
&lt;p>To set app-max-concurrency with the Dapr CLI for running on your local dev machine, add the &lt;code>app-max-concurrency&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-max-concurrency &lt;span style="color:#ae81ff">1&lt;/span> --app-port &lt;span style="color:#ae81ff">5000&lt;/span> python ./app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above examples will effectively turn your app into a single concurrent service.&lt;/p></description></item><item><title>Operations: How-To: Limit the secrets that can be read from secret stores</title><link>https://dapr-cn.github.io/docs/operations/configuration/secret-scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/operations/configuration/secret-scope/</guid><description>
&lt;p>In addition to scoping which applications can access a given component, for example a secret store component (see &lt;a href="https://dapr-cn.github.io/docs/operations/components/component-scopes/">Scoping components&lt;/a>), a named secret store component itself can be scoped to one or more secrets for an application. By defining &lt;code>allowedSecrets&lt;/code> and/or &lt;code>deniedSecrets&lt;/code> list, applications can be restricted to access only specific secrets.&lt;/p>
&lt;p>Follow &lt;a href="https://dapr-cn.github.io/docs/operations/configuration/configuration-overview/">these instructions&lt;/a> to define a configuration CRD.&lt;/p>
&lt;h2 id="configure-secrets-access">Configure secrets access&lt;/h2>
&lt;p>The &lt;code>secrets&lt;/code> section under the &lt;code>Configuration&lt;/code> spec contains the following properties:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">kubernetes&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">allowedSecrets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;redis-password&amp;#34;&lt;/span>]
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">localstore&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">deniedSecrets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;redis-password&amp;#34;&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following table lists the properties for secret scopes:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>storeName&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Name of the secret store component. storeName must be unique within the list&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>defaultAccess&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Access modifier. Accepted values &amp;ldquo;allow&amp;rdquo; (default) or &amp;ldquo;deny&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>allowedSecrets&lt;/td>
&lt;td>list&lt;/td>
&lt;td>List of secret keys that can be accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deniedSecrets&lt;/td>
&lt;td>list&lt;/td>
&lt;td>List of secret keys that cannot be accessed&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>When an &lt;code>allowedSecrets&lt;/code> list is present with at least one element, only those secrets defined in the list can be accessed by the application.&lt;/p>
&lt;h2 id="permission-priority">Permission priority&lt;/h2>
&lt;p>The &lt;code>allowedSecrets&lt;/code> and &lt;code>deniedSecrets&lt;/code> list values take priorty over the &lt;code>defaultAccess&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Scenarios&lt;/th>
&lt;th>defaultAccess&lt;/th>
&lt;th>allowedSecrets&lt;/th>
&lt;th>deniedSecrets&lt;/th>
&lt;th>permission&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - Only default access&lt;/td>
&lt;td>deny/allow&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>deny/allow&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - Default deny with allowed list&lt;/td>
&lt;td>deny&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; can be accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - Default allow with deneied list&lt;/td>
&lt;td>allow&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; cannot be accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - Default allow with allowed list&lt;/td>
&lt;td>allow&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; can be accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - Default deny with denied list&lt;/td>
&lt;td>deny&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>deny&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6 - Default deny/allow with both lists&lt;/td>
&lt;td>deny/allow&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>[&amp;ldquo;s2&amp;rdquo;]&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; can be accessed&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="scenario-1--deny-access-to-all-secrets-for-a-secret-store">Scenario 1 : Deny access to all secrets for a secret store&lt;/h3>
&lt;p>In Kubernetes cluster, the native Kubernetes secret store is added to Dapr application by default. In some scenarios it may be necessary to deny access to Dapr secrets for a given application. To add this configuration follow the steps below:&lt;/p>
&lt;p>Define the following &lt;code>appconfig.yaml&lt;/code> and apply it to the Kubernetes cluster using the command &lt;code>kubectl apply -f appconfig.yaml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">kubernetes&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For applications that need to be deined access to the Kubernetes secret store, follow &lt;a href="https://dapr-cn.github.io/docs/operations/hosting/kubernetes/kubernetes-overview/">these instructions&lt;/a>, and add the following annotation to the application pod.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this defined, the application no longer has access to Kubernetes secret store.&lt;/p>
&lt;h3 id="scenario-2--allow-access-to-only-certain-secrets-in-a-secret-store">Scenario 2 : Allow access to only certain secrets in a secret store&lt;/h3>
&lt;p>To allow a Dapr application to have access to only certain secrets, define the following &lt;code>config.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">vault&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">allowedSecrets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;secret1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secret2&amp;#34;&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This example defines configuration for secret store named vault. The default access to the secret store is &lt;code>deny&lt;/code>, whereas some secrets are accessible by the application based on the &lt;code>allowedSecrets&lt;/code> list. Follow &lt;a href="https://dapr-cn.github.io/docs/operations/configuration/configuration-overview/">these instructions&lt;/a> to apply configuration to the sidecar.&lt;/p>
&lt;h3 id="scenario-3-deny-access-to-certain-senstive-secrets-in-a-secret-store">Scenario 3: Deny access to certain senstive secrets in a secret store&lt;/h3>
&lt;p>Define the following &lt;code>config.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">vault&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span> &lt;span style="color:#75715e"># this is the default value, line can be omitted&lt;/span>
&lt;span style="color:#f92672">deniedSecrets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;secret1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secret2&amp;#34;&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above configuration explicitly denies access to &lt;code>secret1&lt;/code> and &lt;code>secret2&lt;/code> from the secret store named vault while allowing access to all other secrets. Follow &lt;a href="https://dapr-cn.github.io/docs/operations/configuration/configuration-overview/">these instructions&lt;/a> to apply configuration to the sidecar.&lt;/p></description></item><item><title>Operations: How-To: Apply access control list configuration for service invocation</title><link>https://dapr-cn.github.io/docs/operations/configuration/invoke-allowlist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/operations/configuration/invoke-allowlist/</guid><description>
&lt;p>Access control enables the configuration of policies that restrict what operations &lt;em>calling&lt;/em> applications can perform, via service invocation, on the &lt;em>called&lt;/em> application. To limit access to a called applications from specific operations and HTTP verbs from the calling applications, you can define an access control policy specification in configuration.&lt;/p>
&lt;p>An access control policy is specified in configuration and be applied to Dapr sidecar for the &lt;em>called&lt;/em> application. Example access policies are shown below and access to the called app is based on the matched policy action. You can provide a default global action for all calling applications and if no access control policy is specified, the default behavior is to allow all calling applicatons to access to the called app.&lt;/p>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;p>&lt;strong>TrustDomain&lt;/strong> - A &amp;ldquo;trust domain&amp;rdquo; is a logical group to manage trust relationships. Every application is assigned a trust domain which can be specified in the access control list policy spec. If no policy spec is defined or an empty trust domain is specified, then a default value &amp;ldquo;public&amp;rdquo; is used. This trust domain is used to generate the identity of the application in the TLS cert.&lt;/p>
&lt;p>&lt;strong>App Identity&lt;/strong> - Dapr requests the sentry service to generate a &lt;a href="https://spiffe.io/">SPIFFE&lt;/a> id for all applications and this id is attached in the TLS cert. The SPIFFE id is of the format: &lt;code>**spiffe://\&amp;lt;trustdomain&amp;gt;/ns/\&amp;lt;namespace\&amp;gt;/\&amp;lt;appid\&amp;gt;**&lt;/code>. For matching policies, the trust domain, namespace and app ID values of the calling app are extracted from the SPIFFE id in the TLS cert of the calling app. These values are matched against the trust domain, namespace and app ID values specified in the policy spec. If all three of these match, then more specific policies are further matched.&lt;/p>
&lt;h2 id="configuration-properties">Configuration properties&lt;/h2>
&lt;p>The following tables lists the different properties for access control, policies and operations:&lt;/p>
&lt;h3 id="access-control">Access Control&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>defaultAction&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Global default action when no other policy is matched&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>trustDomain&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Trust domain assigned to the application. Default is &amp;ldquo;public&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>policies&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Policies to determine what operations the calling app can do on the called app&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="policies">Policies&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app&lt;/td>
&lt;td>string&lt;/td>
&lt;td>AppId of the calling app to allow/deny service invocation from&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>namespace&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Namespace value that needs to be matched with the namespace of the calling app&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>trustDomain&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Trust domain that needs to be matched with the trust domain of the calling app. Default is &amp;ldquo;public&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>defaultAction&lt;/td>
&lt;td>string&lt;/td>
&lt;td>App level default action in case the app is found but no specific operation is matched&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>operations&lt;/td>
&lt;td>string&lt;/td>
&lt;td>operations that are allowed from the calling app&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="operations">Operations&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Path name of the operations allowed on the called app. Wildcard &amp;ldquo;*&amp;rdquo; can be used to under a path to match&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>httpVerb&lt;/td>
&lt;td>list&lt;/td>
&lt;td>List specific http verbs that can be used by the calling app. Wildcard &amp;ldquo;*&amp;rdquo; can be used to match any http verb. Unused for grpc invocation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>action&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Access modifier. Accepted values &amp;ldquo;allow&amp;rdquo; (default) or &amp;ldquo;deny&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="policy-rules">Policy rules&lt;/h2>
&lt;ol>
&lt;li>If no access policy is specified, the default behavior is to allow all apps to access to all methods on the called app&lt;/li>
&lt;li>If no global default action is specified and no app specific policies defined, the empty access policy is treated like no access policy specified and the default behavior is to allow all apps to access to all methods on the called app.&lt;/li>
&lt;li>If no global default action is specified but some app specific policies have been defined, then we resort to a more secure option of assuming the global default action to deny access to all methods on the called app.&lt;/li>
&lt;li>If an access policy is defined and if the incoming app credentials cannot be verified, then the global default action takes effect.&lt;/li>
&lt;li>If either the trust domain or namespace of the incoming app do not match the values specified in the app policy, the app policy is ignored and the global default action takes effect.&lt;/li>
&lt;/ol>
&lt;h2 id="policy-priority">Policy priority&lt;/h2>
&lt;p>The action corresponding to the most specific policy matched takes effect as ordered below:&lt;/p>
&lt;ol>
&lt;li>Specific HTTP verbs in the case of HTTP or the operation level action in the case of GRPC.&lt;/li>
&lt;li>The default action at the app level&lt;/li>
&lt;li>The default action at the global level&lt;/li>
&lt;/ol>
&lt;h2 id="example-scenarios">Example scenarios&lt;/h2>
&lt;p>Below are some example scenarios for using access control list for service invocation. See &lt;a href="https://dapr-cn.github.io/docs/concepts/configuration-concept/">configuration guidance&lt;/a> to understand the available configuration settings for an application sidecar.&lt;font size=5>Scenario 1: Deny access to all apps except where trustDomain = public, namespace = default, appId = app1&lt;/font>&lt;/p>
&lt;p>With this configuration, all calling methods with appId = app1 are allowed and all other invocation requests from other applications are denied&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;public&amp;#34;&lt;/span>
&lt;span style="color:#f92672">policies&lt;/span>:
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app1&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;public&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;font size=5>Scenario 2: Deny access to all apps except trustDomain = public, namespace = default, appId = app1, operation = op1&lt;/font>&lt;/p>
&lt;p>With this configuration, only method op1 from appId = app1 is allowed and all other method requests from all other apps, including other methods on app1, are denied&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;public&amp;#34;&lt;/span>
&lt;span style="color:#f92672">policies&lt;/span>:
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app1&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;public&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;span style="color:#f92672">operations&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">/op1&lt;/span>
&lt;span style="color:#f92672">httpVerb&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>]
&lt;span style="color:#f92672">action&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;font size=5>Scenario 3: Deny access to all apps except when a specific verb for HTTP and operation for GRPC is matched&lt;/font>&lt;/p>
&lt;p>With this configuration, the only scenarios below are allowed access and and all other method requests from all other apps, including other methods on app1 or app2, are denied&lt;/p>
&lt;ul>
&lt;li>trustDomain = public, namespace = default, appID = app1, operation = op1, http verb = POST/PUT&lt;/li>
&lt;li>trustDomain = &amp;ldquo;myDomain&amp;rdquo;, namespace = &amp;ldquo;ns1&amp;rdquo;, appID = app2, operation = op2 and application protocol is GRPC , only HTTP verbs POST/PUT on method op1 from appId = app1 are allowed and all other method requests from all other apps, including other methods on app1, are denied&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;public&amp;#34;&lt;/span>
&lt;span style="color:#f92672">policies&lt;/span>:
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app1&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;public&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;span style="color:#f92672">operations&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">/op1&lt;/span>
&lt;span style="color:#f92672">httpVerb&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;PUT&amp;#39;&lt;/span>]
&lt;span style="color:#f92672">action&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app2&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;myDomain&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ns1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">operations&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">/op2&lt;/span>
&lt;span style="color:#f92672">action&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;font size=5>Scenario 4: Allow access to all methods except trustDomain = public, namespace = default, appId = app1, operation = /op1/*, all http verbs&lt;/font>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;public&amp;#34;&lt;/span>
&lt;span style="color:#f92672">policies&lt;/span>:
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app1&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;public&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;span style="color:#f92672">operations&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">/op1/*&lt;/span>
&lt;span style="color:#f92672">httpVerb&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>]
&lt;span style="color:#f92672">action&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;font size=5>Scenario 5: Allow access to all methods for trustDomain = public, namespace = ns1, appId = app1 and deny access to all methods for trustDomain = public, namespace = ns2, appId = app1&lt;/font>&lt;/p>
&lt;p>This scenario shows how applications with the same app ID but belonging to different namespaces can be specified&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;public&amp;#34;&lt;/span>
&lt;span style="color:#f92672">policies&lt;/span>:
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app1&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;public&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ns1&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">app1&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;public&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ns2&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="hello-world-examples">Hello world examples&lt;/h2>
&lt;p>These examples show how to apply access control to the &lt;a href="https://github.com/dapr/quickstarts#quickstarts">hello world&lt;/a> quickstart samples where a python app invokes a node.js app. Access control lists rely on the Dapr &lt;a href="https://dapr-cn.github.io/docs/concepts/security-concept/">Sentry service&lt;/a> to generate the TLS certificates with a SPIFFE id for authentication, which means the Sentry service either has to be running locally or deployed to your hosting enviroment such as a Kubernetes cluster.&lt;/p>
&lt;p>The nodeappconfig example below shows how to &lt;strong>deny&lt;/strong> access to the &lt;code>neworder&lt;/code> method from the &lt;code>pythonapp&lt;/code>, where the python app is in the &lt;code>myDomain&lt;/code> trust domain and &lt;code>default&lt;/code> namespace. The nodeapp is in the &lt;code>public&lt;/code> trust domain.&lt;/p>
&lt;p>&lt;strong>nodeappconfig.yaml&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nodeappconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;public&amp;#34;&lt;/span>
&lt;span style="color:#f92672">policies&lt;/span>:
- &lt;span style="color:#f92672">appId&lt;/span>: &lt;span style="color:#ae81ff">pythonapp&lt;/span>
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;myDomain&amp;#39;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;span style="color:#f92672">operations&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">/neworder&lt;/span>
&lt;span style="color:#f92672">httpVerb&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>]
&lt;span style="color:#f92672">action&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>pythonappconfig.yaml&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pythonappconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">accessControl&lt;/span>:
&lt;span style="color:#f92672">defaultAction&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span>
&lt;span style="color:#f92672">trustDomain&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;myDomain&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="self-hosted-mode">Self-hosted mode&lt;/h3>
&lt;p>This example uses the &lt;a href="https://github.com/dapr/quickstarts/tree/master/hello-world/README.md">hello world&lt;/a> quickstart.&lt;/p>
&lt;p>The following steps run the Sentry service locally with mTLS enabled, set up necessary environment variables to access certificates, and then launch both the node app and python app each referencing the Sentry service to apply the ACLs.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Follow these steps to run the &lt;a href="https://dapr-cn.github.io/docs/operations/security/mtls/">Sentry service in self-hosted mode&lt;/a> with mTLS enabled&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In a command prompt, set these environment variables:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-3-linuxmacos-tab" data-toggle="tab" href="#tabs-3-linuxmacos" role="tab"
aria-controls="tabs-3-linuxmacos" aria-selected="true">
Linux/MacOS
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-3-windows-tab" data-toggle="tab" href="#tabs-3-windows" role="tab"
aria-controls="tabs-3-windows" aria-selected="false">
Windows
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">
&lt;div class="tab-pane fade show active" id="tabs-3-linuxmacos" role="tabpanel" aria-labelled-by="tabs-3-linuxmacos-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">export DAPR_TRUST_ANCHORS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>cat $HOME/.dapr/certs/ca.crt&lt;span style="color:#e6db74">`&lt;/span>
export DAPR_CERT_CHAIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>cat $HOME/.dapr/certs/issuer.crt&lt;span style="color:#e6db74">`&lt;/span>
export DAPR_CERT_KEY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>cat $HOME/.dapr/certs/issuer.key&lt;span style="color:#e6db74">`&lt;/span>
export NAMESPACE&lt;span style="color:#f92672">=&lt;/span>default
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-3-windows" role="tabpanel" aria-labelled-by="tabs-3-windows-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">$env:DAPR_TRUST_ANCHORS=$(Get-Content $env:USERPROFILE\.dapr\certs\ca.crt)
$env:DAPR_CERT_CHAIN=$(Get-Content $env:USERPROFILE\.dapr\certs\issuer.crt)
$env:DAPR_CERT_KEY=$(Get-Content $env:USERPROFILE\.dapr\certs\issuer.key)
$env:NAMESPACE=&lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Run daprd to launch a Dapr sidecar for the node.js app with mTLS enabled, referencing the local Sentry service:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">daprd --app-id nodeapp --dapr-grpc-port &lt;span style="color:#ae81ff">50002&lt;/span> -dapr-http-port &lt;span style="color:#ae81ff">3501&lt;/span> --log-level debug --app-port &lt;span style="color:#ae81ff">3000&lt;/span> --enable-mtls --sentry-address localhost:50001 --config nodeappconfig.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Run the node app in a separate command prompt:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">node app.js
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>In another command prompt, set these environment variables:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-4" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-4-linuxmacos-tab" data-toggle="tab" href="#tabs-4-linuxmacos" role="tab"
aria-controls="tabs-4-linuxmacos" aria-selected="true">
Linux/MacOS
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-4-windows-tab" data-toggle="tab" href="#tabs-4-windows" role="tab"
aria-controls="tabs-4-windows" aria-selected="false">
Windows
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-4-content">
&lt;div class="tab-pane fade show active" id="tabs-4-linuxmacos" role="tabpanel" aria-labelled-by="tabs-4-linuxmacos-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">export DAPR_TRUST_ANCHORS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>cat $HOME/.dapr/certs/ca.crt&lt;span style="color:#e6db74">`&lt;/span>
export DAPR_CERT_CHAIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>cat $HOME/.dapr/certs/issuer.crt&lt;span style="color:#e6db74">`&lt;/span>
export DAPR_CERT_KEY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>cat $HOME/.dapr/certs/issuer.key&lt;span style="color:#e6db74">`&lt;/span>
export NAMESPACE&lt;span style="color:#f92672">=&lt;/span>default
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-4-windows" role="tabpanel" aria-labelled-by="tabs-4-windows-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">$env:DAPR_TRUST_ANCHORS=$(Get-Content $env:USERPROFILE\.dapr\certs\ca.crt)
$env:DAPR_CERT_CHAIN=$(Get-Content $env:USERPROFILE\.dapr\certs\issuer.crt)
$env:DAPR_CERT_KEY=$(Get-Content $env:USERPROFILE\.dapr\certs\issuer.key)
$env:NAMESPACE=&lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Run daprd to launch a Dapr sidecar for the python app with mTLS enabled, referencing the local Sentry service:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">daprd --app-id pythonapp --dapr-grpc-port &lt;span style="color:#ae81ff">50003&lt;/span> --metrics-port &lt;span style="color:#ae81ff">9092&lt;/span> --log-level debug --enable-mtls --sentry-address localhost:50001 --config pythonappconfig.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Run the python app in a separate command prompt:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>You should see the calls to the node app fail in the python app command prompt based due to the &lt;strong>deny&lt;/strong> operation action in the nodeappconfig file. Change this action to &lt;strong>allow&lt;/strong> and re-run the apps and you should then see this call succeed.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="kubernetes-mode">Kubernetes mode&lt;/h3>
&lt;p>This example uses the &lt;a href="https://github.com/dapr/quickstarts/tree/master/hello-kubernetes/README.md">hello kubernetes&lt;/a> quickstart.&lt;/p>
&lt;p>You can create and apply the above configuration files &lt;code>nodeappconfig.yaml&lt;/code> and &lt;code>pythonappconfig.yaml&lt;/code> as described in the &lt;a href="https://dapr-cn.github.io/docs/concepts/configuration-concept/">configuration&lt;/a> to the Kubernetes deployments.&lt;/p>
&lt;p>For example, below is how the pythonapp is deployed to Kubernetes in the default namespace with this pythonappconfig configuration file. Do the same for the nodeapp deployment and then look at the logs for the pythonapp to see the calls fail due to the &lt;strong>deny&lt;/strong> operation action set in the nodeappconfig file. Change this action to &lt;strong>allow&lt;/strong> and re-deploy the apps and you should then see this call succeed.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pythonapp&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pythonapp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pythonappconfig&amp;#34;&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">dapriosamples/hello-k8s-python:edge&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Operations: How-To: Configure Dapr to use gRPC</title><link>https://dapr-cn.github.io/docs/operations/configuration/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/operations/configuration/grpc/</guid><description>
&lt;p>Dapr implements both an HTTP and a gRPC API for local calls. gRPC is useful for low-latency, high performance scenarios and has language integration using the proto clients.&lt;/p>
&lt;p>You can find a list of auto-generated clients &lt;a href="https://dapr-cn.github.io/docs/developing-applications/sdks/">here&lt;/a>.&lt;/p>
&lt;p>The Dapr runtime implements a &lt;a href="https://github.com/dapr/dapr/blob/master/dapr/proto/runtime/v1/dapr.proto">proto service&lt;/a> that apps can communicate with via gRPC.&lt;/p>
&lt;p>In addition to calling Dapr via gRPC, Dapr can communicate with an application via gRPC. To do that, the app needs to host a gRPC server and implements the &lt;a href="https://github.com/dapr/dapr/blob/master/dapr/proto/runtime/v1/appcallback.proto">Dapr appcallback service&lt;/a>&lt;/p>
&lt;h2 id="configuring-dapr-to-communicate-with-an-app-via-grpc">Configuring Dapr to communicate with an app via gRPC&lt;/h2>
&lt;h3 id="self-hosted">Self hosted&lt;/h3>
&lt;p>When running in self hosted mode, use the &lt;code>--app-protocol&lt;/code> flag to tell Dapr to use gRPC to talk to the app:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-protocol grpc --app-port &lt;span style="color:#ae81ff">5005&lt;/span> node app.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This tells Dapr to communicate with your app via gRPC over port &lt;code>5005&lt;/code>.&lt;/p>
&lt;h3 id="kubernetes">Kubernetes&lt;/h3>
&lt;p>On Kubernetes, set the following annotations in your deployment YAML:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;myapp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;grpc&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5005&amp;#34;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>