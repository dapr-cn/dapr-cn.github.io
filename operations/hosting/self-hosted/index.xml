<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – 在自托管模式下运行 Dapr</title><link>https://docs.dapr.io/operations/hosting/self-hosted/</link><description>Recent content in 在自托管模式下运行 Dapr on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/operations/hosting/self-hosted/index.xml" rel="self" type="application/rss+xml"/><item><title>Operations: 自我托管模式下的 Dapr 概述</title><link>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-overview/</guid><description>
&lt;p>Dapr 可以配置为在开发人员本地计算机上以 自托管模式 运行。 每个运行的服务都有一个 Dapr 运行时进程 (或 sidecar) ，配置为使用状态存储， pub/sub，绑定组件和其他构建块。&lt;/p>
&lt;p>在自托管模式下，Redis 在本地容器中运行，并被配置为 状态存储 和 发布/订阅 的默认组件。 还配置了一个 Zipkin 容器用于诊断和跟踪。 运行 &lt;code>dapr init&lt;/code>, 见 &lt;code>$HOME/.dapr/components&lt;/code> directory (Mac/Linux) 或 &lt;code>%USERPROFILE%\.dapr\components&lt;/code> on Windows。&lt;/p>
&lt;p>&lt;code>dapr-placement&lt;/code> 服务负责管理 actor 分布方案和关键范围设置。 此服务仅在您使用 Dapr actors 时才需要。 有关 actor &lt;code>放置&lt;/code> 服务的更多信息，请阅读 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/actors/actors-overview/">actor 概述&lt;/a>。&lt;/p>
&lt;img src="https://docs.dapr.io/images/overview_standalone.png" width=800>
&lt;p>您可以使用 &lt;a href="https://github.com/dapr/cli#launch-dapr-and-your-app">Dapr CLI&lt;/a> 在本地机器上运行启用了 Dapr 的应用程序。&lt;/p></description></item><item><title>Operations: 入门指南: 使用 Docker 在自托管模式下运行 Dapr</title><link>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-with-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-with-docker/</guid><description>
&lt;p>本文提供了关于在 Kubernetes 之外与Docker一起运行 Dapr 的指导。 有许多不同的配置，你可能希望用Docker来运行Dapr，这些配置被记录在下面。&lt;/p>
&lt;h2 id="前期准备">前期准备&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/compose/install/">Docker-Compose&lt;/a> (可选)&lt;/li>
&lt;/ul>
&lt;h2 id="选择docker镜像">选择Docker镜像&lt;/h2>
&lt;p>Dapr 为不同的组件提供了许多预构建的 Docker 镜像，您应该为所需的二进制、架构和 标签/版本 选择相关镜像。&lt;/p>
&lt;h3 id="图片">图片&lt;/h3>
&lt;p>&lt;a href="https://hub.docker.com/u/daprio">Docker Hub&lt;/a>上，每个 Dapr 组件都有已发布的 Docker 镜像。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/dapr">daprio/dapr&lt;/a> (包含所有Dapr binaries)&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/daprd">daprio/daprd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/placement">daprio/placement&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/sentry">daprio/sentry&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/dapr-dev">daprio/dapr-dev&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="标签">标签&lt;/h3>
&lt;h4 id="linuxamd64">Linux/amd64&lt;/h4>
&lt;ul>
&lt;li>&lt;code>latest&lt;/code>：最新版本，&lt;strong>仅&lt;/strong> 用于开发目的。&lt;/li>
&lt;li>&lt;code>edge&lt;/code>: 最新的edge构建(master)。&lt;/li>
&lt;li>&lt;code>major.minor.patch&lt;/code>: 发布版本。&lt;/li>
&lt;li>&lt;code>major.patch-rc.iteration&lt;/code>: 候选发布。&lt;/li>
&lt;/ul>
&lt;h4 id="linuxarmv7">Linux/arm/v7&lt;/h4>
&lt;ul>
&lt;li>&lt;code>latest-arm&lt;/code>：最新的ARM版本， &lt;strong>只&lt;/strong> 用于开发目的。&lt;/li>
&lt;li>&lt;code>edge-arm&lt;/code>: ARM的最新的edge构建(master)。&lt;/li>
&lt;li>&lt;code>major.minor.patch-arm&lt;/code>: ARM的发布版本。&lt;/li>
&lt;li>&lt;code>major.patch-rc.iteration&lt;/code>: ARM的候选发布。&lt;/li>
&lt;/ul>
&lt;h2 id="以进程运行应用">以进程运行应用&lt;/h2>
&lt;blockquote>
&lt;p>仅用于开发目的&lt;/p>
&lt;/blockquote>
&lt;p>如果您在 Docker 容器中运行 Dapr，并且您的应用程序在主机上作为一个进程运行，那么您需要配置一下 Docker来使用主机网络，这样Dapr和应用程序就可以共享一个本地host网络接口。 遗憾的是，Docker的主机网络驱动只在Linux主机上支持。 如果您在Linux主机上运行Docker守护进程，您应该能够运行以下内容来启动Dapr。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">docker run --net&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;host&amp;#34;&lt;/span> --mount type&lt;span style="color:#f92672">=&lt;/span>bind,source&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/components,target&lt;span style="color:#f92672">=&lt;/span>/components daprio/daprd:edge ./daprd -app-id &amp;lt;my-app-id&amp;gt; -app-port &amp;lt;my-app-port&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，你可以在主机上运行你的应用程序，他们应该通过localhost网络接口连接。&lt;/p>
&lt;p>但是，如果你没有在Linux主机上运行Docker守护进程，建议你按照以下步骤运行 您的应用程序和&lt;a href="#run-dapr-in-a-docker-container-using-docker-compose">Docker容器中使用Docker Compose的Dapr运行时&lt;/a>。&lt;/p>
&lt;h2 id="在单个docker容器中运行应用程序和dapr">在单个Docker容器中运行应用程序和Dapr。&lt;/h2>
&lt;blockquote>
&lt;p>仅用于开发目的&lt;/p>
&lt;/blockquote>
&lt;p>不建议在同一容器内运行 Dapr 运行时和应用程序。 但是，对于本地开发的场景，可以这样做。 为了做到这一点，你需要编写一个Docker文件，安装Dapr运行时、Dapr CLI和你的应用代码。 然后，您可以使用 Dapr CLI 调用Dapr 运行时和您的应用代码。&lt;/p>
&lt;p>下面是实现这一目标的Docker文件的例子。&lt;/p>
&lt;pre>&lt;code>FROM python:3.7.1
# Install dapr CLI
RUN wget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash
# Install daprd
ARG DAPR_BUILD_DIR
COPY $DAPR_BUILD_DIR /opt/dapr
ENV PATH=&amp;quot;/opt/dapr/:${PATH}&amp;quot;
# Install your app
WORKDIR /app
COPY python .
RUN pip install requests
ENTRYPOINT [&amp;quot;dapr&amp;quot;]
CMD [&amp;quot;run&amp;quot;, &amp;quot;--app-id&amp;quot;, &amp;quot;nodeapp&amp;quot;, &amp;quot;--app-port&amp;quot;, &amp;quot;3000&amp;quot;, &amp;quot;node&amp;quot;, &amp;quot;app.js&amp;quot;]
&lt;/code>&lt;/pre>&lt;p>请记住，如果Dapr需要与其他组件通信，即： Redis，这些也需要让它访问。 Redis，这些也需要让它访问。&lt;/p>
&lt;h2 id="在-docker-网络运行">在 Docker 网络运行&lt;/h2>
&lt;p>如果您有多个Dapr实例运行在Docker容器中，并希望它们能够 互相通信，即服务调用，那么你就需要创建一个共享的Docker网络。 并确保那些Dapr容器与之相连。&lt;/p>
&lt;p>您可以使用以下方法创建一个简单的Docker网络&lt;/p>
&lt;pre>&lt;code>docker network create my-dapr-network
&lt;/code>&lt;/pre>&lt;p>当运行您的 Docker 容器时，您可以通过以下方式将其附加到网络&lt;/p>
&lt;pre>&lt;code>docker run --net=my-dapr-network ...
&lt;/code>&lt;/pre>&lt;p>每个容器将在该网络上获得一个唯一的IP，并能与该网络上的其他容器进行通信。&lt;/p>
&lt;h2 id="使用-docker-compose-运行">使用 Docker-Compose 运行&lt;/h2>
&lt;p>&lt;a href="https://docs.docker.com/compose/">Docker Compose&lt;/a>可以用来定义多容器应用配置。 如果您希望在没有Kubernetes的情况下，在本地使用Dapr sidecars运行多个应用程序，那么建议使用Docker Compose定义（&lt;code>docker-compose.yml&lt;/code>）。&lt;/p>
&lt;p>Docker Compose的语法和工具超出了本文的范围，但是，建议你参考&lt;a href="https://docs.docker.com/compose/">官方Docker文档&lt;/a>了解更多细节。&lt;/p>
&lt;p>为了使用Dapr和Docker Compose运行您的应用程序，您需要在您的&lt;code>docker-compose.yml&lt;/code>中定义sidecar模式。 例如:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>
&lt;span style="color:#f92672">services&lt;/span>:
&lt;span style="color:#f92672">nodeapp&lt;/span>:
&lt;span style="color:#f92672">build&lt;/span>: &lt;span style="color:#ae81ff">./node&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;50001:50001&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Dapr instances communicate over gRPC so we need to expose the gRPC port&lt;/span>
&lt;span style="color:#f92672">depends_on&lt;/span>:
- &lt;span style="color:#ae81ff">redis&lt;/span>
- &lt;span style="color:#ae81ff">placement&lt;/span>
&lt;span style="color:#f92672">networks&lt;/span>:
- &lt;span style="color:#ae81ff">hello-dapr&lt;/span>
&lt;span style="color:#f92672">nodeapp-dapr&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;daprio/daprd:edge&amp;#34;&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;./daprd&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-app-id&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;nodeapp&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-app-port&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;3000&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-placement-host-address&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;placement:50006&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Dapr&amp;#39;s placement service can be reach via the docker DNS entry&lt;/span>
]
&lt;span style="color:#f92672">volumes&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;./components/:/components&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Mount our components folder for the runtime to use&lt;/span>
&lt;span style="color:#f92672">depends_on&lt;/span>:
- &lt;span style="color:#ae81ff">nodeapp&lt;/span>
&lt;span style="color:#f92672">network_mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;service:nodeapp&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Attach the nodeapp-dapr service to the nodeapp network namespace&lt;/span>
&lt;span style="color:#ae81ff">...&lt;/span> &lt;span style="color:#75715e"># Deploy other daprized services and components (i.e. Redis)&lt;/span>
&lt;span style="color:#f92672">placement&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;daprio/dapr&amp;#34;&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;./placement&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-port&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;50006&amp;#34;&lt;/span>]
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;50006:50006&amp;#34;&lt;/span>
&lt;span style="color:#f92672">networks&lt;/span>:
- &lt;span style="color:#ae81ff">hello-dapr Redis)&lt;/span>
&lt;span style="color:#f92672">placement&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;daprio/dapr&amp;#34;&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;./placement&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-port&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;50006&amp;#34;&lt;/span>]
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;50006:50006&amp;#34;&lt;/span>
&lt;span style="color:#f92672">networks&lt;/span>:
- &lt;span style="color:#ae81ff">hello-dapr&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>对于那些在Linux主机上运行Docker守护进程的用户，如果需要的话，还可以使用&lt;code>network_mode: host&lt;/code>来利用主机联网。&lt;/p>
&lt;/blockquote>
&lt;p>要进一步了解如何使用 Docker Compose 运行 Dapr，请参见 &lt;a href="https://github.com/dapr/samples/tree/master/hello-docker-compose">Docker-Compose Sample&lt;/a>。&lt;/p>
&lt;h2 id="在-kubernetes-运行">在 Kubernetes 运行&lt;/h2>
&lt;p>如果你的部署目标是Kubernetes，那么你可能最好直接在Kubernetes平台上运行你的applicationaiton和Dapr sidecars。 在Kubernetes上运行Dapr是一等一的体验，并有单独的文档。 请参考 &lt;a href="https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-overview/">Kubernetes上的Dapr 文档&lt;/a>。&lt;/p></description></item><item><title>Operations: 在自托管的环境中卸载 Dapr</title><link>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-uninstall/</guid><description>
&lt;p>下面的 CLI 命令移除Dapr sidecar 二进制文件和placement 容器：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr uninstall
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述命令不会删除在&lt;code>dapr init&lt;/code>期间默认安装的Redis或Zipkin容器，以防你将它们用于其他目的。 要删除 Redis, Zipkin, Actor Placement 容器，以及位于 &lt;code>$HOME/.dapr&lt;/code> 或 &lt;code>%USERPROFILE%\.dapr\&lt;/code>, 运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr uninstall --all
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
对于Linux/MacOS 用户，如果你用sudo运行你的docker或安装路径是 &lt;code>/usr/local/bin&lt;/code>(默认安装路径)， 您需要使用 &lt;code>sudo dapr uninstall&lt;/code> 移除Dapr 二进制文件 和/或 容器。
&lt;/div></description></item><item><title>Operations: 在自托管环境中升级 Dapr 的步骤</title><link>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-upgrade/</guid><description>
&lt;ol>
&lt;li>
&lt;p>卸载当前的Dapr部署：&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
这将删除默认 &lt;code>$HOME/.dapr&lt;/code> 目录、 二进制文件和所有容器 (dapr_redis、 dapr_placement 和 dapr_zipkin)。 如果docker 命令需要sudo，Linux 用户需要运行 &lt;code>sudo&lt;/code> 。
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr uninstall --all
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>下载和安装最新的CLI访问 &lt;a href="https://docs.dapr.io/getting-started/install-dapr-cli/">这个指南&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>初始化 Dapr 运行时：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr init
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Ensure you are using the latest version of Dapr (v1.1.0) with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ dapr --version
CLI version: 1.1.0
Runtime version: 1.1.0
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Operations: 入门指南: 不使用 Docker 在自托管模式下运行 Dapr</title><link>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-no-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/hosting/self-hosted/self-hosted-no-docker/</guid><description>
&lt;p>本文提供了在没有 Docker 的自托管模式下运行 Dapr 的指导。&lt;/p>
&lt;h2 id="前期准备">前期准备&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/getting-started/install-dapr-selfhost/#installing-dapr-cli">Dapr CLI&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="无需容器初始化-dapr">无需容器初始化 Dapr&lt;/h2>
&lt;p>Dapr CLI 提供了使用 slim init 初始化 Dapr 的选项，而无需默认创建依赖于 Docker 的开发环境。 要使用 slim init 初始化 Dapr ，请在安装 Dapr CLI 后使用以下命令:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr init --slim
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此模式下安装了两个不同的二进制文件 &lt;code>daprd&lt;/code> 和 &lt;code>placement&lt;/code>。 &lt;code>placement&lt;/code> 需要在 Dapr 自托管安装中用于启动 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/actors/actors-overview/">actors&lt;/a> 。&lt;/p>
&lt;p>在此模式下，不会为状态管理或发布/订阅安装任何默认组件（如 Redis）。 这意味着，除了 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/service-invocation-overview/">服务调用&lt;/a>，在现成可用的情况下，没有其他构建块功能可用。 用户可以自由设置自己的环境和自定义组件。 此外，如果按照以下部分所述配置状态存储，基于 actor 的服务就可以调用。&lt;/p>
&lt;h2 id="服务调用">服务调用&lt;/h2>
&lt;p>有关如何在此方式下执行服务调用的示例，请参阅 &lt;a href="https://github.com/dapr/samples/tree/master/hello-dapr-slim">此示例&lt;/a>。&lt;/p>
&lt;h2 id="启用状态管理或发布订阅">启用状态管理或发布/订阅&lt;/h2>
&lt;p>请参阅 &amp;quot; 以自托管方式 &lt;a href="https://redis.io/topics/quickstart">配置 Redis (不使用 docker&lt;/a>) &amp;quot; 启用本地状态存储或发布/订阅代理以通信。&lt;/p>
&lt;h2 id="启用-actors">启用 actors&lt;/h2>
&lt;p>placement 服务必须在本地运行才能启动 actor。 还必须为 actors 启用 &lt;a href="#Enabling-state-management-or-pub/sub">事务型状态存储&lt;/a>。&lt;/p>
&lt;p>Linux/MacOS 默认情况下， &lt;code>placement&lt;/code> 二进制文件安装在 &lt;code>/$HOME/. dapr/bin&lt;/code> 目录下， Windows 在 &lt;code>%USERPROFILE%\.dapr\bin&lt;/code> 目录下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ $HOME/.dapr/bin/placement
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> starting Dapr Placement Service -- version 1.0.0-rc.1 -- commit 13ae49d instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> log level set to: info instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> metrics server started on :9090/ instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.metrics type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> Raft server is starting on 127.0.0.1:8201... instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement.raft type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> placement service started on port &lt;span style="color:#ae81ff">50005&lt;/span> instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> Healthz server is listening on :8080 instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0001&lt;span style="color:#f92672">]&lt;/span> cluster leadership acquired instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0001&lt;span style="color:#f92672">]&lt;/span> leader is established. instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1 instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1 instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here on you can follow the sample example created for the &lt;a href="https://github.com/dapr/java-sdk/tree/master/examples/src/main/java/io/dapr/examples/actors">java-sdk&lt;/a>, &lt;a href="https://github.com/dapr/python-sdk/tree/master/examples/demo_actor">python-sdk&lt;/a> or &lt;a href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-actors/dotnet-actors-howto/">dotnet-sdk&lt;/a> for running an application with Actors enabled.&lt;/p>
&lt;p>更新状态存储配置文件使 Redis host 地址和密码和您的设置相同。 此外，为了使它能够作为一个actor状态存储，还添加了类似于&lt;a href="https://github.com/dapr/java-sdk/blob/master/examples/components/state/redis.yaml">示例Java Redis组件&lt;/a>定义的元数据部分。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml"> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">actorStateStore&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="清理">清理&lt;/h2>
&lt;p>按照卸载 &lt;a href="https://docs.dapr.io/getting-started/install-dapr-selfhost/#uninstall-dapr-in-a-self-hosted-mode">说明&lt;/a> 来移除二进制文件。&lt;/p></description></item></channel></rss>