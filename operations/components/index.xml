<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – Dapr 中的组件管理</title><link>https://docs.dapr.io/operations/components/</link><description>Recent content in Dapr 中的组件管理 on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/operations/components/index.xml" rel="self" type="application/rss+xml"/><item><title>Operations: 组件schema</title><link>https://docs.dapr.io/operations/components/component-schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/component-schema/</guid><description>
&lt;p>Dapr 使用 &lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">CustomResourceDefinition&lt;/a> 定义和注册组件。 所有组件都定义为 CRD，可应用于 Dapr 运行的任何托管环境，而不仅仅是 Kubernetes。&lt;/p>
&lt;h2 id="格式">格式&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: [&lt;span style="color:#ae81ff">COMPONENT-NAME]&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: [&lt;span style="color:#ae81ff">COMPONENT-NAMESPACE]&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: [&lt;span style="color:#ae81ff">COMPONENT-TYPE]&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">initTimeout&lt;/span>: [&lt;span style="color:#ae81ff">TIMEOUT-DURATION]&lt;/span>
&lt;span style="color:#f92672">ignoreErrors&lt;/span>: [&lt;span style="color:#ae81ff">BOOLEAN]&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: [&lt;span style="color:#ae81ff">METADATA-NAME]&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: [&lt;span style="color:#ae81ff">METADATA-VALUE]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="字段">字段&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段&lt;/th>
&lt;th style="text-align:center">必填&lt;/th>
&lt;th>详情&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>apiVersion&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td>您正在调用的Dapr版本(如果适用的话为 Kubernetes) API&lt;/td>
&lt;td>&lt;code>dapr.io/v1alpha1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kind&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td>CRD的类型。 组件必须始终是 &lt;code>Component&lt;/code>&lt;/td>
&lt;td>&lt;code>Component (组件)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>metadata&lt;/strong>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td>&lt;strong>有关组件注册的信息&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>metadata.name&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td>组件的名称&lt;/td>
&lt;td>&lt;code>prod-statestore&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>metadata.namespace&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td>主机环境的命名空间&lt;/td>
&lt;td>&lt;code>myapp-namespace&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>spec&lt;/strong>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td>&lt;strong>关于组件资源的详细信息&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>spec.type&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td>组件类型&lt;/td>
&lt;td>&lt;code>state.redis&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>spec.version&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td>组件版本&lt;/td>
&lt;td>&lt;code>v1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>spec.initTimeout&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td>组件初始化的超时时间 默认为30秒&lt;/td>
&lt;td>&lt;code>5m&lt;/code>, &lt;code>1h&lt;/code>, &lt;code>20s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>spec.ignoreErrors&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td>如果组件加载失败，请告诉Dapr sidecar 继续初始化。 默认为 false&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>spec.metadata&lt;/strong>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td>&lt;strong>一个组件特定配置的键/值。 查看你的组件字段定义&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="特殊的元数据值">特殊的元数据值&lt;/h3>
&lt;p>元数据值可以包含一个 &lt;code>{uuid}&lt;/code> 标签，当 Dapr sidecar 启动时，该标记将被随机生成的 UUID 所取代。 每个启动都会生成新的 UUID。 它可以用来在 Kubernetes 上区分同一个 pod 的多个实例 ，比如 &lt;a href="https://docs.dapr.io/reference/components-reference/supported-pubsub/setup-mqtt/">共享的 MQTT 订阅&lt;/a>。 下面是一个使用 &lt;code> {uuid}&lt;/code> 选项的示例。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">messagebus&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.mqtt&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">consumerID&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{uuid}&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">url&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tcp://admin:public@localhost:1883&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">qos&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">retain&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">cleanSession&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="深入阅读">深入阅读&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/concepts/components-concept/">Components concept&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/operations/components/component-secrets/">组件定义中的引用密钥&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">支持的状态存储&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-pubsub/">支持的 发布/订阅 消息代理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-secret-stores/">支持的密钥存储&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-bindings/">Supported bindings&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/operations/components/component-scopes/">设置组件作用域&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: Certification lifecycle</title><link>https://docs.dapr.io/operations/components/certification-lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/certification-lifecycle/</guid><description>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>Dapr 使用模块化设计，将功能作为组件来提供。 每个组件都有接口定义。 All of the components are pluggable so that in ideal scenarios, you can swap out one component with the same interface for another. Each component that is used in production, needs to maintain a certain set of technical requirements that ensure the functional compatibility and robustness of the component.&lt;/p>
&lt;p>In general a component needs to be:&lt;/p>
&lt;ul>
&lt;li>compliant with the defined Dapr interfaces&lt;/li>
&lt;li>functionally correct and robust&lt;/li>
&lt;li>well documented and maintained&lt;/li>
&lt;/ul>
&lt;p>To make sure a component conforms to the standards set by Dapr, there are a set of tests run against a component in a Dapr maintainers managed environment. Once the tests pass consistently, the maturity level can be determined for a component.&lt;/p>
&lt;h2 id="certification-levels">Certification levels&lt;/h2>
&lt;p>The levels are as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#alpha">Alpha&lt;/a>&lt;/li>
&lt;li>&lt;a href="#beta">Beta&lt;/a>&lt;/li>
&lt;li>&lt;a href="#general-availability-ga">General availability (GA)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="alpha">Alpha&lt;/h3>
&lt;ul>
&lt;li>The component implements the required interface and works as described in the specification&lt;/li>
&lt;li>The component has documentation&lt;/li>
&lt;li>The component might be buggy or might expose bugs on integration&lt;/li>
&lt;li>The component may not pass all conformance tests&lt;/li>
&lt;li>The component may not have conformance tests&lt;/li>
&lt;li>Recommended for only non-business-critical uses because of potential for incompatible changes in subsequent releases&lt;/li>
&lt;/ul>
&lt;p>All components start at the Alpha stage.&lt;/p>
&lt;h3 id="beta">Beta&lt;/h3>
&lt;ul>
&lt;li>The component must pass all the component conformance tests defined to satisfy the component specification&lt;/li>
&lt;li>The component conformance tests have been run in a Dapr maintainers managed environment&lt;/li>
&lt;li>The component contains a record of the conformance test result reviewed and approved by Dapr maintainers with specific components-contrib version&lt;/li>
&lt;li>Recommended for only non-business-critical uses because of potential for incompatible changes in subsequent releases&lt;/li>
&lt;/ul>
&lt;h3 id="general-availability-ga">General Availability (GA)&lt;/h3>
&lt;ul>
&lt;li>Has at least two different users using the component in production&lt;/li>
&lt;li>A GA component has a maintainer in the Dapr community or the Dapr maintainers&lt;/li>
&lt;li>The component is well documented, tested and maintained across multiple versions of components-contrib repo&lt;/li>
&lt;/ul>
&lt;h2 id="conformance-tests">Conformance tests&lt;/h2>
&lt;p>Each component in the &lt;a href="https://github.com/dapr/components-contrib">components-contrib&lt;/a> repository needs to adhere to a set of interfaces defined by Dapr. Conformance tests are tests that are run on these component definitions with their associated backing services such that the component is tested to be conformant with the Dapr interface specifications and behavior.&lt;/p>
&lt;p>The conformance tests are defined for the following building blocks:&lt;/p>
&lt;ul>
&lt;li>State store&lt;/li>
&lt;li>Secret store&lt;/li>
&lt;li>绑定&lt;/li>
&lt;li>发布/订阅&lt;/li>
&lt;/ul>
&lt;p>To understand more about them see the readme &lt;a href="https://github.com/dapr/components-contrib/blob/master/tests/conformance/README.md">here&lt;/a>.&lt;/p>
&lt;h3 id="test-requirements">Test requirements&lt;/h3>
&lt;ul>
&lt;li>The tests should validate the functional behavior and robustness of component based on the component specification&lt;/li>
&lt;li>All the details needed to reproduce the tests are added as part of the component conformance test documentation&lt;/li>
&lt;/ul>
&lt;h2 id="component-certification-process">Component certification process&lt;/h2>
&lt;p>For a component to be certified tests are run in an environment maintained by the Dapr team.&lt;/p>
&lt;h3 id="new-component-certification-alpha-beta-or-beta-ga">New component certification: Alpha-&amp;gt;Beta or Beta-&amp;gt;GA&lt;/h3>
&lt;p>For a new component requiring a certification change from Alpha to Beta or Beta to GA, a request for component certification follows these steps:&lt;/p>
&lt;ul>
&lt;li>An issue is created with a request for certification of the component with the current and the new certification levels&lt;/li>
&lt;li>A user of a component submits a PR for integrating the component to run with the defined conformance test suite&lt;/li>
&lt;li>The user details the environment setup in the issue created, so that a Dapr maintainer can setup the service in a managed environment&lt;/li>
&lt;li>After the environment setup is complete, Dapr maintainers review the PR and if approved merges that PR&lt;/li>
&lt;li>Dapr maintainers review functional correctness with the test being run in an environment maintained by the Dapr team&lt;/li>
&lt;li>Dapr maintainers update the component status document categorized by Dapr Runtime version. This is done as part of the release process in the next release of Dapr runtime&lt;/li>
&lt;/ul>
&lt;h3 id="existing-ga-certified-component">Existing GA certified component&lt;/h3>
&lt;p>For an existing GA certified component, conformance test should be run against any changes made to component code or the backing service version or the client version.&lt;/p>
&lt;p>In the scenarios where a component version is updated, the component again starts from Alpha stage and then the new component certification is followed for that.&lt;/p></description></item><item><title>Operations: How-To: 限定组件作用范围在一或多个应用</title><link>https://docs.dapr.io/operations/components/component-scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/component-scopes/</guid><description>
&lt;p>Dapr 组件的名称空间（注意与 Kubernetes 名称空间概念区分），这意味着 Dapr runtime 实例只能访问已部署到同一名称空间的组件。&lt;/p>
&lt;p>当 Dapr 运行时，它将自己的配置名称空间与其加载的组件的命名空间进行匹配，并且仅初始化与其名称空间匹配的组件。 并且不会加载不同命名空间中的所有其他组件。&lt;/p>
&lt;h2 id="命名空间">命名空间&lt;/h2>
&lt;p>名称空间可用于限制组件访问特定的 Dapr 实例。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-0-self-hosted-tab" data-toggle="tab" href="#tabs-0-self-hosted" role="tab"
aria-controls="tabs-0-self-hosted" aria-selected="true">
Self-Hosted
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-0-kubernetes-tab" data-toggle="tab" href="#tabs-0-kubernetes" role="tab"
aria-controls="tabs-0-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active" id="tabs-0-self-hosted" role="tabpanel" aria-labelled-by="tabs-0-self-hosted-tab">
&lt;br />&lt;p>在自托管模式下，开发人员可以通过设置 &lt;code>NAMESPACE&lt;/code> 环境变量来指定 Dapr 实例的名称空间。 如果设置了 &lt;code>NAMESPACE&lt;/code> 环境变量，Dapr 只会加载其元数据中指定相同名称空间的组件。&lt;/p>
&lt;p>例如，将此组件 &lt;code>production&lt;/code> 命名空间中&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">redis-master:6379&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若要告诉 Dapr 它部署到哪个名称空间，请设置环境变量：&lt;/p>
&lt;p>MacOS/Linux:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">export NAMESPACE&lt;span style="color:#f92672">=&lt;/span>production
&lt;span style="color:#75715e"># run Dapr as usual&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Windows:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">setx NAMESPACE &lt;span style="color:#e6db74">&amp;#34;production&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># run Dapr as usual&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-0-kubernetes" role="tabpanel" aria-labelled-by="tabs-0-kubernetes-tab">
&lt;br />&lt;p>让我们考虑在 Kubernetes 中的以下组件：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">redis-master:6379&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此示例中，只有运行在 &lt;code>production&lt;/code> 名称空间内的 Dapr 实例才能访问 Redis 组件。&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="在服务调用时使用名称空间">在服务调用时使用名称空间&lt;/h2>
&lt;p>在名称空间中使用服务调用应用程序时，您必须将其与名称空间进行限定。 例如，在 &lt;code>myapp&lt;/code> 上调用 &lt;code>ping&lt;/code> 方法，该方法限定范围为 &lt;code>production&lt;/code> 名称空间。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">https://localhost:3500/v1.0/invoke/myapp.production/method/ping
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者使用外部DNS地址的curl 命令，在这种情况下 &lt;code>api.demo.dapr.team&lt;/code> 就类似下面这样&lt;/p>
&lt;p>MacOS/Linux:&lt;/p>
&lt;pre>&lt;code>curl -i -d '{ &amp;quot;message&amp;quot;: &amp;quot;hello&amp;quot; }' \
-H &amp;quot;Content-type: application/json&amp;quot; \
-H &amp;quot;dapr-api-token: ${API_TOKEN}&amp;quot; \
https://api.demo.dapr.team/v1.0/invoke/myapp.production/method/ping
&lt;/code>&lt;/pre>&lt;h2 id="使用-pubsub-的命名空间">使用 pub/sub 的命名空间&lt;/h2>
&lt;p>请阅读 &lt;a href="https://docs.dapr.io/operations/components/component-scopes/">Pub/Sub 和名称空间&lt;/a> 了解有关范围组件的更多信息。&lt;/p>
&lt;h2 id="对具有作用域的组件的应用程序访问">对具有作用域的组件的应用程序访问&lt;/h2>
&lt;p>开发人员和操作员可能希望将一个数据库的访问权限限制为某个应用程序或一组特定应用程序。 为此，Dapr 允许您在组件 YAML 上指定&lt;/code>scopes`作用域。 添加到组件的这些应用程序作用域仅限制具有特定 ID 的应用程序才能使用该组件。&lt;/p>&lt;/p>
&lt;p spaces-before="0">下面的示例演示如何给予两个启用的Dapr应用访问权限， 使用 &lt;code>app1` 和 `app2` 两个应用程序可以访问名为 `statestore` 的 Redis 组件，这个组件部署在 `production` 命名空间
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">redis-master:6379&lt;/span>
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#ae81ff">app1&lt;/span>
- &lt;span style="color:#ae81ff">app2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="示例-iframe-width560-height315-srchttpswwwyoutubecomembed8w-ibdnvcumstart1763-frameborder0-allowaccelerometer-autoplay-clipboard-write-encrypted-media-gyroscope-picture-in-picture-allowfullscreen-markcrwd-markiframe">示例 &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/8W-iBDNvCUM?start=1763" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen mark="crwd-mark">&lt;/iframe>&lt;/h2>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/operations/components/setup-pubsub/pubsub-namespaces/">操作：配置具有多个命名空间的 Pub/Sub 组件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/secrets/secrets-scopes/">使用密钥作用域&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/operations/configuration/secret-scope/">限制可以从密钥仓库中读取的密钥&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: How-To: Reference secrets in components</title><link>https://docs.dapr.io/operations/components/component-secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/component-secrets/</guid><description>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>Components can reference secrets for the &lt;code>spec.metadata&lt;/code> section within the components definition.&lt;/p>
&lt;p>In order to reference a secret, you need to set the &lt;code>auth.secretStore&lt;/code> field to specify the name of the secret store that holds the secrets.&lt;/p>
&lt;p>When running in Kubernetes, if the &lt;code>auth.secretStore&lt;/code> is empty, the Kubernetes secret store is assumed.&lt;/p>
&lt;h3 id="支持的密钥存储">支持的密钥存储&lt;/h3>
&lt;p>Go to &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/secrets/howto-secrets/">this&lt;/a> link to see all the secret stores supported by Dapr, along with information on how to configure and use them.&lt;/p>
&lt;h2 id="referencing-secrets">Referencing secrets&lt;/h2>
&lt;p>While you have the option to use plain text secrets, this is not recommended for production:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">localhost:6379&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">MyPassword&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead create the secret in your secret store and reference it in the component definition:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">localhost:6379&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">secretKeyRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redis-secret&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">redis-password&lt;/span>
&lt;span style="color:#f92672">auth&lt;/span>:
&lt;span style="color:#f92672">secretStore&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;SECRET_STORE_NAME&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>SECRET_STORE_NAME&lt;/code> is the name of the configured &lt;a href="https://docs.dapr.io/reference/components-reference/supported-secret-stores/">secret store component&lt;/a>. When running in Kubernetes and using a Kubernetes secret store, the field &lt;code>auth.SecretStore&lt;/code> defaults to &lt;code>kubernetes&lt;/code> and can be left empty. When running in Kubernetes and using a Kubernetes secret store, the field &lt;code>auth.SecretStore&lt;/code> defaults to &lt;code>kubernetes&lt;/code> and can be left empty.&lt;/p>
&lt;p>The above component definition tells Dapr to extract a secret named &lt;code>redis-secret&lt;/code> from the defined secret store and assign the value of the &lt;code>redis-password&lt;/code> key in the secret to the &lt;code>redisPassword&lt;/code> field in the Component.&lt;/p>
&lt;h2 id="示例">示例&lt;/h2>
&lt;h3 id="referencing-a-kubernetes-secret">Referencing a Kubernetes secret&lt;/h3>
&lt;p>The following example shows you how to create a Kubernetes secret to hold the connection string for an Event Hubs binding.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>First, create the Kubernetes secret:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> kubectl create secret generic eventhubs-secret --from-literal&lt;span style="color:#f92672">=&lt;/span>connectionString&lt;span style="color:#f92672">=&lt;/span>*********
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Next, reference the secret in your binding:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">eventhubs&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">bindings.azure.eventhubs&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">connectionString&lt;/span>
&lt;span style="color:#f92672">secretKeyRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">eventhubs-secret&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">connectionString&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Finally, apply the component to the Kubernetes cluster:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f ./eventhubs.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="scoping-access-to-secrets">Scoping access to secrets&lt;/h2>
&lt;p>Dapr can restrict access to secrets in a secret store using its configuration. Read &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/secrets/secrets-scopes/">How To: Use secret scoping&lt;/a> and &lt;a href="https://docs.dapr.io/operations/configuration/secret-scope/">How-To: Limit the secrets that can be read from secret stores&lt;/a> for more information. This is the recommended way to limit access to secrets using Dapr.&lt;/p>
&lt;h2 id="kubernetes-permissions">Kubernetes permissions&lt;/h2>
&lt;h3 id="default-namespace">Default namespace&lt;/h3>
&lt;p>When running in Kubernetes, Dapr, during installtion, defines default Role and RoleBinding for secrets access from Kubernetes secret store in the &lt;code>default&lt;/code> namespace. For Dapr enabled apps that fetch secrets from &lt;code>default&lt;/code> namespace, a secret can be defined and referenced in components as shown in the example above.&lt;/p>
&lt;h3 id="non-default-namespaces">Non-default namespaces&lt;/h3>
&lt;p>If your Dapr enabled apps are using components that fetch secrets from non-default namespaces, apply the following resources to that namespace:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">---
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Role&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">secret-reader&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;NAMESPACE&amp;gt;&lt;/span>
&lt;span style="color:#f92672">rules&lt;/span>:
- &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;span style="color:#f92672">resources&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;secrets&amp;#34;&lt;/span>]
&lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>]
---
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">RoleBinding&lt;/span>
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dapr-secret-reader&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;NAMESPACE&amp;gt;&lt;/span>
&lt;span style="color:#f92672">subjects&lt;/span>:
- &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Role&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">secret-reader&lt;/span>
&lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These resources grant Dapr permissions to get secrets from the Kubernetes secret store for the namespace defined in the Role and RoleBinding.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
In production scenario to limit Dapr&amp;rsquo;s access to certain secret resources alone, you can use the &lt;code>resourceNames&lt;/code> field. See this &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#referring-to-resources">link&lt;/a> for further explanation.
&lt;/div>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/secrets/secrets-scopes/">使用密钥作用域&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/operations/configuration/secret-scope/">限制可以从密钥仓库中读取的密钥&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: 状态存储组件</title><link>https://docs.dapr.io/operations/components/setup-state-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/setup-state-store/</guid><description>
&lt;p>Dapr 与现有数据库集成，为应用程序提供CRUD操作、事务等状态管理功能。 Dapr 支持为&lt;em>每个应用&lt;/em>配置多个命名的状态存储组件。&lt;/p>
&lt;p>状态存储可以扩展，可以在 &lt;a href="https://github.com/dapr/components-contrib">components-contrib repo&lt;/a> 中找到。&lt;/p>
&lt;p>Dapr 的使用 &lt;code>Component&lt;/code> 文件来描述状态存储：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.&amp;lt;DATABASE&amp;gt;&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>数据库的类型由&lt;code>type&lt;/code>字段决定，连接地址和其他元数据等放在&lt;code>.metadata&lt;/code>部分。 即使元数据值可以在纯文本中包含密钥，但建议您使用一个 &lt;a href="https://docs.dapr.io/operations/components/component-secrets/">密钥存储&lt;/a>。&lt;/p>
&lt;p>阅读 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-get-save-state/#step-1-setup-a-state-store">本指南&lt;/a> 以获取配置状态存储组件的说明.&lt;/p>
&lt;h2 id="支持的状态存储">支持的状态存储&lt;/h2>
&lt;p>Visit &lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">this reference&lt;/a> to see all of the supported state stores in Dapr.&lt;/p>
&lt;h2 id="相关主题">相关主题&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/concepts/components-concept/">组件概念&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/">状态管理概览&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/api/state_api/">状态管理 API 规范&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">支持的状态存储&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: Pub/Sub 代理</title><link>https://docs.dapr.io/operations/components/setup-pubsub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/setup-pubsub/</guid><description>
&lt;p>Dapr集成了pub/sub消息总线，为应用程序提供了创建事件驱动、松散耦合架构的能力，在这种架构下，生产者通过主题向消费者发送事件。&lt;/p>
&lt;p>Dapr支持为&lt;em>每个应用&lt;/em>配置多个命名的pub/sub组件。 每个pub/sub组件都有一个名称，这个名称在发布消息主题时使用。 阅读 &lt;a href="https://docs.dapr.io/reference/api/pubsub_api/">API 参考&lt;/a>，了解如何发布和订阅主题的详细信息。&lt;/p>
&lt;p>Pub/sub组件是可扩展的， &lt;a href="https://docs.dapr.io/reference/components-reference/supported-pubsub/">这里&lt;/a>有支持的pub/sub组件列表，实现可以在&lt;a href="https://github.com/dapr/components-contrib">components-contrib repo&lt;/a>中找到。&lt;/p>
&lt;h2 id="组件文件">组件文件&lt;/h2>
&lt;p>Pub/sub使用&lt;code>Component&lt;/code>文件来描述：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.&amp;lt;NAME&amp;gt;&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pub/sub的类型由&lt;code>type&lt;/code>字段决定，连接地址和其他元数据等属性放在&lt;code>.metadata&lt;/code>部分。 尽管元数据值可以包含纯文本的密钥，但建议你使用&lt;a href="https://docs.dapr.io/operations/components/component-secrets/">密钥仓库&lt;/a>来存储并用&lt;code>secretKeyRef&lt;/code>引用。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Topic creation&lt;/h4>
根据你使用的 pub/sub 消息总线及其配置方式，主题可能会被自动创建。 即使消息总线支持自动创建主题，在生产环境中把它禁用也是一种常见的做法。 你可能会需要使用 CLI、管理控制台或请求表单来手动创建应用所需的主题。
&lt;/div>
&lt;p>请访问 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/howto-publish-subscribe/#step-3-publish-a-topic">本指南&lt;/a>，了解有关配置和使用 pub/sub 组件的说明。&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>Dapr概述 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/pubsub-overview/">Pub/Sub构件块&lt;/a>&lt;/li>
&lt;li>试试 &lt;a href="https://github.com/dapr/quickstarts/tree/master/pub-sub">Pub/Sub 快速启动示例&lt;/a>&lt;/li>
&lt;li>阅读&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/howto-publish-subscribe/">发布和订阅指南&lt;/a>&lt;/li>
&lt;li>了解 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/pubsub-scopes/">Topic 作用域&lt;/a>&lt;/li>
&lt;li>了解 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/pubsub-message-ttl/">消息存活时间&lt;/a>&lt;/li>
&lt;li>您可以重写这个文件以使用另一个 Redis 实例或者另一个 &lt;a href="https://docs.dapr.io/operations/components/setup-pubsub/">pubsub component&lt;/a> ，通过创建 &lt;code>components&lt;/code> 文件夹（文件夹中包含重写的文件）并在 &lt;code>dapr run&lt;/code> 命令行界面使用 &lt;code>--components-path&lt;/code> 标志。&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-pubsub/">Pub/Sub 组件列表&lt;/a>&lt;/li>
&lt;li>阅读 &lt;a href="https://docs.dapr.io/reference/api/pubsub_api/">API 引用&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: 密钥仓库组件</title><link>https://docs.dapr.io/operations/components/setup-secret-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/setup-secret-store/</guid><description>
&lt;p>Dapr integrates with secret stores to provide apps and other components with secure storage and access to secrets such as access keys and passwords. 每个密钥存储组件都有一个名称，这个名称用于访问密钥。&lt;/p>
&lt;p>与其他构建块组件一样，密钥存储组件是可扩展的，可以在&lt;a href="https://github.com/dapr/components-contrib">components-contrib 仓库&lt;/a>中找到。&lt;/p>
&lt;p>Dapr中的密钥存储使用&lt;code>Component&lt;/code>文件描述，其字段如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">secretstore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">secretstores.&amp;lt;NAME&amp;gt;&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>密钥存储的类型由&lt;code>type&lt;/code>字段决定，连接地址和其他元数据等放在&lt;code>.metadata&lt;/code>部分。&lt;/p>
&lt;p>不同的 &lt;a href="https://docs.dapr.io/reference/components-reference/supported-secret-stores/">支持的密钥存储&lt;/a> 将有不同的特定字段需要配置。 例如，当配置一个使用 AWS Secrets Manager秘密存储时，文件看起来就像这样：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">awssecretmanager&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">secretstores.aws.secretmanager&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">region&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;[aws_region]&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">accessKey&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;[aws_access_key]&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">secretKey&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;[aws_secret_key]&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">sessionToken&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;[aws_session_token]&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="应用配置">应用配置&lt;/h2>
&lt;p>一旦您创建了组件的 YAML 文件，按照以下说明来根据您的主机环境应用它：&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-1-self-hosted-tab" data-toggle="tab" href="#tabs-1-self-hosted" role="tab"
aria-controls="tabs-1-self-hosted" aria-selected="true">
Self-Hosted
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-kubernetes-tab" data-toggle="tab" href="#tabs-1-kubernetes" role="tab"
aria-controls="tabs-1-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active" id="tabs-1-self-hosted" role="tabpanel" aria-labelled-by="tabs-1-self-hosted-tab">
&lt;br />&lt;p>要在本地运行，创建一个包含YAML文件的&lt;code>components&lt;/code>目录，并提供&lt;code>dapr run&lt;/code>命令的路径，标志为&lt;code>--components-path&lt;/code>。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-kubernetes" role="tabpanel" aria-labelled-by="tabs-1-kubernetes-tab">
&lt;br />&lt;p>若要在 Kubernetes 中部署，假定您的组件文件名为 &lt;code>secret-store.yaml&lt;/code>，运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f secret-store.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="支持的密钥存储">支持的密钥存储&lt;/h2>
&lt;p>Visit the &lt;a href="https://docs.dapr.io/reference/components-reference/supported-secret-stores/">secret stores reference&lt;/a> for a full list of supported secret stores.&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-secret-stores/">支持的密钥存储组件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/secrets/">密钥构建块&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: 绑定组件</title><link>https://docs.dapr.io/operations/components/setup-bindings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/components/setup-bindings/</guid><description>
&lt;p>Dapr integrates with external resources to allow apps to both be triggered by external events and interact with the resources. Each binding component has a name and this name is used when interacting with the resource.&lt;/p>
&lt;p>As with other building block components, binding components are extensible and can be found in the &lt;a href="https://github.com/dapr/components-contrib">components-contrib repo&lt;/a>.&lt;/p>
&lt;p>A binding in Dapr is described using a &lt;code>Component&lt;/code> file with the following fields:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;NAME&amp;gt;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;NAMESPACE&amp;gt;&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">bindings.&amp;lt;NAME&amp;gt;&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The type of binding is determined by the &lt;code>type&lt;/code> field, and things like connection strings and other metadata are put in the &lt;code>.metadata&lt;/code> section.&lt;/p>
&lt;p>Different &lt;a href="https://docs.dapr.io/reference/components-reference/supported-bindings/">supported bindings&lt;/a> will have different specific fields that would need to be configured. For example, when configuring a binding for &lt;a href="https://docs.dapr.io/reference/components-reference/supported-bindings/blobstorage/">Azure Blob Storage&lt;/a>, the file would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;NAME&amp;gt;&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;NAMESPACE&amp;gt;&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">bindings.azure.blobstorage&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">storageAccount&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">myStorageAccountName&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">storageAccessKey&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#75715e">***********&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">container&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">container1&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">decodeBase64&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;bool&amp;gt;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">getBlobRetryCount&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;integer&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="应用配置">应用配置&lt;/h2>
&lt;p>一旦您创建了组件的 YAML 文件，按照以下说明来根据您的主机环境应用它：&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-2" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-2-self-hosted-tab" data-toggle="tab" href="#tabs-2-self-hosted" role="tab"
aria-controls="tabs-2-self-hosted" aria-selected="true">
Self-Hosted
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-2-kubernetes-tab" data-toggle="tab" href="#tabs-2-kubernetes" role="tab"
aria-controls="tabs-2-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-2-content">
&lt;div class="tab-pane fade show active" id="tabs-2-self-hosted" role="tabpanel" aria-labelled-by="tabs-2-self-hosted-tab">
&lt;br />&lt;p>要在本地运行，创建一个包含YAML文件的&lt;code>components&lt;/code>目录，并提供&lt;code>dapr run&lt;/code>命令的路径，标志为&lt;code>--components-path&lt;/code>。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-2-kubernetes" role="tabpanel" aria-labelled-by="tabs-2-kubernetes-tab">
&lt;br />&lt;p>若要在 Kubernetes 中部署，假定您的组件文件名为 &lt;code>mybinding.yaml&lt;/code>，运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f mybinding.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="supported-bindings">Supported bindings&lt;/h2>
&lt;p>Visit the &lt;a href="https://docs.dapr.io/reference/components-reference/supported-bindings/">bindings reference&lt;/a> for a full list of supported resources.&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/bindings/">绑定构建块&lt;/a>&lt;/li>
&lt;li>&lt;a href="%7B%7BX%1A8X%7D%7D">Supported bindings&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>