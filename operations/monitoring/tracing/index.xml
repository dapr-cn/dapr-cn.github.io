<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – Tracing</title><link>https://docs.dapr.io/operations/monitoring/tracing/</link><description>Recent content in Tracing on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/operations/monitoring/tracing/index.xml" rel="self" type="application/rss+xml"/><item><title>Operations: Configure Dapr to send distributed tracing data</title><link>https://docs.dapr.io/operations/monitoring/tracing/setup-tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/setup-tracing/</guid><description>
&lt;p>It is recommended to run Dapr with tracing enabled for any production scenario. It is recommended to run Dapr with tracing enabled for any production scenario. You can configure Dapr to send tracing and telemetry data to many backends based on your environment, whether it is running in the cloud or on-premises.&lt;/p>
&lt;h2 id="tracing-configuration">Tracing configuration&lt;/h2>
&lt;p>The &lt;code>tracing&lt;/code> section under the &lt;code>Configuration&lt;/code> spec contains the following properties:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://...&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following table lists the properties for tracing:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>samplingRate&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Set sampling rate for tracing to be enabled or disabled.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>zipkin.endpointAddress&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Set the Zipkin server address.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="zipkin-in-self-hosted-mode">Zipkin in self hosted mode&lt;/h2>
&lt;p>The following steps show you how to configure Dapr to send distributed tracing data to Zipkin running as a container on your local machine and view them.&lt;/p>
&lt;p>For self hosted mode, create a Dapr configuration file locally and reference it with the Dapr CLI.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create the following &lt;code>config.yaml&lt;/code> YAML file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">zipkin&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://localhost:9411/api/v2/spans&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Launch Zipkin using Docker:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run -d -p 9411:9411 openzipkin/zipkin
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Launch Dapr with the &lt;code>--config&lt;/code> param with the path for where the &lt;code>config.yaml&lt;/code> is saved :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id mynode --app-port &lt;span style="color:#ae81ff">3000&lt;/span> --config ./config.yaml node app.js
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="zipkin-in-kubernetes-mode">Zipkin in Kubernetes mode&lt;/h2>
&lt;p>The following steps show you how to configure Dapr to send distributed tracing data to Zipkin running as a container in your Kubernetes cluster, and how to view them.&lt;/p>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;p>First, deploy Zipkin:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create deployment zipkin --image openzipkin/zipkin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a Kubernetes Service for the Zipkin pod:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl expose deployment zipkin --type ClusterIP --port &lt;span style="color:#ae81ff">9411&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, create the following YAML file locally:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">zipkin&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://zipkin.default.svc.cluster.local:9411/api/v2/spans&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, deploy the Dapr configuration:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f config.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to enable this configuration for your Dapr sidecar, add the following annotation to your pod spec template:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;zipkin&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it! That&amp;rsquo;s it! Your sidecar is now configured for use with Zipkin.&lt;/p>
&lt;h3 id="viewing-tracing-data">Viewing Tracing Data&lt;/h3>
&lt;p>To view traces, connect to the Zipkin service and open the UI:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl port-forward svc/zipkin 9411:9411
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On your browser, go to &lt;code>http://localhost:9411&lt;/code> and you should see the Zipkin UI.&lt;/p>
&lt;p>&lt;img src="https://docs.dapr.io/images/zipkin_ui.png" alt="zipkin">&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zipkin.io/">Zipkin for distributed tracing&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: Using OpenTelemetry Collector to collect traces</title><link>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector/</guid><description>
&lt;p>Dapr will be exporting trace in the OpenTelemetry format when OpenTelemetry is GA. In the mean time, traces can be exported using the Zipkin format. Combining with the &lt;a href="https://github.com/open-telemetry/opentelemetry-collector">OpenTelemetry Collector&lt;/a> you can still send trace to many popular tracing backends (like Azure AppInsights, AWS X-Ray, StackDriver, etc). In the mean time, traces can be exported using the Zipkin format. Combining with the &lt;a href="https://github.com/open-telemetry/opentelemetry-collector">OpenTelemetry Collector&lt;/a> you can still send trace to many popular tracing backends (like Azure AppInsights, AWS X-Ray, StackDriver, etc).&lt;/p>
&lt;p>&lt;img src="https://docs.dapr.io/images/open-telemetry-collector.png" alt="Using OpenTelemetry Collect to integrate with many backend">&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>A installation of Dapr on Kubernetes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You are already setting up your trace backends to receive traces.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check OpenTelemetry Collector exporters &lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter">here&lt;/a> and &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter">here&lt;/a> to see if your trace backend is supported by the OpenTelemetry Collector. On those linked pages, find the exporter you want to use and read its doc to find out the parameters required. On those linked pages, find the exporter you want to use and read its doc to find out the parameters required.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="setting-opentelemetry-collector">Setting OpenTelemetry Collector&lt;/h2>
&lt;h3 id="run-opentelemetry-collector-to-push-to-your-trace-backend">Run OpenTelemetry Collector to push to your trace backend&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Check out the file &lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/open-telemetry-collector-generic.yaml">open-telemetry-collector-generic.yaml&lt;/a> and replace the section marked with &lt;code>&amp;lt;your-exporter-here&amp;gt;&lt;/code> with the correct settings for your trace exporter. Again, refer to the OpenTelemetry Collector links in the Prerequisites section to determine the correct settings. Again, refer to the OpenTelemetry Collector links in the Prerequisites section to determine the correct settings.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apply the configuration with &lt;code>kubectl apply -f open-telemetry-collector-generic.yaml&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="set-up-dapr-to-send-trace-to-opentelemetry-collector">Set up Dapr to send trace to OpenTelemetry Collector&lt;/h2>
&lt;h3 id="turn-on-tracing-in-dapr">Turn on tracing in Dapr&lt;/h3>
&lt;p>Next, set up both a Dapr configuration file to turn on tracing and deploy a tracing exporter component that uses the OpenTelemetry Collector.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a collector-config.yaml file with this &lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/collector-config.yaml">content&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apply the configuration with &lt;code>kubectl apply -f collector-config.yaml&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="deploy-your-app-with-tracing">Deploy your app with tracing&lt;/h3>
&lt;p>When running in Kubernetes mode, apply the &lt;code>appconfig&lt;/code> configuration by adding a &lt;code>dapr.io/config&lt;/code> annotation to the container that you want to participate in the distributed tracing, as shown in the following example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MyApp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8080&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;appconfig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some of the quickstarts such as &lt;a href="https://github.com/dapr/quickstarts/tree/master/distributed-calculator">distributed calculator&lt;/a> already configure these settings, so if you are using those no additional settings are needed.&lt;/p>
&lt;p>That&amp;rsquo;s it! There&amp;rsquo;s no need include any SDKs or instrument your application code. Dapr automatically handles the distributed tracing for you.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE&lt;/strong>: You can register multiple tracing exporters at the same time, and the tracing logs are forwarded to all registered exporters.&lt;/p>
&lt;/blockquote>
&lt;p>Deploy and run some applications. Deploy and run some applications. Wait for the trace to propagate to your tracing backend and view them there.&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>Try out the &lt;a href="https://github.com/dapr/quickstarts/tree/master/observability/README.md">observability quickstart&lt;/a>&lt;/li>
&lt;li>How to set &lt;a href="https://docs.dapr.io/operations/configuration/configuration-overview/#tracing">tracing configuration options&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: Using OpenTelemetry Collector to collect traces to send to AppInsights</title><link>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector-appinsights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector-appinsights/</guid><description>
&lt;p>Dapr integrates with &lt;a href="https://github.com/open-telemetry/opentelemetry-collector">OpenTelemetry Collector&lt;/a> using the Zipkin API. This guide walks through an example using Dapr to push trace events to Azure Application Insights, using the OpenTelemetry Collector. This guide walks through an example using Dapr to push trace events to Azure Application Insights, using the OpenTelemetry Collector.&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;p>A installation of Dapr on Kubernetes.&lt;/p>
&lt;h2 id="how-to-configure-distributed-tracing-with-application-insights">How to configure distributed tracing with Application Insights&lt;/h2>
&lt;h3 id="setup-application-insights">Setup Application Insights&lt;/h3>
&lt;ol>
&lt;li>First, you&amp;rsquo;ll need an Azure account. First, you&amp;rsquo;ll need an Azure account. See instructions &lt;a href="https://azure.microsoft.com/free/">here&lt;/a> to apply for a &lt;strong>free&lt;/strong> Azure account.&lt;/li>
&lt;li>Follow instructions &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/create-new-resource">here&lt;/a> to create a new Application Insights resource.&lt;/li>
&lt;li>Get the Application Insights Intrumentation key from your Application Insights page.&lt;/li>
&lt;/ol>
&lt;h3 id="run-opentelemetry-collector-to-push-to-your-application-insights-instance">Run OpenTelemetry Collector to push to your Application Insights instance&lt;/h3>
&lt;p>Install the OpenTelemetry Collector to your Kubernetes cluster to push events to your Application Insights instance&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Check out the file &lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/open-telemetry-collector-appinsights.yaml">open-telemetry-collector-appinsights.yaml&lt;/a> and replace the &lt;code>&amp;lt;INSTRUMENTATION-KEY&amp;gt;&lt;/code> placeholder with your Application Insights Instrumentation Key.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apply the configuration with &lt;code>kubectl apply -f open-telemetry-collector-appinsights.yaml&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Next, set up both a Dapr configuration file to turn on tracing and deploy a tracing exporter component that uses the OpenTelemetry Collector.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a collector-config.yaml file with this &lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/collector-config.yaml">content&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apply the configuration with &lt;code>kubectl apply -f collector-config.yaml&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="deploy-your-app-with-tracing">Deploy your app with tracing&lt;/h3>
&lt;p>When running in Kubernetes mode, apply the &lt;code>appconfig&lt;/code> configuration by adding a &lt;code>dapr.io/config&lt;/code> annotation to the container that you want to participate in the distributed tracing, as shown in the following example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MyApp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8080&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;appconfig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some of the quickstarts such as &lt;a href="https://github.com/dapr/quickstarts/tree/master/distributed-calculator">distributed calculator&lt;/a> already configure these settings, so if you are using those no additional settings are needed.&lt;/p>
&lt;p>That&amp;rsquo;s it! There&amp;rsquo;s no need include any SDKs or instrument your application code. Dapr automatically handles the distributed tracing for you.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE&lt;/strong>: You can register multiple tracing exporters at the same time, and the tracing logs are forwarded to all registered exporters.&lt;/p>
&lt;/blockquote>
&lt;p>Deploy and run some applications. After a few minutes, you should see tracing logs appearing in your Application Insights resource. Deploy and run some applications. After a few minutes, you should see tracing logs appearing in your Application Insights resource. You can also use the &lt;strong>Application Map&lt;/strong> to examine the topology of your services, as shown below:&lt;/p>
&lt;p>&lt;img src="https://docs.dapr.io/images/open-telemetry-app-insights.png" alt="Application map">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE&lt;/strong>: Only operations going through Dapr API exposed by Dapr sidecar (e.g. service invocation or event publishing) are displayed in Application Map topology.&lt;/p>
&lt;/blockquote>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>Try out the &lt;a href="https://github.com/dapr/quickstarts/tree/master/observability/README.md">observability quickstart&lt;/a>&lt;/li>
&lt;li>How to set &lt;a href="https://docs.dapr.io/operations/configuration/configuration-overview/#tracing">tracing configuration options&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: Common Tracing Backends</title><link>https://docs.dapr.io/operations/monitoring/tracing/supported-tracing-backends/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/supported-tracing-backends/</guid><description/></item></channel></rss>