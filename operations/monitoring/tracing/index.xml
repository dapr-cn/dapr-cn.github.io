<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – Tracing（调用链追踪）</title><link>https://docs.dapr.io/operations/monitoring/tracing/</link><description>Recent content in Tracing（调用链追踪） on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/operations/monitoring/tracing/index.xml" rel="self" type="application/rss+xml"/><item><title>Operations: Configure Dapr to send distributed tracing data</title><link>https://docs.dapr.io/operations/monitoring/tracing/setup-tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/setup-tracing/</guid><description>
&lt;p>It is recommended to run Dapr with tracing enabled for any production scenario. You can configure Dapr to send tracing and telemetry data to many backends based on your environment, whether it is running in the cloud or on-premises.&lt;/p>
&lt;h2 id="tracing-configuration">Tracing configuration&lt;/h2>
&lt;p>&lt;code>Configuration&lt;/code> sepc下的 &lt;code>tracing&lt;/code> 部分包含以下属性：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://...&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面的表格给出了调用链追踪功能可配置的属性&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>数据类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>samplingRate&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>设置采样率，可以用来控制追踪功能是否开启。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>zipkin.endpointAddress&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>设置 Zipkin 服务器地址。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="zipkin-in-self-hosted-mode">Zipkin in self hosted mode&lt;/h2>
&lt;p>The following steps show you how to configure Dapr to send distributed tracing data to Zipkin running as a container on your local machine and view them.&lt;/p>
&lt;p>For self hosted mode, create a Dapr configuration file locally and reference it with the Dapr CLI.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create the following &lt;code>config.yaml&lt;/code> YAML file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">zipkin&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://localhost:9411/api/v2/spans&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Launch Zipkin using Docker:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run -d -p 9411:9411 openzipkin/zipkin
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Launch Dapr with the &lt;code>--config&lt;/code> param with the path for where the &lt;code>config.yaml&lt;/code> is saved :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id mynode --app-port &lt;span style="color:#ae81ff">3000&lt;/span> --config ./config.yaml node app.js
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="zipkin-in-kubernetes-mode">Zipkin in Kubernetes mode&lt;/h2>
&lt;p>The following steps show you how to configure Dapr to send distributed tracing data to Zipkin running as a container in your Kubernetes cluster, and how to view them.&lt;/p>
&lt;h3 id="设置">设置&lt;/h3>
&lt;p>First, deploy Zipkin:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create deployment zipkin --image openzipkin/zipkin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a Kubernetes Service for the Zipkin pod:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl expose deployment zipkin --type ClusterIP --port &lt;span style="color:#ae81ff">9411&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, create the following YAML file locally:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">zipkin&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://zipkin.default.svc.cluster.local:9411/api/v2/spans&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, deploy the Dapr configuration:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f config.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to enable this configuration for your Dapr sidecar, add the following annotation to your pod spec template:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;zipkin&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it! Your sidecar is now configured for use with Zipkin.&lt;/p>
&lt;h3 id="viewing-tracing-data">Viewing Tracing Data&lt;/h3>
&lt;p>To view traces, connect to the Zipkin service and open the UI:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl port-forward svc/zipkin 9411:9411
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On your browser, go to &lt;code>http://localhost:9411&lt;/code> and you should see the Zipkin UI.&lt;/p>
&lt;p>&lt;img src="https://docs.dapr.io/images/zipkin_ui.png" alt="zipkin">&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zipkin.io/">Zipkin for distributed tracing&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: 使用 OpenTelemetry Collector 来收集应用痕迹</title><link>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector/</guid><description>
&lt;p>当 OpenTelemetry 项目进入到 GA（General Availability, 正式发布的版本）阶段时，Dapr 将会以 OpenTelemetry 的格式规范导出应用的痕迹信息。 同时，可以使用 Zipkin 要求的格式导出应用痕迹信息。 与 &lt;a href="https://github.com/open-telemetry/opentelemetry-collector">OpenTelemetry Collector&lt;/a> 结合一起使用，你可以将应用的痕迹信息发送到许多流行的分布式追踪后端程序中（例如 Azure AppInsights，AWS X-Ray ，StackDriver 等）&lt;/p>
&lt;p>&lt;img src="https://docs.dapr.io/images/open-telemetry-collector.png" alt="使用 OpenTelemetry 收集器与别的后端进行集成">&lt;/p>
&lt;h2 id="必备条件">必备条件&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>A installation of Dapr on Kubernetes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您已经设置好了分布式追踪后端程序用以接受应用痕迹信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 &lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter">这里&lt;/a> 和 &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter">这里&lt;/a> 去查看你的分布式追踪程序是否支持 OpenTelemetry Collector。 在这些外链的页面上，找到您要使用的应用痕迹导出工具，并阅读其文档以查找所需的参数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="使用-opentelemetry-collector">使用 OpenTelemetry Collector&lt;/h2>
&lt;h3 id="运行-opentelemetry-collector-推送到您的分布式应用跟踪后端程序">运行 OpenTelemetry Collector 推送到您的分布式应用跟踪后端程序&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>签出这个文件 &lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/open-telemetry-collector-generic.yaml">open-telemetry-collector-generic.yaml&lt;/a> 并将标记为 &lt;code>&amp;lt;your-exporter-here&amp;gt;&lt;/code> 的部分替换成您正在正确使用的追踪导出器的设置。 再次提醒，请参阅前提条件中的关于 OpenTelemetry Collector 的链接以确定您的设置是正确的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>kubectl apply -f open-telemetry-collector-generic.yaml&lt;/code> 来应用配置。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="设置-dapr-从而将应用痕迹信息发送到-opentelemetry-collector">设置 Dapr 从而将应用痕迹信息发送到 OpenTelemetry Collector&lt;/h2>
&lt;h3 id="在-dapr-中启用应用痕迹追踪功能">在 Dapr 中启用应用痕迹追踪功能&lt;/h3>
&lt;p>Next, set up both a Dapr configuration file to turn on tracing and deploy a tracing exporter component that uses the OpenTelemetry Collector.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建具有&lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/collector-config.yaml">此内容的&lt;/a> collector-config.yaml 文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>kubectl apply -f collector-config.yaml&lt;/code>来应用配置&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="部署你的应用并启用应用痕迹跟踪功能">部署你的应用，并启用应用痕迹跟踪功能&lt;/h3>
&lt;p>When running in Kubernetes mode, apply the &lt;code>appconfig&lt;/code> configuration by adding a &lt;code>dapr.io/config&lt;/code> annotation to the container that you want to participate in the distributed tracing, as shown in the following example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MyApp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8080&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;appconfig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some of the quickstarts such as &lt;a href="https://github.com/dapr/quickstarts/tree/master/distributed-calculator">distributed calculator&lt;/a> already configure these settings, so if you are using those no additional settings are needed.&lt;/p>
&lt;p>That&amp;rsquo;s it! There&amp;rsquo;s no need include any SDKs or instrument your application code. Dapr automatically handles the distributed tracing for you.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>备注&lt;/strong>: 您可以同时注册多个的应用痕迹跟踪导出器，并且跟踪日志转发到所有已注册的导出器中。&lt;/p>
&lt;/blockquote>
&lt;p>Deploy and run some applications. 等待应用痕迹信息推送到您的分布式跟踪后端中，并在那里查看它们。&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>尝试访问&lt;a href="https://github.com/dapr/quickstarts/tree/master/observability/README.md">可观察性快速入门&lt;/a>&lt;/li>
&lt;li>如何设置&lt;a href="https://docs.dapr.io/operations/configuration/configuration-overview/#tracing">应用跟踪配置选项&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: Using OpenTelemetry Collector to collect traces to send to AppInsights</title><link>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector-appinsights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector-appinsights/</guid><description>
&lt;p>Dapr integrates with &lt;a href="https://github.com/open-telemetry/opentelemetry-collector">OpenTelemetry Collector&lt;/a> using the Zipkin API. This guide walks through an example using Dapr to push trace events to Azure Application Insights, using the OpenTelemetry Collector.&lt;/p>
&lt;h2 id="必备条件">必备条件&lt;/h2>
&lt;p>A installation of Dapr on Kubernetes.&lt;/p>
&lt;h2 id="how-to-configure-distributed-tracing-with-application-insights">How to configure distributed tracing with Application Insights&lt;/h2>
&lt;h3 id="setup-application-insights">Setup Application Insights&lt;/h3>
&lt;ol>
&lt;li>First, you&amp;rsquo;ll need an Azure account. See instructions &lt;a href="https://azure.microsoft.com/free/">here&lt;/a> to apply for a &lt;strong>free&lt;/strong> Azure account.&lt;/li>
&lt;li>Follow instructions &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/create-new-resource">here&lt;/a> to create a new Application Insights resource.&lt;/li>
&lt;li>Get the Application Insights Intrumentation key from your Application Insights page.&lt;/li>
&lt;/ol>
&lt;h3 id="run-opentelemetry-collector-to-push-to-your-application-insights-instance">Run OpenTelemetry Collector to push to your Application Insights instance&lt;/h3>
&lt;p>Install the OpenTelemetry Collector to your Kubernetes cluster to push events to your Application Insights instance&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Check out the file &lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/open-telemetry-collector-appinsights.yaml">open-telemetry-collector-appinsights.yaml&lt;/a> and replace the &lt;code>&amp;lt;INSTRUMENTATION-KEY&amp;gt;&lt;/code> placeholder with your Application Insights Instrumentation Key.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apply the configuration with &lt;code>kubectl apply -f open-telemetry-collector-appinsights.yaml&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Next, set up both a Dapr configuration file to turn on tracing and deploy a tracing exporter component that uses the OpenTelemetry Collector.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建具有&lt;a href="https://docs.dapr.io/docs/open-telemetry-collector/collector-config.yaml">此内容的&lt;/a> collector-config.yaml 文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>kubectl apply -f collector-config.yaml&lt;/code>来应用配置&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="部署你的应用并启用应用痕迹跟踪功能">部署你的应用，并启用应用痕迹跟踪功能&lt;/h3>
&lt;p>When running in Kubernetes mode, apply the &lt;code>appconfig&lt;/code> configuration by adding a &lt;code>dapr.io/config&lt;/code> annotation to the container that you want to participate in the distributed tracing, as shown in the following example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#ae81ff">...&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MyApp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8080&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;appconfig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some of the quickstarts such as &lt;a href="https://github.com/dapr/quickstarts/tree/master/distributed-calculator">distributed calculator&lt;/a> already configure these settings, so if you are using those no additional settings are needed.&lt;/p>
&lt;p>That&amp;rsquo;s it! There&amp;rsquo;s no need include any SDKs or instrument your application code. Dapr automatically handles the distributed tracing for you.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>备注&lt;/strong>: 您可以同时注册多个的应用痕迹跟踪导出器，并且跟踪日志转发到所有已注册的导出器中。&lt;/p>
&lt;/blockquote>
&lt;p>Deploy and run some applications. After a few minutes, you should see tracing logs appearing in your Application Insights resource. You can also use the &lt;strong>Application Map&lt;/strong> to examine the topology of your services, as shown below:&lt;/p>
&lt;p>&lt;img src="https://docs.dapr.io/images/open-telemetry-app-insights.png" alt="Application map">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE&lt;/strong>: Only operations going through Dapr API exposed by Dapr sidecar (e.g. service invocation or event publishing) are displayed in Application Map topology.&lt;/p>
&lt;/blockquote>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>尝试访问&lt;a href="https://github.com/dapr/quickstarts/tree/master/observability/README.md">可观察性快速入门&lt;/a>&lt;/li>
&lt;li>如何设置&lt;a href="https://docs.dapr.io/operations/configuration/configuration-overview/#tracing">应用跟踪配置选项&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: 常见追踪后端</title><link>https://docs.dapr.io/operations/monitoring/tracing/supported-tracing-backends/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/operations/monitoring/tracing/supported-tracing-backends/</guid><description/></item></channel></rss>