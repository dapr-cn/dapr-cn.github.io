<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr Docs â€“ Pub/Sub brokers</title><link>https://docs.dapr.io/en/operations/components/setup-pubsub/</link><description>Recent content in Pub/Sub brokers on Dapr Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/en/operations/components/setup-pubsub/index.xml" rel="self" type="application/rss+xml"/><item><title>Operations: Overview</title><link>https://docs.dapr.io/en/operations/components/setup-pubsub/setup-pubsub-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/components/setup-pubsub/setup-pubsub-overview/</guid><description>
&lt;p>Dapr integrates with pub/sub message buses to provide applications with the ability to create event-driven, loosely coupled architectures where producers send events to consumers via topics.&lt;/p>
&lt;p>Dapr supports the configuration of multiple, named, pub/sub components &lt;em>per application&lt;/em>. Each pub/sub component has a name and this name is used when publishing a message topic. Read the &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">API reference&lt;/a> for details on how to publish and subscribe to topics.&lt;/p>
&lt;p>Pub/sub components are extensible. A list of support pub/sub components is &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/">here&lt;/a> and the implementations can be found in the &lt;a href="https://github.com/dapr/components-contrib">components-contrib repo&lt;/a>.&lt;/p>
&lt;h2 id="component-files">Component files&lt;/h2>
&lt;p>A pub/sub is described using a &lt;code>Component&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.&amp;lt;NAME&amp;gt;&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;KEY&amp;gt;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;VALUE&amp;gt;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The type of pub/sub is determined by the &lt;code>type&lt;/code> field, and properties such as connection strings and other metadata are put in the &lt;code>.metadata&lt;/code> section.
Even though metadata values can contain secrets in plain text, it is recommended you use a &lt;a href="https://docs.dapr.io/en/operations/components/component-secrets/">secret store&lt;/a> using a &lt;code>secretKeyRef&lt;/code>.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Topic creation&lt;/h4>
Depending on the pub/sub message bus you are using and how it is configured, topics may be created automatically. Even if the message bus supports automatic topic creation, it is a common governance practice to disable it in production environments. You may still need to use a CLI, admin console, or request form to manually create the topics required by your application.
&lt;/div>
&lt;p>Visit &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe/#step-3-publish-a-topic">this guide&lt;/a> for instructions on configuring and using pub/sub components.&lt;/p>
&lt;h2 id="related-links">Related links&lt;/h2>
&lt;ul>
&lt;li>Overview of the Dapr &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-overview/">Pub/Sub building block&lt;/a>&lt;/li>
&lt;li>Try the &lt;a href="https://github.com/dapr/quickstarts/tree/master/pub-sub">Pub/Sub quickstart sample&lt;/a>&lt;/li>
&lt;li>Read the &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe/">guide on publishing and subscribing&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-scopes/">topic scoping&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl/">message time-to-live&lt;/a>&lt;/li>
&lt;li>Learn &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/pubsub-namespaces/">how to configure Pub/Sub components with multiple namespaces&lt;/a>&lt;/li>
&lt;li>List of &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/">pub/sub components&lt;/a>&lt;/li>
&lt;li>Read the &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">API reference&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: HowTo: Configure Pub/Sub components with multiple namespaces</title><link>https://docs.dapr.io/en/operations/components/setup-pubsub/pubsub-namespaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/components/setup-pubsub/pubsub-namespaces/</guid><description>
&lt;p>In some scenarios, applications can be spread across namespaces and share a queue or topic via PubSub. In this case, the PubSub component must be provisioned on each namespace.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Namespaces are a Dapr concept used for scoping applications and components. This example uses Kubernetes namespaces, however the Dapr component namespace scoping can be used on any supported platform. Read &lt;a href="https://docs.dapr.io/en/operations/components/component-scopes/">How-To: Scope components to one or more applications&lt;/a> for more information on scoping components.
&lt;/div>
&lt;p>This example uses the &lt;a href="https://github.com/dapr/quickstarts/tree/master/pub-sub">PubSub sample&lt;/a>. The Redis installation and the subscribers are in &lt;code>namespace-a&lt;/code> while the publisher UI is in &lt;code>namespace-b&lt;/code>. This solution will also work if Redis is installed on another namespace or if you use a managed cloud service like Azure ServiceBus, AWS SNS/SQS or GCP PubSub.&lt;/p>
&lt;p>This is a diagram of the example using namespaces.&lt;/p>
&lt;img src="https://docs.dapr.io/images/pubsub-multiple-namespaces.png" width=1000>
&lt;br>&lt;/br>
&lt;p>The table below shows which resources are deployed to which namespaces:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Resource&lt;/th>
&lt;th>namespace-a&lt;/th>
&lt;th>namespace-b&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Redis master&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Redis slave&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Dapr&amp;rsquo;s PubSub component&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Node subscriber&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Python subscriber&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>React UI publisher&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="pre-requisites">Pre-requisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/en/operations/hosting/kubernetes/kubernetes-deploy/">Dapr installed on Kubernetes&lt;/a> in any namespace since Dapr works at the cluster level.&lt;/li>
&lt;li>Checkout and cd into the directory for &lt;a href="https://github.com/dapr/quickstarts/tree/master/pub-sub">PubSub quickstart&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="setup-namespace-a">Setup &lt;code>namespace-a&lt;/code>&lt;/h2>
&lt;p>Create namespace and switch kubectl to use it.&lt;/p>
&lt;pre>&lt;code>kubectl create namespace namespace-a
kubectl config set-context --current --namespace=namespace-a
&lt;/code>&lt;/pre>&lt;p>Install Redis (master and slave) on &lt;code>namespace-a&lt;/code>, following &lt;a href="https://docs.dapr.io/en/getting-started/configure-state-pubsub/">these instructions&lt;/a>.&lt;/p>
&lt;p>Now, configure &lt;code>deploy/redis.yaml&lt;/code>, paying attention to the hostname containing &lt;code>namespace-a&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;redisHost&amp;#34;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;redis-master.namespace-a.svc:6379&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;redisPassword&amp;#34;&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;YOUR_PASSWORD&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Deploy resources to &lt;code>namespace-a&lt;/code>:&lt;/p>
&lt;pre>&lt;code>kubectl apply -f deploy/redis.yaml
kubectl apply -f deploy/node-subscriber.yaml
kubectl apply -f deploy/python-subscriber.yaml
&lt;/code>&lt;/pre>&lt;h2 id="setup-namespace-b">Setup &lt;code>namespace-b&lt;/code>&lt;/h2>
&lt;p>Create namespace and switch kubectl to use it.&lt;/p>
&lt;pre>&lt;code>kubectl create namespace namespace-b
kubectl config set-context --current --namespace=namespace-b
&lt;/code>&lt;/pre>&lt;p>Deploy resources to &lt;code>namespace-b&lt;/code>, including the Redis component:&lt;/p>
&lt;pre>&lt;code>kubectl apply -f deploy/redis.yaml
kubectl apply -f deploy/react-form.yaml
&lt;/code>&lt;/pre>&lt;p>Now, find the IP address for react-form, open it on your browser and publish messages to each topic (A, B and C).&lt;/p>
&lt;pre>&lt;code>kubectl get service -A
&lt;/code>&lt;/pre>&lt;h2 id="confirm-subscribers-received-the-messages">Confirm subscribers received the messages.&lt;/h2>
&lt;p>Switch back to &lt;code>namespace-a&lt;/code>:&lt;/p>
&lt;pre>&lt;code>kubectl config set-context --current --namespace=namespace-a
&lt;/code>&lt;/pre>&lt;p>Find the POD names:&lt;/p>
&lt;pre>&lt;code>kubectl get pod # Copy POD names and use in the next commands.
&lt;/code>&lt;/pre>&lt;p>Display logs:&lt;/p>
&lt;pre>&lt;code>kubectl logs node-subscriber-XYZ node-subscriber
kubectl logs python-subscriber-XYZ python-subscriber
&lt;/code>&lt;/pre>&lt;p>The messages published on the browser should show in the corresponding subscriber&amp;rsquo;s logs. The Node.js subscriber receives messages of type &amp;ldquo;A&amp;rdquo; and &amp;ldquo;B&amp;rdquo;, while the Python subscriber receives messages of type &amp;ldquo;A&amp;rdquo; and &amp;ldquo;C&amp;rdquo;.&lt;/p>
&lt;h2 id="clean-up">Clean up&lt;/h2>
&lt;pre>&lt;code>kubectl delete -f deploy/redis.yaml --namespace namespace-a
kubectl delete -f deploy/node-subscriber.yaml --namespace namespace-a
kubectl delete -f deploy/python-subscriber.yaml --namespace namespace-a
kubectl delete -f deploy/react-form.yaml --namespace namespace-b
kubectl delete -f deploy/redis.yaml --namespace namespace-b
kubectl config set-context --current --namespace=default
kubectl delete namespace namespace-a
kubectl delete namespace namespace-b
&lt;/code>&lt;/pre>&lt;h2 id="related-links">Related links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/en/operations/components/component-scopes/">Scope components to one or more applications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/secrets/secrets-scopes/">Use secret scoping&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/en/operations/configuration/secret-scope/">Limit the secrets that can be read from secret stores&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Operations: Supported pub/sub brokers</title><link>https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/</guid><description>
&lt;p>Table captions:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Status&lt;/code>: &lt;a href="https://docs.dapr.io/en/operations/components/certification-lifecycle/">Component certification&lt;/a> status&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/en/operations/components/certification-lifecycle/#alpha">Alpha&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/en/operations/components/certification-lifecycle/#beta">Beta&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/en/operations/components/certification-lifecycle/#general-availability-ga">GA&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>Since&lt;/code>: defines from which Dapr Runtime version, the component is in the current status&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>Component version&lt;/code>: defines the version of the component&lt;/p>
&lt;/blockquote>
&lt;h3 id="generic">Generic&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Status&lt;/th>
&lt;th>Component version&lt;/th>
&lt;th>Since&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-apache-kafka/">Apache Kafka&lt;/a>&lt;/td>
&lt;td>Beta&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-hazelcast/">Hazelcast&lt;/a>&lt;/td>
&lt;td>Alpha&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-mqtt/">MQTT&lt;/a>&lt;/td>
&lt;td>Alpha&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-nats-streaming/">NATS Streaming&lt;/a>&lt;/td>
&lt;td>Beta&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-pulsar/">Pulsar&lt;/a>&lt;/td>
&lt;td>Alpha&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-rabbitmq/">RabbitMQ&lt;/a>&lt;/td>
&lt;td>Alpha&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-redis-pubsub/">Redis Streams&lt;/a>&lt;/td>
&lt;td>GA&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="amazon-web-services-aws">Amazon Web Services (AWS)&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Status&lt;/th>
&lt;th>Component version&lt;/th>
&lt;th>Since&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-aws-snssqs/">AWS SNS/SQS&lt;/a>&lt;/td>
&lt;td>Alpha&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="google-cloud-platform-gcp">Google Cloud Platform (GCP)&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Status&lt;/th>
&lt;th>Component version&lt;/th>
&lt;th>Since&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-gcp-pubsub/">GCP Pub/Sub&lt;/a>&lt;/td>
&lt;td>Alpha&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="microsoft-azure">Microsoft Azure&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Status&lt;/th>
&lt;th>Component version&lt;/th>
&lt;th>Since&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-azure-eventhubs/">Azure Events Hub&lt;/a>&lt;/td>
&lt;td>Alpha&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/setup-azure-servicebus/">Azure Service Bus&lt;/a>&lt;/td>
&lt;td>GA&lt;/td>
&lt;td>v1&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>