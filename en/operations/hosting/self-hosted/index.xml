<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr Docs â€“ Run Dapr in Self Hosted Mode</title><link>https://docs.dapr.io/en/operations/hosting/self-hosted/</link><description>Recent content in Run Dapr in Self Hosted Mode on Dapr Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/en/operations/hosting/self-hosted/index.xml" rel="self" type="application/rss+xml"/><item><title>Operations: Overview of Dapr in self-hosted mode</title><link>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-overview/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Dapr can be configured to run in self-hosted mode on your local developer machine or on production VMs. Each running service has a Dapr runtime process (or sidecar) which is configured to use state stores, pub/sub, binding components and the other building blocks.&lt;/p>
&lt;h2 id="initialization">Initialization&lt;/h2>
&lt;p>Dapr can be initialized &lt;a href="https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-with-docker/">with Docker&lt;/a> (default) or in &lt;a href="https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-no-docker/">slim-init mode&lt;/a>. The default Docker setup provides out of the box functionality with the following containers and configuration:&lt;/p>
&lt;ul>
&lt;li>A Redis container configured to serve as the default component for both state management and publish/subscribe.&lt;/li>
&lt;li>A Zipkin container for diagnostics and tracing.&lt;/li>
&lt;li>A default Dapr configuration and components installed in &lt;code>$HOME/.dapr/&lt;/code> (Mac/Linux) or &lt;code>%USERPROFILE%\.dapr\&lt;/code> (Windows).&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>dapr-placement&lt;/code> service is responsible for managing the actor distribution scheme and key range settings. This service is not launched as a container and is only required if you are using Dapr actors. For more information on the actor &lt;code>Placement&lt;/code> service read &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/actors/actors-overview/">actor overview&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://docs.dapr.io/images/overview-standalone-docker.png" width=1000 alt="Diagram of Dapr in self-hosted Docker mode" />&lt;/p>
&lt;h2 id="launching-applications-with-dapr">Launching applications with Dapr&lt;/h2>
&lt;p>You can use the &lt;a href="https://docs.dapr.io/en/reference/cli/dapr-run/">&lt;code>dapr run&lt;/code> CLI command&lt;/a> to a Dapr sidecar process along with your application.&lt;/p></description></item><item><title>Operations: How-To: Run Dapr in self-hosted mode with Docker</title><link>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-with-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-with-docker/</guid><description>
&lt;p>This article provides guidance on running Dapr with Docker on a Windows/Linux/macOS machine or VM.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/en/getting-started/install-dapr-cli/">Dapr CLI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/compose/install/">Docker-Compose&lt;/a> (optional)&lt;/li>
&lt;/ul>
&lt;h2 id="initialize-dapr-environment">Initialize Dapr environment&lt;/h2>
&lt;p>To initialize the Dapr control-plane containers and create a default configuration file, run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr init
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run-both-app-and-sidecar-as-a-process">Run both app and sidecar as a process&lt;/h2>
&lt;p>The &lt;a href="https://docs.dapr.io/en/reference/cli/dapr-run/">&lt;code>dapr run&lt;/code> CLI command&lt;/a> can be used to launch a Dapr sidecar along with your application:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id myapp --app-port &lt;span style="color:#ae81ff">5000&lt;/span> -- dotnet run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will launch both the daprd sidecar binary and run &lt;code>dotnet run&lt;/code>, launching your application.&lt;/p>
&lt;h2 id="run-app-as-a-process-and-sidecar-as-a-docker-container">Run app as a process and sidecar as a Docker container&lt;/h2>
&lt;p>Alternately, if you are running Dapr in a Docker container and your app as a process on the host machine, then you need to configure Docker to use the host network so that Dapr and the app can share a localhost network interface.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The host networking driver for Docker is only supported on Linux hosts.
&lt;/div>
&lt;p>If you are running your Docker daemon on a Linux host, you can run the following to launch Dapr:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">docker run --net&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;host&amp;#34;&lt;/span> --mount type&lt;span style="color:#f92672">=&lt;/span>bind,source&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/components,target&lt;span style="color:#f92672">=&lt;/span>/components daprio/daprd:edge ./daprd -app-id &amp;lt;my-app-id&amp;gt; -app-port &amp;lt;my-app-port&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you can run your app on the host and they should connect over the localhost network interface.&lt;/p>
&lt;h2 id="run-both-app-and-dapr-in-a-single-docker-container">Run both app and Dapr in a single Docker container&lt;/h2>
&lt;blockquote>
&lt;p>For development purposes ONLY&lt;/p>
&lt;/blockquote>
&lt;p>It is not recommended to run both the Dapr runtime and an application inside the same container. However, it is possible to do so for local development scenarios.&lt;/p>
&lt;p>In order to do this, you&amp;rsquo;ll need to write a Dockerfile that installs the Dapr runtime, Dapr CLI and your app code.
You can then invoke both the Dapr runtime and your app code using the Dapr CLI.&lt;/p>
&lt;p>Below is an example of a Dockerfile which achieves this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:3.7.1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Install dapr CLI&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> wget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Install daprd&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> DAPR_BUILD_DIR&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> $DAPR_BUILD_DIR /opt/dapr&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> PATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/opt/dapr/:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PATH&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Install your app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> python .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> pip install requests&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENTRYPOINT&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;dapr&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;run&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--app-id&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;nodeapp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--app-port&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;3000&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;node&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;app.js&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember that if Dapr needs to communicate with other components i.e. Redis, these also need to
be made accessible to it.&lt;/p>
&lt;h2 id="run-on-a-docker-network">Run on a Docker network&lt;/h2>
&lt;p>If you have multiple instances of Dapr running in Docker containers and want them to be able to
communicate with each other &lt;em>i.e. for service invocation&lt;/em>, then you&amp;rsquo;ll need to create a shared Docker network
and make sure those Dapr containers are attached to it.&lt;/p>
&lt;p>You can create a simple Docker network using:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker network create my-dapr-network
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When running your Docker containers, you can attach them to the network using:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run --net&lt;span style="color:#f92672">=&lt;/span>my-dapr-network ...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each container will receive a unique IP on that network and be able to communicate with other containers on that network.&lt;/p>
&lt;h2 id="run-using-docker-compose">Run using Docker-Compose&lt;/h2>
&lt;p>&lt;a href="https://docs.docker.com/compose/">Docker Compose&lt;/a> can be used to define multi-container application configurations. If you wish to run multiple apps with Dapr sidecars locally without Kubernetes then it is recommended to use a Docker Compose definition (&lt;code>docker-compose.yml&lt;/code>).&lt;/p>
&lt;p>The syntax and tooling of Docker Compose is outside the scope of this article, however, it is recommended you refer to the &lt;a href="https://docs.docker.com/compose/">offical Docker documentation&lt;/a> for further details.&lt;/p>
&lt;p>In order to run your applications using Dapr and Docker Compose you&amp;rsquo;ll need to define the sidecar pattern in your &lt;code>docker-compose.yml&lt;/code>. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>
&lt;span style="color:#f92672">services&lt;/span>:
&lt;span style="color:#f92672">nodeapp&lt;/span>:
&lt;span style="color:#f92672">build&lt;/span>: &lt;span style="color:#ae81ff">./node&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;50001:50001&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Dapr instances communicate over gRPC so we need to expose the gRPC port&lt;/span>
&lt;span style="color:#f92672">depends_on&lt;/span>:
- &lt;span style="color:#ae81ff">redis&lt;/span>
- &lt;span style="color:#ae81ff">placement&lt;/span>
&lt;span style="color:#f92672">networks&lt;/span>:
- &lt;span style="color:#ae81ff">hello-dapr&lt;/span>
&lt;span style="color:#f92672">nodeapp-dapr&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;daprio/daprd:edge&amp;#34;&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;./daprd&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-app-id&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;nodeapp&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-app-port&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;3000&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-placement-host-address&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;placement:50006&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Dapr&amp;#39;s placement service can be reach via the docker DNS entry&lt;/span>
]
&lt;span style="color:#f92672">volumes&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;./components/:/components&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Mount our components folder for the runtime to use&lt;/span>
&lt;span style="color:#f92672">depends_on&lt;/span>:
- &lt;span style="color:#ae81ff">nodeapp&lt;/span>
&lt;span style="color:#f92672">network_mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;service:nodeapp&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Attach the nodeapp-dapr service to the nodeapp network namespace&lt;/span>
&lt;span style="color:#ae81ff">...&lt;/span> &lt;span style="color:#75715e"># Deploy other daprized services and components (i.e. Redis)&lt;/span>
&lt;span style="color:#f92672">placement&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;daprio/dapr&amp;#34;&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;./placement&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-port&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;50006&amp;#34;&lt;/span>]
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;50006:50006&amp;#34;&lt;/span>
&lt;span style="color:#f92672">networks&lt;/span>:
- &lt;span style="color:#ae81ff">hello-dapr&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>For those running the Docker daemon on a Linux host, you can also use &lt;code>network_mode: host&lt;/code> to leverage host networking if needed.&lt;/p>
&lt;/blockquote>
&lt;p>To further learn how to run Dapr with Docker Compose, see the &lt;a href="https://github.com/dapr/samples/tree/master/hello-docker-compose">Docker-Compose Sample&lt;/a>.&lt;/p>
&lt;h2 id="run-on-kubernetes">Run on Kubernetes&lt;/h2>
&lt;p>If your deployment target is Kubernetes please use Dapr&amp;rsquo;s first-class integration. Refer to the
&lt;a href="https://docs.dapr.io/en/operations/hosting/kubernetes/kubernetes-overview/">Dapr on Kubernetes docs&lt;/a>.&lt;/p>
&lt;h2 id="docker-images">Docker images&lt;/h2>
&lt;p>Dapr provides a number of prebuilt Docker images for different components, you should select the relevant image for your desired binary, architecture, and tag/version.&lt;/p>
&lt;h3 id="images">Images&lt;/h3>
&lt;p>There are published Docker images for each of the Dapr components available on &lt;a href="https://hub.docker.com/u/daprio">Docker Hub&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/dapr">daprio/dapr&lt;/a> (contains all Dapr binaries)&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/daprd">daprio/daprd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/placement">daprio/placement&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/sentry">daprio/sentry&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/daprio/dapr-dev">daprio/dapr-dev&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="tags">Tags&lt;/h3>
&lt;h4 id="linuxamd64">Linux/amd64&lt;/h4>
&lt;ul>
&lt;li>&lt;code>latest&lt;/code>: The latest release version, &lt;strong>ONLY&lt;/strong> use for development purposes.&lt;/li>
&lt;li>&lt;code>edge&lt;/code>: The latest edge build (master).&lt;/li>
&lt;li>&lt;code>major.minor.patch&lt;/code>: A release version.&lt;/li>
&lt;li>&lt;code>major.minor.patch-rc.iteration&lt;/code>: A release candidate.&lt;/li>
&lt;/ul>
&lt;h4 id="linuxarmv7">Linux/arm/v7&lt;/h4>
&lt;ul>
&lt;li>&lt;code>latest-arm&lt;/code>: The latest release version for ARM, &lt;strong>ONLY&lt;/strong> use for development purposes.&lt;/li>
&lt;li>&lt;code>edge-arm&lt;/code>: The latest edge build for ARM (master).&lt;/li>
&lt;li>&lt;code>major.minor.patch-arm&lt;/code>: A release version for ARM.&lt;/li>
&lt;li>&lt;code>major.minor.patch-rc.iteration-arm&lt;/code>: A release candidate for ARM.&lt;/li>
&lt;/ul></description></item><item><title>Operations: How-To: Run Dapr in self-hosted mode without Docker</title><link>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-no-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-no-docker/</guid><description>
&lt;p>This article provides guidance on running Dapr in self-hosted mode without Docker.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/en/getting-started/install-dapr-selfhost/#installing-dapr-cli">Dapr CLI&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="initialize-dapr-without-containers">Initialize Dapr without containers&lt;/h2>
&lt;p>The Dapr CLI provides an option to initialize Dapr using slim init, without the default creation of a development environment which has a dependency on Docker. To initialize Dapr with slim init, after installing the Dapr CLI use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr init --slim
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this mode two different binaries are installed &lt;code>daprd&lt;/code> and &lt;code>placement&lt;/code>. The &lt;code>placement&lt;/code> binary is needed to enable &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/actors/actors-overview/">actors&lt;/a> in a Dapr self-hosted installation.&lt;/p>
&lt;p>In this mode no default components such as Redis are installed for state management or pub/sub. This means, that aside from &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/service-invocation/service-invocation-overview/">Service Invocation&lt;/a>, no other building block functionality is available on install out of the box. Users are free to setup their own environment and custom components. Furthermore, actor based service invocation is possible if a state store is configured as explained in the following sections.&lt;/p>
&lt;h2 id="service-invocation">Service invocation&lt;/h2>
&lt;p>See &lt;a href="https://github.com/dapr/samples/tree/master/hello-dapr-slim">this sample&lt;/a> for an example on how to perform service invocation in this mode.&lt;/p>
&lt;h2 id="enabling-state-management-or-pubsub">Enabling state management or pub/sub&lt;/h2>
&lt;p>See configuring Redis in self-hosted mode &lt;a href="https://redis.io/topics/quickstart">without docker&lt;/a> to enable a local state store or pub/sub broker for messaging.&lt;/p>
&lt;h2 id="enabling-actors">Enabling actors&lt;/h2>
&lt;p>The placement service must be run locally to enable actor placement. Also, a &lt;a href="https://docs.dapr.io/en/reference/components-reference/supported-state-stores/">transactional state store that supports ETags&lt;/a> must be enabled to use actors, for example, &lt;a href="https://redis.io/topics/quickstart">Redis configured in self-hosted mode&lt;/a>.&lt;/p>
&lt;p>By default for Linux/MacOS the &lt;code>placement&lt;/code> binary is installed in &lt;code>/$HOME/.dapr/bin&lt;/code> or for Windows at &lt;code>%USERPROFILE%\.dapr\bin&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ $HOME/.dapr/bin/placement
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> starting Dapr Placement Service -- version 1.0.0-rc.1 -- commit 13ae49d instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> log level set to: info instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> metrics server started on :9090/ instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.metrics type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> Raft server is starting on 127.0.0.1:8201... instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement.raft type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> placement service started on port &lt;span style="color:#ae81ff">50005&lt;/span> instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0000&lt;span style="color:#f92672">]&lt;/span> Healthz server is listening on :8080 instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0001&lt;span style="color:#f92672">]&lt;/span> cluster leadership acquired instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
INFO&lt;span style="color:#f92672">[&lt;/span>0001&lt;span style="color:#f92672">]&lt;/span> leader is established. instance&lt;span style="color:#f92672">=&lt;/span>Nicoletaz-L10.redmond.corp.microsoft.com scope&lt;span style="color:#f92672">=&lt;/span>dapr.placement type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>1.0.0-rc.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here on you can follow the sample example created for the &lt;a href="https://github.com/dapr/java-sdk/tree/master/examples/src/main/java/io/dapr/examples/actors">java-sdk&lt;/a>, &lt;a href="https://github.com/dapr/python-sdk/tree/master/examples/demo_actor">python-sdk&lt;/a> or &lt;a href="https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-actors/dotnet-actors-howto/">dotnet-sdk&lt;/a> for running an application with Actors enabled.&lt;/p>
&lt;p>Update the state store configuration files to have the Redis host and password match the setup that you have. Additionally to enable it as a actor state store have the metadata piece added similar to the &lt;a href="https://github.com/dapr/java-sdk/blob/master/examples/components/state/redis.yaml">sample Java Redis component&lt;/a> definition.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml"> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">actorStateStore&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cleanup">Cleanup&lt;/h2>
&lt;p>Follow the uninstall &lt;a href="https://docs.dapr.io/en/getting-started/install-dapr-selfhost/#uninstall-dapr-in-a-self-hosted-mode">instructions&lt;/a> to remove the binaries.&lt;/p></description></item><item><title>Operations: Steps to upgrade Dapr in a self-hosted environment</title><link>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-upgrade/</guid><description>
&lt;ol>
&lt;li>
&lt;p>Uninstall the current Dapr deployment:&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This will remove the default &lt;code>$HOME/.dapr&lt;/code> directory, binaries and all containers (dapr_redis, dapr_placement and dapr_zipkin). Linux users need to run &lt;code>sudo&lt;/code> if docker command needs sudo.
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr uninstall --all
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Download and install the latest CLI by visiting &lt;a href="https://docs.dapr.io/en/getting-started/install-dapr-cli/">this guide&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Initialize the Dapr runtime:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr init
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Ensure you are using the latest version of Dapr (v1.2) with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ dapr --version
CLI version: 1.2
Runtime version: 1.2
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Operations: Uninstall Dapr in a self-hosted environment</title><link>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/operations/hosting/self-hosted/self-hosted-uninstall/</guid><description>
&lt;p>The following CLI command removes the Dapr sidecar binaries and the placement container:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr uninstall
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above command will not remove the Redis or Zipkin containers that were installed during &lt;code>dapr init&lt;/code> by default, just in case you were using them for other purposes. To remove Redis, Zipkin, Actor Placement container, as well as the default Dapr directory located at &lt;code>$HOME/.dapr&lt;/code> or &lt;code>%USERPROFILE%\.dapr\&lt;/code>, run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr uninstall --all
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
For Linux/MacOS users, if you run your docker cmds with sudo or the install path is &lt;code>/usr/local/bin&lt;/code>(default install path), you need to use &lt;code>sudo dapr uninstall&lt;/code> to remove dapr binaries and/or the containers.
&lt;/div></description></item></channel></rss>