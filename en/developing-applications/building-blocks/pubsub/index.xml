<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr Docs â€“ Publish &amp; subscribe messaging</title><link>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/</link><description>Recent content in Publish &amp; subscribe messaging on Dapr Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Publish and subscribe overview</title><link>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-overview/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The &lt;a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">publish/subscribe pattern&lt;/a> allows microservices to communicate with each other using messages. The &lt;strong>producer or publisher&lt;/strong> sends messages to a &lt;strong>topic&lt;/strong> without knowledge of what application will receive them. This involves writing them to an input channel. Similarly, a &lt;strong>consumer or subscriber&lt;/strong> subscribes to the topic and receive its messages without any knowledge of what service produced these messages. This involves receiving messages from an output channel. An intermediary message broker is responsible for copying each message from an input channel to an output channels for all subscribers interested in that message. This pattern is especially useful when you need to decouple microservices from one another.&lt;/p>
&lt;p>The publish/subscribe API in Dapr provides an at-least-once guarantee and integrates with various message brokers and queuing systems. The specific implementation used by your service is pluggable and configured as a Dapr pub/sub component at runtime. This approach removes the dependency from your service and, as a result, makes your service more portable and flexible to changes.&lt;/p>
&lt;p>The complete list of Dapr pub/sub components is &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/">here&lt;/a>.&lt;/p>
&lt;img src="https://docs.dapr.io/images/pubsub-overview-pattern.png" width=1000>
&lt;p>&lt;br>&lt;/br>&lt;/p>
&lt;p>The Dapr pub/sub building block provides a platform-agnostic API to send and receive messages. Your services publish messages to a named topic and also subscribe to a topic to consume the messages.&lt;/p>
&lt;p>The service makes a network call to a Dapr pub/sub building block, exposed as a sidecar. This building block then makes calls into a Dapr pub/sub component that encapsulates a specific message broker product. To receive topics, Dapr subscribes to the Dapr pub/sub component on behalf of your service and delivers the messages to an endpoint when they arrive.&lt;/p>
&lt;p>The diagram below shows an example of a &amp;ldquo;shipping&amp;rdquo; service and an &amp;ldquo;email&amp;rdquo; service that have both subscribed to topics that are published by the &amp;ldquo;cart&amp;rdquo; service. Each service loads pub/sub component configuration files that point to the same pub/sub message bus component, for example Redis Streams, NATS Streaming, Azure Service Bus, or GCP Pub/Sub.&lt;/p>
&lt;img src="https://docs.dapr.io/images/pubsub-overview-components.png" width=1000>
&lt;br>&lt;/br>
&lt;p>The diagram below has the same services, however this time showing the Dapr publish API that sends an &amp;ldquo;order&amp;rdquo; topic and order endpoints on the subscribing services that these topic messages are delivered posted to by Dapr.&lt;/p>
&lt;img src="https://docs.dapr.io/images/pubsub-overview-publish-API.png" width=1000>
&lt;br>&lt;/br>
&lt;h2 id="features">Features&lt;/h2>
&lt;p>The pub/sub building block provides several features to your application.&lt;/p>
&lt;h3 id="cloud-events-message-format">Cloud Events message format&lt;/h3>
&lt;p>To enable message routing and to provide additional context with each message, Dapr uses the &lt;a href="https://github.com/cloudevents/spec/tree/v1.0">CloudEvents 1.0 specification&lt;/a> as its message format. Any message sent by an application to a topic using Dapr is automatically &amp;ldquo;wrapped&amp;rdquo; in a Cloud Events envelope, using &lt;code>Content-Type&lt;/code> header value for &lt;code>datacontenttype&lt;/code> attribute.&lt;/p>
&lt;p>Dapr implements the following Cloud Events fields:&lt;/p>
&lt;ul>
&lt;li>&lt;code>id&lt;/code>&lt;/li>
&lt;li>&lt;code>source&lt;/code>&lt;/li>
&lt;li>&lt;code>specversion&lt;/code>&lt;/li>
&lt;li>&lt;code>type&lt;/code>&lt;/li>
&lt;li>&lt;code>datacontenttype&lt;/code> (Optional)&lt;/li>
&lt;/ul>
&lt;p>The following example shows an XML content in CloudEvent v1.0 serialized as JSON:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;specversion&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;xml.message&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;https://example.com/message&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;subject&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Test XML Message&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;id-1234-5678-9101&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;time&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2020-09-23T06:23:21Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;datacontenttype&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;text/xml&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;&amp;lt;note&amp;gt;&amp;lt;to&amp;gt;User1&amp;lt;/to&amp;gt;&amp;lt;from&amp;gt;user2&amp;lt;/from&amp;gt;&amp;lt;message&amp;gt;hi&amp;lt;/message&amp;gt;&amp;lt;/note&amp;gt;&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="message-subscription">Message subscription&lt;/h3>
&lt;p>Dapr applications can subscribe to published topics. Dapr allows two methods by which your applications can subscribe to topics:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Declarative&lt;/strong>, where a subscription is defined in an external file,&lt;/li>
&lt;li>&lt;strong>Programmatic&lt;/strong>, where a subscription is defined in the user code.&lt;/li>
&lt;/ul>
&lt;p>Both declarative and programmatic approaches support the same features. The declarative approach removes the Dapr dependency from your code and allows for existing applications to subscribe to topics, without having to change code. The programmatic approach implements the subscription in your code.&lt;/p>
&lt;p>For more information read &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe/">How-To: Publish a message and subscribe to a topic&lt;/a>.&lt;/p>
&lt;h3 id="message-delivery">Message delivery&lt;/h3>
&lt;p>In principle, Dapr considers message successfully delivered when the subscriber responds with a non-error response after processing the message. For more granular control, Dapr&amp;rsquo;s publish/subscribe API also provides explicit statuses, defined in the response payload, which the subscriber can use to indicate the specific handling instructions to Dapr (e.g. &lt;code>RETRY&lt;/code> or &lt;code>DROP&lt;/code>). For more information on message routing read &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/#provide-routes-for-dapr-to-deliver-topic-events">Dapr publish/subscribe API documentation&lt;/a>&lt;/p>
&lt;h3 id="at-least-once-guarantee">At-least-once guarantee&lt;/h3>
&lt;p>Dapr guarantees &amp;ldquo;At-Least-Once&amp;rdquo; semantics for message delivery. That means that when an application publishes a message to a topic using the publish/subscribe API, Dapr ensures that this message will be delivered at least once to every subscriber.&lt;/p>
&lt;h3 id="consumer-groups-and-competing-consumers-pattern">Consumer groups and competing consumers pattern&lt;/h3>
&lt;p>The burden of dealing with concepts like consumer groups and multiple application instances using a single consumer group is all handled automatically by Dapr. When multiple instances of the same application (running same app-IDs) subscribe to a topic, Dapr delivers each message to &lt;em>only one instance of &lt;strong>that&lt;/strong> application&lt;/em>. This is commonly known as the competing consumers pattern and is illustrated in the diagram below.&lt;/p>
&lt;img src="https://docs.dapr.io/images/pubsub-overview-pattern-competing-consumers.png" width=1000>
&lt;br>&lt;/br>
&lt;p>Similarly, if two different applications (different app-IDs) subscribe to the same topic, Dapr deliver each message to &lt;em>only one instance of &lt;strong>each&lt;/strong> application&lt;/em>.&lt;/p>
&lt;h3 id="topic-scoping">Topic scoping&lt;/h3>
&lt;p>By default, all topics backing the Dapr pub/sub component (e.g. Kafka, Redis Stream, RabbitMQ) are available to every application configured with that component. To limit which application can publish or subscribe to topics, Dapr provides topic scoping. This enables to you say which topics an application is allowed to published and which topics an application is allowed to subscribed to. For more information read &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-scopes/">publish/subscribe topic scoping&lt;/a>.&lt;/p>
&lt;h3 id="message-time-to-live-ttl">Message Time-to-Live (TTL)&lt;/h3>
&lt;p>Dapr can set a timeout message on a per message basis, meaning that if the message is not read from the pub/sub component, then the message is discarded. This is to prevent the build up of messages that are not read. A message that has been in the queue for longer than the configured TTL is said to be dead. For more information read &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl/">publish/subscribe message time-to-live&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>Note: Message TTL can also be set for a given queue at the time of component creation. Look at the specific characteristic of the component that you are using.&lt;/li>
&lt;/ul>
&lt;h3 id="publishsubscribe-api">Publish/Subscribe API&lt;/h3>
&lt;p>The publish/subscribe API is located in the &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">API reference&lt;/a>.&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;ul>
&lt;li>Follow these guides on:
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe/">How-To: Publish a message and subscribe to a topic&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/pubsub-namespaces/">How-To: Configure Pub/Sub components with multiple namespaces&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Try out the &lt;a href="https://github.com/dapr/quickstarts/tree/master/pub-sub">Pub/Sub quickstart sample&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-scopes/">topic scoping&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl/">message time-to-live (TTL)&lt;/a>&lt;/li>
&lt;li>List of &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/">pub/sub components&lt;/a>&lt;/li>
&lt;li>Read the &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">pub/sub API reference&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: How-To: Publish a message and subscribe to a topic</title><link>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Pub/Sub is a common pattern in a distributed system with many services that want to utilize decoupled, asynchronous messaging.
Using Pub/Sub, you can enable scenarios where event consumers are decoupled from event producers.&lt;/p>
&lt;p>Dapr provides an extensible Pub/Sub system with At-Least-Once guarantees, allowing developers to publish and subscribe to topics.
Dapr provides components for pub/sub, that enable operators to use their preferred infrastructure, for example Redis Streams, Kafka, etc.&lt;/p>
&lt;h2 id="content-types">Content Types&lt;/h2>
&lt;p>When publishing a message, it&amp;rsquo;s important to specify the content type of the data being sent.
Unless specified, Dapr will assume &lt;code>text/plain&lt;/code>. When using Dapr&amp;rsquo;s HTTP API, the content type can be set in a &lt;code>Content-Type&lt;/code> header.
gRPC clients and SDKs have a dedicated content type parameter.&lt;/p>
&lt;h2 id="step-1-setup-the-pubsub-component">Step 1: Setup the Pub/Sub component&lt;/h2>
&lt;p>The following example creates applications to publish and subscribe to a topic called &lt;code>deathStarStatus&lt;/code>.&lt;/p>
&lt;img src="https://docs.dapr.io/images/pubsub-publish-subscribe-example.png" width=1000>
&lt;br>&lt;/br>
&lt;p>The first step is to setup the Pub/Sub component:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-0-self-hosted-cli-tab" data-toggle="tab" href="#tabs-0-self-hosted-cli" role="tab"
aria-controls="tabs-0-self-hosted-cli" aria-selected="true">
Self-Hosted (CLI)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-0-kubernetes-tab" data-toggle="tab" href="#tabs-0-kubernetes" role="tab"
aria-controls="tabs-0-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active" id="tabs-0-self-hosted-cli" role="tabpanel" aria-labelled-by="tabs-0-self-hosted-cli-tab">
&lt;br />&lt;p>Redis Streams is installed by default on a local machine when running &lt;code>dapr init&lt;/code>.&lt;/p>
&lt;p>Verify by opening your components file under &lt;code>%UserProfile%\.dapr\components\pubsub.yaml&lt;/code> on Windows or &lt;code>~/.dapr/components/pubsub.yaml&lt;/code> on Linux/MacOS:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">localhost:6379&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can override this file with another Redis instance or another &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/">pubsub component&lt;/a> by creating a &lt;code>components&lt;/code> directory containing the file and using the flag &lt;code>--components-path&lt;/code> with the &lt;code>dapr run&lt;/code> CLI command.&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-0-kubernetes" role="tabpanel" aria-labelled-by="tabs-0-kubernetes-tab">
&lt;br />&lt;p>To deploy this into a Kubernetes cluster, fill in the &lt;code>metadata&lt;/code> connection details of your &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/">desired pubsub component&lt;/a> in the yaml below, save as &lt;code>pubsub.yaml&lt;/code>, and run &lt;code>kubectl apply -f pubsub.yaml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">localhost:6379&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="step-2-subscribe-to-topics">Step 2: Subscribe to topics&lt;/h2>
&lt;p>Dapr allows two methods by which you can subscribe to topics:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Declaratively&lt;/strong>, where subscriptions are are defined in an external file.&lt;/li>
&lt;li>&lt;strong>Programmatically&lt;/strong>, where subscriptions are defined in user code.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Both declarative and programmatic approaches support the same features. The declarative approach removes the Dapr dependency from your code and allows, for example, existing applications to subscribe to topics, without having to change code. The programmatic approach implements the subscription in your code.
&lt;/div>
&lt;h3 id="declarative-subscriptions">Declarative subscriptions&lt;/h3>
&lt;p>You can subscribe to a topic using the following Custom Resources Definition (CRD). Create a file named &lt;code>subscription.yaml&lt;/code> and paste the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Subscription&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myevent-subscription&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">topic&lt;/span>: &lt;span style="color:#ae81ff">deathStarStatus&lt;/span>
&lt;span style="color:#f92672">route&lt;/span>: &lt;span style="color:#ae81ff">/dsstatus&lt;/span>
&lt;span style="color:#f92672">pubsubname&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#ae81ff">app1&lt;/span>
- &lt;span style="color:#ae81ff">app2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The example above shows an event subscription to topic &lt;code>deathStarStatus&lt;/code>, for the pubsub component &lt;code>pubsub&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>The &lt;code>route&lt;/code> field tells Dapr to send all topic messages to the &lt;code>/dsstatus&lt;/code> endpoint in the app.&lt;/li>
&lt;li>The &lt;code>scopes&lt;/code> field enables this subscription for apps with IDs &lt;code>app1&lt;/code> and &lt;code>app2&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Set the component with:
&lt;ul class="nav nav-tabs" id="tabs-2" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-2-self-hosted-cli-tab" data-toggle="tab" href="#tabs-2-self-hosted-cli" role="tab"
aria-controls="tabs-2-self-hosted-cli" aria-selected="true">
Self-Hosted (CLI)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-2-kubernetes-tab" data-toggle="tab" href="#tabs-2-kubernetes" role="tab"
aria-controls="tabs-2-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-2-content">
&lt;div class="tab-pane fade show active" id="tabs-2-self-hosted-cli" role="tabpanel" aria-labelled-by="tabs-2-self-hosted-cli-tab">
&lt;br />&lt;p>Place the CRD in your &lt;code>./components&lt;/code> directory. When Dapr starts up, it loads subscriptions along with components.&lt;/p>
&lt;p>Note: By default, Dapr loads components from &lt;code>$HOME/.dapr/components&lt;/code> on MacOS/Linux and &lt;code>%USERPROFILE%\.dapr\components&lt;/code> on Windows.&lt;/p>
&lt;p>You can also override the default directory by pointing the Dapr CLI to a components path:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id myapp --components-path ./myComponents -- python3 app1.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note: If you place the subscription in a custom components path, make sure the Pub/Sub component is present also.&lt;/em>&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-2-kubernetes" role="tabpanel" aria-labelled-by="tabs-2-kubernetes-tab">
&lt;br />&lt;p>In Kubernetes, save the CRD to a file and apply it to the cluster:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f subscription.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>&lt;/p>
&lt;h4 id="example">Example&lt;/h4>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-3-python-tab" data-toggle="tab" href="#tabs-3-python" role="tab"
aria-controls="tabs-3-python" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-3-node-tab" data-toggle="tab" href="#tabs-3-node" role="tab"
aria-controls="tabs-3-node" aria-selected="false">
Node
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-3-php-tab" data-toggle="tab" href="#tabs-3-php" role="tab"
aria-controls="tabs-3-php" aria-selected="false">
PHP
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">
&lt;div class="tab-pane fade show active" id="tabs-3-python" role="tabpanel" aria-labelled-by="tabs-3-python-tab">
&lt;br />&lt;p>Create a file named &lt;code>app1.py&lt;/code> and paste in the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> flask
&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> request, jsonify
&lt;span style="color:#f92672">from&lt;/span> flask_cors &lt;span style="color:#f92672">import&lt;/span> CORS
&lt;span style="color:#f92672">import&lt;/span> json
&lt;span style="color:#f92672">import&lt;/span> sys
app &lt;span style="color:#f92672">=&lt;/span> flask&lt;span style="color:#f92672">.&lt;/span>Flask(__name__)
CORS(app)
&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ds_subscriber&lt;/span>():
&lt;span style="color:#66d9ef">print&lt;/span>(request&lt;span style="color:#f92672">.&lt;/span>json, flush&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">return&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>dumps({&lt;span style="color:#e6db74">&amp;#39;success&amp;#39;&lt;/span>:True}), &lt;span style="color:#ae81ff">200&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;ContentType&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}
app&lt;span style="color:#f92672">.&lt;/span>run()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating &lt;code>app1.py&lt;/code> ensure flask and flask_cors are installed:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install flask
pip install flask_cors
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app1 --app-port &lt;span style="color:#ae81ff">5000&lt;/span> run python app1.py
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-3-node" role="tabpanel" aria-labelled-by="tabs-3-node-tab">
&lt;br />&lt;p>After setting up the subscription above, download this javascript (Node &amp;gt; 4.16) into a &lt;code>app2.js&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;express&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">bodyParser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;body-parser&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span>()
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#a6e22e">bodyParser&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>({ &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;application/*+json&amp;#39;&lt;/span> }));
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">sendStatus&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>);
});
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">listen&lt;/span>(&lt;span style="color:#a6e22e">port&lt;/span>, () =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`consumer app listening on port &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">!`&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run this app with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app2 --app-port &lt;span style="color:#ae81ff">3000&lt;/span> run node app2.js
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-3-php" role="tabpanel" aria-labelled-by="tabs-3-php-tab">
&lt;br />&lt;p>Create a file named &lt;code>app1.php&lt;/code> and paste in the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(
&lt;span style="color:#75715e">#[\Dapr\Attributes\FromBody]
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">\Dapr\PubSub\CloudEvent&lt;/span> $cloudEvent,
&lt;span style="color:#a6e22e">\Psr\Log\LoggerInterface&lt;/span> $logger
) {
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Received event: {event}&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;event&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $cloudEvent]);
&lt;span style="color:#66d9ef">return&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;SUCCESS&amp;#39;&lt;/span>];
}
);
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating &lt;code>app1.php&lt;/code>, and with the &lt;a href="https://github.com/dapr/php-sdk/blob/main/docs/getting-started.md">SDK installed&lt;/a>,
go ahead and start the app:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app1 --app-port &lt;span style="color:#ae81ff">3000&lt;/span> run -- php -S 0.0.0.0:3000 app1.php
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h3 id="programmatic-subscriptions">Programmatic subscriptions&lt;/h3>
&lt;p>To subscribe to topics, start a web server in the programming language of your choice and listen on the following &lt;code>GET&lt;/code> endpoint: &lt;code>/dapr/subscribe&lt;/code>.
The Dapr instance calls into your app at startup and expect a JSON response for the topic subscriptions with:&lt;/p>
&lt;ul>
&lt;li>&lt;code>pubsubname&lt;/code>: Which pub/sub component Dapr should use.&lt;/li>
&lt;li>&lt;code>topic&lt;/code>: Which topic to subscribe to.&lt;/li>
&lt;li>&lt;code>route&lt;/code>: Which endpoint for Dapr to call on when a message comes to that topic.&lt;/li>
&lt;/ul>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;ul class="nav nav-tabs" id="tabs-4" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-4-python-tab" data-toggle="tab" href="#tabs-4-python" role="tab"
aria-controls="tabs-4-python" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-4-node-tab" data-toggle="tab" href="#tabs-4-node" role="tab"
aria-controls="tabs-4-node" aria-selected="false">
Node
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-4-php-tab" data-toggle="tab" href="#tabs-4-php" role="tab"
aria-controls="tabs-4-php" aria-selected="false">
PHP
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-4-content">
&lt;div class="tab-pane fade show active" id="tabs-4-python" role="tabpanel" aria-labelled-by="tabs-4-python-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> flask
&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> request, jsonify
&lt;span style="color:#f92672">from&lt;/span> flask_cors &lt;span style="color:#f92672">import&lt;/span> CORS
&lt;span style="color:#f92672">import&lt;/span> json
&lt;span style="color:#f92672">import&lt;/span> sys
app &lt;span style="color:#f92672">=&lt;/span> flask&lt;span style="color:#f92672">.&lt;/span>Flask(__name__)
CORS(app)
&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dapr/subscribe&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;GET&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">subscribe&lt;/span>():
subscriptions &lt;span style="color:#f92672">=&lt;/span> [{&lt;span style="color:#e6db74">&amp;#39;pubsubname&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;topic&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;deathStarStatus&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;route&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;dsstatus&amp;#39;&lt;/span>}]
&lt;span style="color:#66d9ef">return&lt;/span> jsonify(subscriptions)
&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ds_subscriber&lt;/span>():
&lt;span style="color:#66d9ef">print&lt;/span>(request&lt;span style="color:#f92672">.&lt;/span>json, flush&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">return&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>dumps({&lt;span style="color:#e6db74">&amp;#39;success&amp;#39;&lt;/span>:True}), &lt;span style="color:#ae81ff">200&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;ContentType&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}
app&lt;span style="color:#f92672">.&lt;/span>run()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating &lt;code>app1.py&lt;/code> ensure flask and flask_cors are installed:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install flask
pip install flask_cors
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app1 --app-port &lt;span style="color:#ae81ff">5000&lt;/span> run python app1.py
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-4-node" role="tabpanel" aria-labelled-by="tabs-4-node-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;express&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">bodyParser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;body-parser&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span>()
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#a6e22e">bodyParser&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>({ &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;application/*+json&amp;#39;&lt;/span> }));
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dapr/subscribe&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>([
{
&lt;span style="color:#a6e22e">pubsubname&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">topic&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;deathStarStatus&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">route&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;dsstatus&amp;#34;&lt;/span>
}
]);
})
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">sendStatus&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>);
});
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">listen&lt;/span>(&lt;span style="color:#a6e22e">port&lt;/span>, () =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`consumer app listening on port &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">!`&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run this app with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app2 --app-port &lt;span style="color:#ae81ff">3000&lt;/span> run node app2.js
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-4-php" role="tabpanel" aria-labelled-by="tabs-4-php-tab">
&lt;br />&lt;p>Update &lt;code>app1.php&lt;/code> with the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">configure&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span>(&lt;span style="color:#a6e22e">\DI\ContainerBuilder&lt;/span> $builder) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $builder&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">addDefinitions&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;dapr.subscriptions&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> [
&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">\Dapr\PubSub\Subscription&lt;/span>(&lt;span style="color:#a6e22e">pubsubname&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">topic&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;deathStarStatus&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">route&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>),
]]));
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(
&lt;span style="color:#75715e">#[\Dapr\Attributes\FromBody]
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">\Dapr\PubSub\CloudEvent&lt;/span> $cloudEvent,
&lt;span style="color:#a6e22e">\Psr\Log\LoggerInterface&lt;/span> $logger
) {
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Received event: {event}&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;event&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $cloudEvent]);
&lt;span style="color:#66d9ef">return&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;SUCCESS&amp;#39;&lt;/span>];
}
);
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run this app with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app1 --app-port &lt;span style="color:#ae81ff">3000&lt;/span> run -- php -S 0.0.0.0:3000 app1.php
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>The &lt;code>/dsstatus&lt;/code> endpoint matches the &lt;code>route&lt;/code> defined in the subscriptions and this is where Dapr will send all topic messages to.&lt;/p>
&lt;h2 id="step-3-publish-a-topic">Step 3: Publish a topic&lt;/h2>
&lt;p>To publish a topic you need to run an instance of a Dapr sidecar to use the pubsub Redis component. You can use the default Redis component installed into your local environment.&lt;/p>
&lt;p>Start an instance of Dapr with an app-id called &lt;code>testpubsub&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id testpubsub --dapr-http-port &lt;span style="color:#ae81ff">3500&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul class="nav nav-tabs" id="tabs-5" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-5-dapr-cli-tab" data-toggle="tab" href="#tabs-5-dapr-cli" role="tab"
aria-controls="tabs-5-dapr-cli" aria-selected="true">
Dapr CLI
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-5-http-api-bash-tab" data-toggle="tab" href="#tabs-5-http-api-bash" role="tab"
aria-controls="tabs-5-http-api-bash" aria-selected="false">
HTTP API (Bash)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-5-http-api-powershell-tab" data-toggle="tab" href="#tabs-5-http-api-powershell" role="tab"
aria-controls="tabs-5-http-api-powershell" aria-selected="false">
HTTP API (PowerShell)
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-5-content">
&lt;div class="tab-pane fade show active" id="tabs-5-dapr-cli" role="tabpanel" aria-labelled-by="tabs-5-dapr-cli-tab">
&lt;br />&lt;p>Then publish a message to the &lt;code>deathStarStatus&lt;/code> topic:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr publish --publish-app-id testpubapp --pubsub pubsub --topic deathStarStatus --data &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;status&amp;#34;: &amp;#34;completed&amp;#34;}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-5-http-api-bash" role="tabpanel" aria-labelled-by="tabs-5-http-api-bash-tab">
&lt;br />&lt;p>Then publish a message to the &lt;code>deathStarStatus&lt;/code> topic:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST http://localhost:3500/v1.0/publish/pubsub/deathStarStatus -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;status&amp;#34;: &amp;#34;completed&amp;#34;}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-5-http-api-powershell" role="tabpanel" aria-labelled-by="tabs-5-http-api-powershell-tab">
&lt;br />&lt;p>Then publish a message to the &lt;code>deathStarStatus&lt;/code> topic:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Post -ContentType &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> -Body &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;status&amp;#34;: &amp;#34;completed&amp;#34;}&amp;#39;&lt;/span> -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/publish/pubsub/deathStarStatus&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>Dapr automatically wraps the user payload in a Cloud Events v1.0 compliant envelope, using &lt;code>Content-Type&lt;/code> header value for &lt;code>datacontenttype&lt;/code> attribute.&lt;/p>
&lt;h2 id="step-4-ack-ing-a-message">Step 4: ACK-ing a message&lt;/h2>
&lt;p>In order to tell Dapr that a message was processed successfully, return a &lt;code>200 OK&lt;/code> response. If Dapr receives any other return status code than &lt;code>200&lt;/code>, or if your app crashes, Dapr will attempt to redeliver the message following At-Least-Once semantics.&lt;/p>
&lt;h4 id="example-2">Example&lt;/h4>
&lt;ul class="nav nav-tabs" id="tabs-6" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-6-python-tab" data-toggle="tab" href="#tabs-6-python" role="tab"
aria-controls="tabs-6-python" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-6-node-tab" data-toggle="tab" href="#tabs-6-node" role="tab"
aria-controls="tabs-6-node" aria-selected="false">
Node
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-6-content">
&lt;div class="tab-pane fade show active" id="tabs-6-python" role="tabpanel" aria-labelled-by="tabs-6-python-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ds_subscriber&lt;/span>():
&lt;span style="color:#66d9ef">print&lt;/span>(request&lt;span style="color:#f92672">.&lt;/span>json, flush&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">return&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>dumps({&lt;span style="color:#e6db74">&amp;#39;success&amp;#39;&lt;/span>:True}), &lt;span style="color:#ae81ff">200&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;ContentType&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-6-node" role="tabpanel" aria-labelled-by="tabs-6-node-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">sendStatus&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="optional-step-5-publishing-a-topic-with-code">(Optional) Step 5: Publishing a topic with code&lt;/h2>
&lt;ul class="nav nav-tabs" id="tabs-7" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-7-node-tab" data-toggle="tab" href="#tabs-7-node" role="tab"
aria-controls="tabs-7-node" aria-selected="true">
Node
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-7-php-tab" data-toggle="tab" href="#tabs-7-php" role="tab"
aria-controls="tabs-7-php" aria-selected="false">
PHP
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-7-content">
&lt;div class="tab-pane fade show active" id="tabs-7-node" role="tabpanel" aria-labelled-by="tabs-7-node-tab">
&lt;br />&lt;p>If you prefer publishing a topic using code, here is an example.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;express&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;path&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">request&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;request&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">bodyParser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;body-parser&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span>();
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#a6e22e">bodyParser&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>());
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">daprPort&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">DAPR_HTTP_PORT&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">3500&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">daprUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`http://localhost:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">daprPort&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/v1.0`&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8080&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">pubsubName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/publish&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Publishing: &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">publishUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">daprUrl&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/publish/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">pubsubName&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/deathStarStatus`&lt;/span>;
&lt;span style="color:#a6e22e">request&lt;/span>( { &lt;span style="color:#a6e22e">uri&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">publishUrl&lt;/span>, &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">json&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span> } );
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">sendStatus&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>);
});
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">listen&lt;/span>(&lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">PORT&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span>, () =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Listening on port &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">!`&lt;/span>));
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-7-php" role="tabpanel" aria-labelled-by="tabs-7-php-tab">
&lt;br />&lt;p>If you prefer publishing a topic using code, here is an example.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">\DI\FactoryInterface&lt;/span> $factory, &lt;span style="color:#a6e22e">\Psr\Log\LoggerInterface&lt;/span> $logger) {
$publisher &lt;span style="color:#f92672">=&lt;/span> $factory&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">\Dapr\PubSub\Publish&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span>]);
$publisher&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">topic&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;deathStarStatus&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">publish&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;operational&amp;#39;&lt;/span>);
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;published!&amp;#39;&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can save this to &lt;code>app2.php&lt;/code> and while &lt;code>app1&lt;/code> is running in another terminal, execute:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app2 run -- php app2.php
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="sending-a-custom-cloudevent">Sending a custom CloudEvent&lt;/h2>
&lt;p>Dapr automatically takes the data sent on the publish request and wraps it in a CloudEvent 1.0 envelope.
If you want to use your own custom CloudEvent, make sure to specify the content type as &lt;code>application/cloudevents+json&lt;/code>.&lt;/p>
&lt;p>See info about content types &lt;a href="#Content-Types">here&lt;/a>.&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;ul>
&lt;li>Try the &lt;a href="https://github.com/dapr/quickstarts/tree/master/pub-sub">Pub/Sub quickstart sample&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-scopes/">topic scoping&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl/">message time-to-live&lt;/a>&lt;/li>
&lt;li>Learn &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/pubsub-namespaces/">how to configure Pub/Sub components with multiple namespaces&lt;/a>&lt;/li>
&lt;li>List of &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/">pub/sub components&lt;/a>&lt;/li>
&lt;li>Read the &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">API reference&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: Scope Pub/Sub topic access</title><link>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-scopes/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://docs.dapr.io/en/operations/components/component-scopes/">Namespaces or component scopes&lt;/a> can be used to limit component access to particular applications. These application scopes added to a component limit only the applications with specific IDs to be able to use the component.&lt;/p>
&lt;p>In addition to this general component scope, the following can be limited for pub/sub components:&lt;/p>
&lt;ul>
&lt;li>Which topics which can be used (published or subscribed)&lt;/li>
&lt;li>Which applications are allowed to publish to specific topics&lt;/li>
&lt;li>Which applications are allowed to subscribe to specific topics&lt;/li>
&lt;/ul>
&lt;p>This is called &lt;strong>pub/sub topic scoping&lt;/strong>.&lt;/p>
&lt;p>Pub/sub scopes are defined for each pub/sub component. You may have a pub/sub component named &lt;code>pubsub&lt;/code> that has one set of scopes, and another &lt;code>pubsub2&lt;/code> with a different set.&lt;/p>
&lt;p>To use this topic scoping three metadata properties can be set for a pub/sub component:&lt;/p>
&lt;ul>
&lt;li>&lt;code>spec.metadata.publishingScopes&lt;/code>
&lt;ul>
&lt;li>A semicolon-separated list of applications &amp;amp; comma-separated topic lists, allowing that app to publish to that list of topics&lt;/li>
&lt;li>If nothing is specified in &lt;code>publishingScopes&lt;/code> (default behavior), all apps can publish to all topics&lt;/li>
&lt;li>To deny an app the ability to publish to any topic, leave the topics list blank (&lt;code>app1=;app2=topic2&lt;/code>)&lt;/li>
&lt;li>For example, &lt;code>app1=topic1;app2=topic2,topic3;app3=&lt;/code> will allow app1 to publish to topic1 and nothing else, app2 to publish to topic2 and topic3 only, and app3 to publish to nothing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>spec.metadata.subscriptionScopes&lt;/code>
&lt;ul>
&lt;li>A semicolon-separated list of applications &amp;amp; comma-separated topic lists, allowing that app to subscribe to that list of topics&lt;/li>
&lt;li>If nothing is specified in &lt;code>subscriptionScopes&lt;/code> (default behavior), all apps can subscribe to all topics&lt;/li>
&lt;li>For example, &lt;code>app1=topic1;app2=topic2,topic3&lt;/code> will allow app1 to subscribe to topic1 only and app2 to subscribe to topic2 and topic3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>spec.metadata.allowedTopics&lt;/code>
&lt;ul>
&lt;li>A comma-separated list of allowed topics for all applications.&lt;/li>
&lt;li>If &lt;code>allowedTopics&lt;/code> is not set (default behavior), all topics are valid. &lt;code>subscriptionScopes&lt;/code> and &lt;code>publishingScopes&lt;/code> still take place if present.&lt;/li>
&lt;li>&lt;code>publishingScopes&lt;/code> or &lt;code>subscriptionScopes&lt;/code> can be used in conjuction with &lt;code>allowedTopics&lt;/code> to add granular limitations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>These metadata properties can be used for all pub/sub components. The following examples use Redis as pub/sub component.&lt;/p>
&lt;h2 id="example-1-scope-topic-access">Example 1: Scope topic access&lt;/h2>
&lt;p>Limiting which applications can publish/subscribe to topics can be useful if you have topics which contain sensitive information and only a subset of your applications are allowed to publish or subscribe to these.&lt;/p>
&lt;p>It can also be used for all topics to have always a &amp;ldquo;ground truth&amp;rdquo; for which applications are using which topics as publishers/subscribers.&lt;/p>
&lt;p>Here is an example of three applications and three topics:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:6379&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">publishingScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app1=topic1;app2=topic2,topic3;app3=&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">subscriptionScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app2=;app3=topic1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The table below shows which applications are allowed to publish into the topics:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>topic1&lt;/th>
&lt;th>topic2&lt;/th>
&lt;th>topic3&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The table below shows which applications are allowed to subscribe to the topics:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>topic1&lt;/th>
&lt;th>topic2&lt;/th>
&lt;th>topic3&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Note: If an application is not listed (e.g. app1 in subscriptionScopes) it is allowed to subscribe to all topics. Because &lt;code>allowedTopics&lt;/code> is not used and app1 does not have any subscription scopes, it can also use additional topics not listed above.&lt;/p>
&lt;/blockquote>
&lt;h2 id="example-2-limit-allowed-topics">Example 2: Limit allowed topics&lt;/h2>
&lt;p>A topic is created if a Dapr application sends a message to it. In some scenarios this topic creation should be governed. For example:&lt;/p>
&lt;ul>
&lt;li>A bug in a Dapr application on generating the topic name can lead to an unlimited amount of topics created&lt;/li>
&lt;li>Streamline the topics names and total count and prevent an unlimited growth of topics&lt;/li>
&lt;/ul>
&lt;p>In these situations &lt;code>allowedTopics&lt;/code> can be used.&lt;/p>
&lt;p>Here is an example of three allowed topics:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:6379&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">allowedTopics&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;topic1,topic2,topic3&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All applications can use these topics, but only those topics, no others are allowed.&lt;/p>
&lt;h2 id="example-3-combine-allowedtopics-and-scopes">Example 3: Combine &lt;code>allowedTopics&lt;/code> and scopes&lt;/h2>
&lt;p>Sometimes you want to combine both scopes, thus only having a fixed set of allowed topics and specify scoping to certain applications.&lt;/p>
&lt;p>Here is an example of three applications and two topics:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:6379&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">allowedTopics&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;A,B&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">publishingScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app1=A&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">subscriptionScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app1=;app2=A&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: The third application is not listed, because if an app is not specified inside the scopes, it is allowed to use all topics.&lt;/p>
&lt;/blockquote>
&lt;p>The table below shows which application is allowed to publish into the topics:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The table below shows which application is allowed to subscribe to the topics:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="demo">Demo&lt;/h2>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7VdWBBGcbHQ?start=513" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;h2 id="related-links">Related links&lt;/h2>
&lt;ul>
&lt;li>Learn &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/pubsub-namespaces/">how to configure Pub/Sub components with multiple namespaces&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl/">message time-to-live&lt;/a>&lt;/li>
&lt;li>List of &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/">pub/sub components&lt;/a>&lt;/li>
&lt;li>Read the &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">API reference&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: Message Time-to-Live (TTL)</title><link>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Dapr enables per-message time-to-live (TTL). This means that applications can set time-to-live per message, and subscribers do not receive those messages after expiration.&lt;/p>
&lt;p>All Dapr &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/">pub/sub components&lt;/a> are compatible with message TTL, as Dapr handles the TTL logic within the runtime. Simply set the &lt;code>ttlInSeconds&lt;/code> metadata when publishing a message.&lt;/p>
&lt;p>In some components, such as Kafka, time-to-live can be configured in the topic via &lt;code>retention.ms&lt;/code> as per &lt;a href="https://kafka.apache.org/documentation/#topicconfigs_retention.ms">documentation&lt;/a>. With message TTL in Dapr, applications using Kafka can now set time-to-live per message in addition to per topic.&lt;/p>
&lt;h2 id="native-message-ttl-support">Native message TTL support&lt;/h2>
&lt;p>When message time-to-live has native support in the pub/sub component, Dapr simply forwards the time-to-live configuration without adding any extra logic, keeping predictable behavior. This is helpful when the expired messages are handled differently by the component. For example, with Azure Service Bus, where expired messages are stored in the dead letter queue and are not simply deleted.&lt;/p>
&lt;h3 id="supported-components">Supported components&lt;/h3>
&lt;h4 id="azure-service-bus">Azure Service Bus&lt;/h4>
&lt;p>Azure Service Bus supports &lt;a href="(https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-expiration)">entity level time-to-live&lt;/a>. This means that messages have a default time-to-live but can also be set with a shorter timespan at publishing time. Dapr propagates the time-to-live metadata for the message and lets Azure Service Bus handle the expiration directly.&lt;/p>
&lt;h2 id="non-dapr-subscribers">Non-Dapr subscribers&lt;/h2>
&lt;p>If messages are consumed by subscribers not using Dapr, the expired messages are not automatically dropped, as expiration is handled by the Dapr runtime when a Dapr sidecar receives a message. However, subscribers can programmatically drop expired messages by adding logic to handle the &lt;code>expiration&lt;/code> attribute in the cloud event, which follows the &lt;a href="https://tools.ietf.org/html/rfc3339">RFC3339&lt;/a> format.&lt;/p>
&lt;p>When non-Dapr subscribers use components such as Azure Service Bus, which natively handle message TTL, they do not receive expired messages. Here, no extra logic is needed.&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>Message TTL can be set in the metadata as part of the publishing request:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-1-curl-tab" data-toggle="tab" href="#tabs-1-curl" role="tab"
aria-controls="tabs-1-curl" aria-selected="true">
curl
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-python-sdk-tab" data-toggle="tab" href="#tabs-1-python-sdk" role="tab"
aria-controls="tabs-1-python-sdk" aria-selected="false">
Python SDK
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-php-sdk-tab" data-toggle="tab" href="#tabs-1-php-sdk" role="tab"
aria-controls="tabs-1-php-sdk" aria-selected="false">
PHP SDK
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active" id="tabs-1-curl" role="tabpanel" aria-labelled-by="tabs-1-curl-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X &lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span> http://localhost:3500/v1.0/publish/pubsub/TOPIC_A?metadata.ttlInSeconds&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">120&lt;/span> -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;order-number&amp;#34;: &amp;#34;345&amp;#34;}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-python-sdk" role="tabpanel" aria-labelled-by="tabs-1-python-sdk-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> dapr.clients &lt;span style="color:#f92672">import&lt;/span> DaprClient
&lt;span style="color:#66d9ef">with&lt;/span> DaprClient() &lt;span style="color:#66d9ef">as&lt;/span> d:
req_data &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#e6db74">&amp;#39;order-number&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;345&amp;#39;&lt;/span>
}
&lt;span style="color:#75715e"># Create a typed message with content type and body&lt;/span>
resp &lt;span style="color:#f92672">=&lt;/span> d&lt;span style="color:#f92672">.&lt;/span>publish_event(
pubsub_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span>,
topic&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;TOPIC_A&amp;#39;&lt;/span>,
data&lt;span style="color:#f92672">=&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>dumps(req_data),
metadata&lt;span style="color:#f92672">=&lt;/span>(
(&lt;span style="color:#e6db74">&amp;#39;ttlInSeconds&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;120&amp;#39;&lt;/span>)
)
)
&lt;span style="color:#75715e"># Print the request&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span>(req_data, flush&lt;span style="color:#f92672">=&lt;/span>True)
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-php-sdk" role="tabpanel" aria-labelled-by="tabs-1-php-sdk-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">\DI\FactoryInterface&lt;/span> $factory) {
$publisher &lt;span style="color:#f92672">=&lt;/span> $factory&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">\Dapr\PubSub\Publish&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span>]);
$publisher&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">topic&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;TOPIC_A&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">publish&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;ttlInSeconds&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;120&amp;#39;&lt;/span>]);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>See &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">this guide&lt;/a> for a reference on the pub/sub API.&lt;/p>
&lt;h2 id="related-links">Related links&lt;/h2>
&lt;ul>
&lt;li>Learn about &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/pubsub-scopes/">topic scoping&lt;/a>&lt;/li>
&lt;li>Learn &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/pubsub-namespaces/">how to configure Pub/Sub components with multiple namespaces&lt;/a>&lt;/li>
&lt;li>List of &lt;a href="https://docs.dapr.io/en/operations/components/setup-pubsub/supported-pubsub/">pub/sub components&lt;/a>&lt;/li>
&lt;li>Read the &lt;a href="https://docs.dapr.io/en/reference/api/pubsub_api/">API reference&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>