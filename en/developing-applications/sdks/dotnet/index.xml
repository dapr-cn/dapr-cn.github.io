<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr Docs â€“ Dapr .NET SDK</title><link>https://docs.dapr.io/en/developing-applications/sdks/dotnet/</link><description>Recent content in Dapr .NET SDK on Dapr Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/en/developing-applications/sdks/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Getting started with the Dapr client .NET SDK</title><link>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-client/</guid><description>
&lt;p>The Dapr client package allows you to interact with other Dapr applications from a .NET application.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/en/getting-started/install-dapr-cli/">Dapr CLI&lt;/a> installed&lt;/li>
&lt;li>Initialized &lt;a href="https://docs.dapr.io/en/getting-started/install-dapr-selfhost/">Dapr environment&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dotnet.microsoft.com/download">.NET Core 3.1 or .NET 5+&lt;/a> installed&lt;/li>
&lt;/ul>
&lt;h2 id="building-blocks">Building blocks&lt;/h2>
&lt;p>The .NET SDK allows you to interface with all of the &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/">Dapr building blocks&lt;/a>.&lt;/p>
&lt;h3 id="invoke-a-service">Invoke a service&lt;/h3>
&lt;p>You can either use the &lt;code>DaprClient&lt;/code> or &lt;code>System.Net.Http.HttpClient&lt;/code> to invoke your services.&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-3-sdk-tab" data-toggle="tab" href="#tabs-3-sdk" role="tab"
aria-controls="tabs-3-sdk" aria-selected="true">
SDK
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-3-http-tab" data-toggle="tab" href="#tabs-3-http" role="tab"
aria-controls="tabs-3-http" aria-selected="false">
HTTP
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">
&lt;div class="tab-pane fade show active" id="tabs-3-sdk" role="tabpanel" aria-labelled-by="tabs-3-sdk-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> var client = &lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder().Build();
&lt;span style="color:#75715e">// Invokes a POST method named &amp;#34;deposit&amp;#34; that takes input of type &amp;#34;Transaction&amp;#34;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> data = &lt;span style="color:#66d9ef">new&lt;/span> { id = &lt;span style="color:#e6db74">&amp;#34;17&amp;#34;&lt;/span>, amount = &lt;span style="color:#ae81ff">99&lt;/span>m };
&lt;span style="color:#66d9ef">var&lt;/span> account = &lt;span style="color:#66d9ef">await&lt;/span> client.InvokeMethodAsync&amp;lt;&lt;span style="color:#66d9ef">object&lt;/span>, Account&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;routing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>, data, cancellationToken);
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Returned: id:{0} | Balance:{1}&amp;#34;&lt;/span>, account.Id, account.Balance);
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-3-http" role="tabpanel" aria-labelled-by="tabs-3-http-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> client = DaprClient.CreateInvokeHttpClient(appId: &lt;span style="color:#e6db74">&amp;#34;routing&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> deposit = &lt;span style="color:#66d9ef">new&lt;/span> Transaction { Id = &lt;span style="color:#e6db74">&amp;#34;17&amp;#34;&lt;/span>, Amount = &lt;span style="color:#ae81ff">99&lt;/span>m };
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> client.PostAsJsonAsync(&lt;span style="color:#e6db74">&amp;#34;/deposit&amp;#34;&lt;/span>, deposit, cancellationToken);
&lt;span style="color:#66d9ef">var&lt;/span> account = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadFromJsonAsync&amp;lt;Account&amp;gt;(cancellationToken: cancellationToken);
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Returned: id:{0} | Balance:{1}&amp;#34;&lt;/span>, account.Id, account.Balance);
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>For a full guide on service invocation visit &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services/">How-To: Invoke a service&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="save--get-application-state">Save &amp;amp; get application state&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder().Build();
&lt;span style="color:#66d9ef">var&lt;/span> state = &lt;span style="color:#66d9ef">new&lt;/span> Widget() { Size = &lt;span style="color:#e6db74">&amp;#34;small&amp;#34;&lt;/span>, Color = &lt;span style="color:#e6db74">&amp;#34;yellow&amp;#34;&lt;/span>, };
&lt;span style="color:#66d9ef">await&lt;/span> client.SaveStateAsync(storeName, stateKeyName, state, cancellationToken: cancellationToken);
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Saved State!&amp;#34;&lt;/span>);
state = &lt;span style="color:#66d9ef">await&lt;/span> client.GetStateAsync&amp;lt;Widget&amp;gt;(storeName, stateKeyName, cancellationToken: cancellationToken);
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Got State: {state.Size} {state.Color}&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">await&lt;/span> client.DeleteStateAsync(storeName, stateKeyName, cancellationToken: cancellationToken);
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Deleted State!&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>For a full list of state operations visit &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/state-management/howto-get-save-state/">How-To: Get &amp;amp; save state&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="publish-messages">Publish messages&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder().Build();
&lt;span style="color:#66d9ef">var&lt;/span> eventData = &lt;span style="color:#66d9ef">new&lt;/span> { Id = &lt;span style="color:#e6db74">&amp;#34;17&amp;#34;&lt;/span>, Amount = &lt;span style="color:#ae81ff">10&lt;/span>m, };
&lt;span style="color:#66d9ef">await&lt;/span> client.PublishEventAsync(pubsubName, &lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>, eventData, cancellationToken);
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Published deposit event!&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>For a full list of state operations visit &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe/">How-To: Publish &amp;amp; subscribe&lt;/a>.&lt;/li>
&lt;li>Visit &lt;a href="https://github.com/dapr/dotnet-sdk/tree/master/examples/client/PublishSubscribe">.NET SDK examples&lt;/a> for code samples and instructions to try out pub/sub&lt;/li>
&lt;/ul>
&lt;h3 id="interact-with-output-bindings">Interact with output bindings&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> var client = &lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder().Build();
&lt;span style="color:#75715e">// Example payload for the Twilio SendGrid binding
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> email = &lt;span style="color:#66d9ef">new&lt;/span>
{
metadata = &lt;span style="color:#66d9ef">new&lt;/span>
{
emailTo = &lt;span style="color:#e6db74">&amp;#34;customer@example.com&amp;#34;&lt;/span>,
subject = &lt;span style="color:#e6db74">&amp;#34;An email from Dapr SendGrid binding&amp;#34;&lt;/span>,
},
data = &lt;span style="color:#e6db74">&amp;#34;&amp;lt;h1&amp;gt;Testing Dapr Bindings&amp;lt;/h1&amp;gt;This is a test.&amp;lt;br&amp;gt;Bye!&amp;#34;&lt;/span>,
};
&lt;span style="color:#66d9ef">await&lt;/span> client.InvokeBindingAsync(&lt;span style="color:#e6db74">&amp;#34;send-email&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;create&amp;#34;&lt;/span>, email);
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>For a full guide on output bindings visit &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/bindings/howto-bindings/">How-To: Use bindings&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="retrieve-secrets">Retrieve secrets&lt;/h3>
&lt;ul class="nav nav-tabs" id="tabs-8" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-8-multi-value-secret-tab" data-toggle="tab" href="#tabs-8-multi-value-secret" role="tab"
aria-controls="tabs-8-multi-value-secret" aria-selected="true">
Multi-value-secret
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-8-single-value-secret-tab" data-toggle="tab" href="#tabs-8-single-value-secret" role="tab"
aria-controls="tabs-8-single-value-secret" aria-selected="false">
Single-value-secret
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-8-content">
&lt;div class="tab-pane fade show active" id="tabs-8-multi-value-secret" role="tabpanel" aria-labelled-by="tabs-8-multi-value-secret-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder().Build();
&lt;span style="color:#75715e">// Retrieve a key-value-pair-based secret - returns a Dictionary&amp;lt;string, string&amp;gt;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> secrets = &lt;span style="color:#66d9ef">await&lt;/span> client.GetSecretAsync(&lt;span style="color:#e6db74">&amp;#34;mysecretstore&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;key-value-pair-secret&amp;#34;&lt;/span>);
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Got secret keys: {string.Join(&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;, secrets.Keys)}&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-8-single-value-secret" role="tabpanel" aria-labelled-by="tabs-8-single-value-secret-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder().Build();
&lt;span style="color:#75715e">// Retrieve a key-value-pair-based secret - returns a Dictionary&amp;lt;string, string&amp;gt;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> secrets = &lt;span style="color:#66d9ef">await&lt;/span> client.GetSecretAsync(&lt;span style="color:#e6db74">&amp;#34;mysecretstore&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;key-value-pair-secret&amp;#34;&lt;/span>);
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Got secret keys: {string.Join(&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;, secrets.Keys)}&amp;#34;&lt;/span>);
&lt;span style="color:#75715e">// Retrieve a single-valued secret - returns a Dictionary&amp;lt;string, string&amp;gt;
&lt;/span>&lt;span style="color:#75715e">// containing a single value with the secret name as the key
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> data = &lt;span style="color:#66d9ef">await&lt;/span> client.GetSecretAsync(&lt;span style="color:#e6db74">&amp;#34;mysecretstore&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;single-value-secret&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span> = data[&lt;span style="color:#e6db74">&amp;#34;single-value-secret&amp;#34;&lt;/span>]
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Got a secret value, I&amp;#39;m not going to be print it, it&amp;#39;s a secret!&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>For a full guide on secrets visit &lt;a href="https://docs.dapr.io/en/developing-applications/building-blocks/secrets/howto-secrets/">How-To: Retrieve secrets&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="related-links">Related links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dapr/dotnet-sdk/tree/master/examples">.NET SDK examples&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: Create servers with the Dapr .NET SDK</title><link>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-server/</guid><description/></item><item><title>Developing-Applications: Getting started with the Dapr actors .NET SDK</title><link>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-actors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-actors/</guid><description>
&lt;p>The Dapr actor package allows you to interact with Dapr virtual actors from a .NET application.&lt;/p>
&lt;p>See &lt;a href="https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-actors/dotnet-actors-howto/">How to use Dapr actors&lt;/a> for getting started instructions.&lt;/p></description></item><item><title>Developing-Applications: Developing applications with the Dapr .NET SDK</title><link>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-development/</guid><description>
&lt;h2 id="thinking-more-than-one-at-a-time">Thinking more than one at a time&lt;/h2>
&lt;p>Using your favorite IDE or editor to launch an application typically assumes that you only need to run one thing - the application you are debugging. However, developing microservices challenges you think about your local development process for &lt;em>more than one at a time&lt;/em>. A microservices application has multiple services that you might need running at the same time as well as dependencies like state stores to manage.&lt;/p>
&lt;p>Adding Dapr to your development process means you need to manage the following concerns:&lt;/p>
&lt;ul>
&lt;li>Each service you want to run&lt;/li>
&lt;li>A Dapr sidecar for each service&lt;/li>
&lt;li>Dapr component and configuration manifests&lt;/li>
&lt;li>Additional dependencies such as state stores&lt;/li>
&lt;li>optional: the Dapr placement service for actors&lt;/li>
&lt;/ul>
&lt;p>This document will assume that you&amp;rsquo;re building a production application, and want to create a repeatable and robust set of development practices. The guidance here is general, and applies to any .NET server application using Dapr (including actors).&lt;/p>
&lt;h2 id="managing-components">Managing components&lt;/h2>
&lt;p>You have two primary methods of storing component definitions for local development with Dapr:&lt;/p>
&lt;ul>
&lt;li>Use the default location (&lt;code>~/.dapr/components&lt;/code>)&lt;/li>
&lt;li>Use your own location&lt;/li>
&lt;/ul>
&lt;p>Creating a folder within your source code repository to store components and configuration will give you a way to version and share these definitions. The guidance provided here will assume you created a folder next to the application source code to store these files.&lt;/p>
&lt;h2 id="development-options">Development options&lt;/h2>
&lt;p>Choose one of these links to learn about tools you can use in local development scenarios. These articles are ordered from lowest investment to highest investment. You may want to read them all to get an overview of your options.&lt;/p></description></item><item><title>Developing-Applications: How to troubleshoot and debug with the Dapr .NET SDK</title><link>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/en/developing-applications/sdks/dotnet/dotnet-troubleshooting/</guid><description/></item></channel></rss>