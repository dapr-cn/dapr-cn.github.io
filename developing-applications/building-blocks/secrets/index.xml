<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – Secrets building block</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/</link><description>Recent content in Secrets building block on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Secrets stores overview</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/secrets-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/secrets-overview/</guid><description>
&lt;p>It&amp;rsquo;s common for applications to store sensitive information such as connection strings, keys and tokens that are used to authenticate with databases, services and external systems in secrets by using a dedicated secret store.&lt;/p>
&lt;p>Usually this involves setting up a secret store such as Azure Key Vault, Hashicorp Vault and others and storing the application level secrets there. To access these secret stores, the application needs to import the secret store SDK, and use it to access the secrets. This may require a fair amount of boilerplate code that is not related to the actual business domain of the app, and so becomes an even greater challenge in multi-cloud scenarios where different vendor specific secret stores may be used.&lt;/p>
&lt;p>To make it easier for developers everywhere to consume application secrets, Dapr has a dedicated secrets building block API that allows developers to get secrets from a secret store.&lt;/p>
&lt;p>Using Dapr&amp;rsquo;s secret store building block typically involves the following:&lt;/p>
&lt;ol>
&lt;li>Setting up a component for a specific secret store solution.&lt;/li>
&lt;li>Retrieving secrets using the Dapr secrets API in the application code.&lt;/li>
&lt;li>Optionally, referencing secrets in Dapr component files.&lt;/li>
&lt;/ol>
&lt;h2 id="setting-up-a-secret-store">Setting up a secret store&lt;/h2>
&lt;p>See &lt;a href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/howto-secrets/">Setup secret stores&lt;/a> for guidance on how to setup a secret store with Dapr.&lt;/p>
&lt;h2 id="using-secrets-in-your-application">Using secrets in your application&lt;/h2>
&lt;p>Application code can call the secrets building block API to retrieve secrets from Dapr supported secret stores that can be used in your code. Watch this &lt;a href="https://www.youtube.com/watch?v=OtbYCBt9C34&amp;amp;t=1818">video&lt;/a> for an example of how the secrets API can be used in your application.&lt;/p>
&lt;p>For example, the diagram below shows an application requesting the secret called &amp;ldquo;mysecret&amp;rdquo; from a secret store called &amp;ldquo;vault&amp;rdquo; from a configured cloud secret store.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/secrets-overview-cloud-stores.png" width=600>
&lt;p>Applications can use the secrets API to access secrets from a Kubernetes secret store. In the example below, the application retrieves the same secret &amp;ldquo;mysecret&amp;rdquo; from a Kubernetes secret store.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/secrets-overview-kubernetes-store.png" width=600>
&lt;p>In Azure Dapr can be configured to use Managed Identities to authenticate with Azure Key Vault in order to retrieve secrets. In the example below, an Azure Kubernetes Service (AKS) cluster is configured to use managed identities. Then Dapr uses &lt;a href="https://docs.microsoft.com/en-us/azure/aks/operator-best-practices-identity#use-pod-identities">pod identities&lt;/a> to retrieve secrets from Azure Key Vault on behalf of the application.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/secrets-overview-azure-aks-keyvault.png" width=600>
&lt;p>Notice that in all of the examples above the application code did not have to change to get the same secret. Dapr did all the heavy lifting here via the secrets building block API and using the secret components.&lt;/p>
&lt;p>See &lt;a href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/howto-secrets/">Access Application Secrets using the Secrets API&lt;/a> for a How To guide to use secrets in your application.&lt;/p>
&lt;p>For detailed API information read &lt;a href="https://dapr-cn.github.io/docs/reference/api/secrets_api/">Secrets API&lt;/a>.&lt;/p>
&lt;h2 id="referencing-secret-stores-in-dapr-components">Referencing secret stores in Dapr components&lt;/h2>
&lt;p>When configuring Dapr components such as state stores it is often required to include credentials in components files. Instead of doing that, you can place the credentials within a Dapr supported secret store and reference the secret within the Dapr component. This is preferred approach and is a recommended best practice especially in production environments.&lt;/p>
&lt;p>For more information read &lt;a href="https://dapr-cn.github.io/docs/operations/components/component-secrets/">referencing secret stores in components&lt;/a>&lt;/p>
&lt;h2 id="limiting-access-to-secrets">Limiting access to secrets&lt;/h2>
&lt;p>To provide more granular control on access to secrets, Dapr provides the ability to define scopes and restricting access permissions. Learn more about &lt;a href="%7B%7BX%1A15X%7D%7D">using secret scoping&lt;/a>&lt;/p></description></item><item><title>Developing-Applications: How To: Retrieve a secret</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/howto-secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/howto-secrets/</guid><description>
&lt;p>This article provides guidance on using Dapr&amp;rsquo;s secrets API in your code to leverage the &lt;a href="%7B%7BX%1A29X%7D%7D">secrets store building block&lt;/a>. The secrets API allows you to easily retrieve secrets in your application code from a configured secret store.&lt;/p>
&lt;h2 id="set-up-a-secret-store">Set up a secret store&lt;/h2>
&lt;p>Before retrieving secrets in your application&amp;rsquo;s code, you must have a secret store component configured. For the purposes of this guide, as an example you will configure a local secret store which uses a local JSON file to store secrets.&lt;/p>
&lt;blockquote>
&lt;p>Note: The component used in this example is not secured and is not recommended for production deployments. You can find other alternatives &lt;a href="%7B%7BX%1A26X%7D%7D">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Create a file named &lt;code>secrets.json&lt;/code> with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;my-secret&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m Batman&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a directory for your components file named &lt;code>components&lt;/code> and inside it create a file named &lt;code>localSecretStore.yaml&lt;/code> with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-secrets-store&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">secretstores.local.file&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">secretsFile&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;PATH TO SECRETS FILE&amp;gt;/secrets.json&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nestedSeparator&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make sure to replace &lt;code>&amp;lt;PATH TO SECRETS FILE&amp;gt;&lt;/code> with the path to the JSON file you just created.&lt;/p>
&lt;p>To configure a different kind of secret store see the guidance on &lt;a href="%7B%7BX%1A39X%7D%7D">how to configure a secret store&lt;/a> and review &lt;a href="%7B%7BX%1A40X%7D%7D">supported secret stores&lt;/a> to see specific details required for different secret store solutions.&lt;/p>
&lt;h2 id="get-a-secret">Get a secret&lt;/h2>
&lt;p>Now run the Dapr sidecar (with no application)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id my-app --port &lt;span style="color:#ae81ff">3500&lt;/span> --components-path ./components
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now you can get the secret by calling the Dapr sidecar using the secrets API:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl http://localhost:3500/v1.0/secrets/my-secrets-store/my-secret
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a full API reference, go &lt;a href="https://dapr-cn.github.io/docs/reference/api/secrets_api/">here&lt;/a>.&lt;/p>
&lt;h2 id="calling-the-secrets-api-from-your-code">Calling the secrets API from your code&lt;/h2>
&lt;p>Once you have a secret store set up, you can call Dapr to get the secrets from your application code. Here are a few examples in different programming languages:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-1-go-tab" data-toggle="tab" href="#tabs-1-go" role="tab"
aria-controls="tabs-1-go" aria-selected="true">
Go
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-javascript-tab" data-toggle="tab" href="#tabs-1-javascript" role="tab"
aria-controls="tabs-1-javascript" aria-selected="false">
Javascript
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-python-tab" data-toggle="tab" href="#tabs-1-python" role="tab"
aria-controls="tabs-1-python" aria-selected="false">
Python
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-rust-tab" data-toggle="tab" href="#tabs-1-rust" role="tab"
aria-controls="tabs-1-rust" aria-selected="false">
Rust
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-c-tab" data-toggle="tab" href="#tabs-1-c" role="tab"
aria-controls="tabs-1-c" aria-selected="false">
C#
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active" id="tabs-1-go" role="tabpanel" aria-labelled-by="tabs-1-go-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Go" data-lang="Go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/secrets/my-secrets-store/my-secret&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
panic(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(string(&lt;span style="color:#a6e22e">body&lt;/span>))
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-javascript" role="tabpanel" aria-labelled-by="tabs-1-javascript-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;isomorphic-fetch&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">secretsUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`http://localhost:3500/v1.0/secrets`&lt;/span>;
&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">secretsUrl&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/my-secrets-store/my-secret`&lt;/span>)
.&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">response&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">ok&lt;/span>) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Could not get secret&amp;#34;&lt;/span>;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>();
}).&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">secret&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-python" role="tabpanel" aria-labelled-by="tabs-1-python-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests &lt;span style="color:#f92672">as&lt;/span> req
resp &lt;span style="color:#f92672">=&lt;/span> req&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/secrets/my-secrets-store/my-secret&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(resp&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-rust" role="tabpanel" aria-labelled-by="tabs-1-rust-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">#![deny(warnings)]&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> std::{thread};
&lt;span style="color:#75715e">#[tokio::main]&lt;/span>
&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>(), reqwest::Error&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> res &lt;span style="color:#f92672">=&lt;/span> reqwest::get(&lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/secrets/my-secrets-store/my-secret&amp;#34;&lt;/span>).&lt;span style="color:#66d9ef">await&lt;/span>&lt;span style="color:#f92672">?&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> body &lt;span style="color:#f92672">=&lt;/span> res.text().&lt;span style="color:#66d9ef">await&lt;/span>&lt;span style="color:#f92672">?&lt;/span>;
println&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Secret:{}&amp;#34;&lt;/span>, body);
thread::park();
Ok(())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-c" role="tabpanel" aria-labelled-by="tabs-1-c-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> HttpClient();
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(&lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/secrets/my-secrets-store/my-secret&amp;#34;&lt;/span>);
response.EnsureSuccessStatusCode();
&lt;span style="color:#66d9ef">string&lt;/span> secret = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsStringAsync();
Console.WriteLine(secret);
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="related-links">Related links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="%7B%7BX%1A14X%7D%7D">Dapr secrets overview&lt;/a>&lt;/li>
&lt;li>&lt;a href="%7B%7BX%1A16X%7D%7D">Secrets API reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="%7B%7BX%1A18X%7D%7D">Configure a secret store&lt;/a>&lt;/li>
&lt;li>&lt;a href="%7B%7BX%1A20X%7D%7D">Supported secrets&lt;/a>&lt;/li>
&lt;li>&lt;a href="%7B%7BX%1A22X%7D%7D">Using secrets in components&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dapr/quickstarts/tree/master/secretstore">Secret stores quickstart&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: How To: Use secret scoping</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/secrets-scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/secrets/secrets-scopes/</guid><description>
&lt;p>Follow &lt;a href="https://dapr-cn.github.io/docs/operations/components/setup-secret-store/">these instructions&lt;/a> to configure secret store for an application. Once configured, any secret defined within that store will be accessible from the Dapr application.&lt;/p>
&lt;p>To limit the secrets to which the Dapr application has access, users can define secret scopes by augmenting existing configuration CRD with restrictive permissions.&lt;/p>
&lt;p>Follow &lt;a href="https://dapr-cn.github.io/docs/concepts/configuration-concept/">these instructions&lt;/a> to define a configuration CRD.&lt;/p>
&lt;h2 id="scenario-1--deny-access-to-all-secrets-for-a-secret-store">Scenario 1 : Deny access to all secrets for a secret store&lt;/h2>
&lt;p>In Kubernetes cluster, the native Kubernetes secret store is added to Dapr application by default. In some scenarios it may be necessary to deny access to Dapr secrets for a given application. To add this configuration follow the steps below:&lt;/p>
&lt;p>Define the following &lt;code>appconfig.yaml&lt;/code> and apply it to the Kubernetes cluster using the command &lt;code>kubectl apply -f appconfig.yaml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">kubernetes&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For applications that need to be denied access to the Kubernetes secret store, follow &lt;a href="https://dapr-cn.github.io/docs/operations/hosting/kubernetes/kubernetes-overview/">these instructions&lt;/a>, and add the following annotation to the application pod.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this defined, the application no longer has access to Kubernetes secret store.&lt;/p>
&lt;h2 id="scenario-2--allow-access-to-only-certain-secrets-in-a-secret-store">Scenario 2 : Allow access to only certain secrets in a secret store&lt;/h2>
&lt;p>To allow a Dapr application to have access to only certain secrets, define the following &lt;code>config.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">vault&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">deny&lt;/span>
&lt;span style="color:#f92672">allowedSecrets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;secret1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secret2&amp;#34;&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This example defines configuration for secret store named vault. The default access to the secret store is &lt;code>deny&lt;/code>, whereas some secrets are accessible by the application based on the &lt;code>allowedSecrets&lt;/code> list. Follow &lt;a href="https://dapr-cn.github.io/docs/concepts/configuration-concept/">these instructions&lt;/a> to apply configuration to the sidecar.&lt;/p>
&lt;h2 id="scenario-3-deny-access-to-certain-senstive-secrets-in-a-secret-store">Scenario 3: Deny access to certain senstive secrets in a secret store&lt;/h2>
&lt;p>Define the following &lt;code>config.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">secrets&lt;/span>:
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#f92672">storeName&lt;/span>: &lt;span style="color:#ae81ff">vault&lt;/span>
&lt;span style="color:#f92672">defaultAccess&lt;/span>: &lt;span style="color:#ae81ff">allow&lt;/span> &lt;span style="color:#75715e"># this is the default value, line can be omitted&lt;/span>
&lt;span style="color:#f92672">deniedSecrets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;secret1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secret2&amp;#34;&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above configuration explicitly denies access to &lt;code>secret1&lt;/code> and &lt;code>secret2&lt;/code> from the secret store named vault while allowing access to all other secrets. Follow &lt;a href="https://dapr-cn.github.io/docs/concepts/configuration-concept/">these instructions&lt;/a> to apply configuration to the sidecar.&lt;/p>
&lt;h2 id="permission-priority">Permission priority&lt;/h2>
&lt;p>The &lt;code>allowedSecrets&lt;/code> and &lt;code>deniedSecrets&lt;/code> list values take priorty over the &lt;code>defaultAccess&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Scenarios&lt;/th>
&lt;th>defaultAccess&lt;/th>
&lt;th>allowedSecrets&lt;/th>
&lt;th>deniedSecrets&lt;/th>
&lt;th>permission&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - Only default access&lt;/td>
&lt;td>deny/allow&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>deny/allow&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - Default deny with allowed list&lt;/td>
&lt;td>deny&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; can be accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - Default allow with deneied list&lt;/td>
&lt;td>allow&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; cannot be accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - Default allow with allowed list&lt;/td>
&lt;td>allow&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; can be accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - Default deny with denied list&lt;/td>
&lt;td>deny&lt;/td>
&lt;td>empty&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>deny&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6 - Default deny/allow with both lists&lt;/td>
&lt;td>deny/allow&lt;/td>
&lt;td>[&amp;ldquo;s1&amp;rdquo;]&lt;/td>
&lt;td>[&amp;ldquo;s2&amp;rdquo;]&lt;/td>
&lt;td>only &amp;ldquo;s1&amp;rdquo; can be accessed&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>