<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – 服务调用</title><link>https://docs.dapr.io/developing-applications/building-blocks/service-invocation/</link><description>Recent content in 服务调用 on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: 服务调用概述</title><link>https://docs.dapr.io/developing-applications/building-blocks/service-invocation/service-invocation-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/service-invocation/service-invocation-overview/</guid><description>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>通过服务调用，应用程序可以使用 &lt;a href="https://grpc.io">gRPC&lt;/a> 或 &lt;a href="https://www.w3.org/Protocols/">HTTP&lt;/a> 这样的标准协议来发现并可靠地与其他应用程序通信。&lt;/p>
&lt;p>在许多具有多个需要相互通信的服务的环境中，开发者经常会问自己以下问题：&lt;/p>
&lt;ul>
&lt;li>我如何发现和调用不同服务上的方法？&lt;/li>
&lt;li>我如何安全地调用其他服务？&lt;/li>
&lt;li>我如何处理重试和瞬态错误？&lt;/li>
&lt;li>我如何使用分布式跟踪来查看调用图来诊断生产中的问题？&lt;/li>
&lt;/ul>
&lt;p>Dapr 通过提供服务调用 API 来应对这些问题，这种调用 API 作为反向代理与内置的服务发现相结合， 同时利用内置分布式跟踪、计量、错误处理、加密等功能。&lt;/p>
&lt;p>Dapr 采用边车（Sidecar）、去中心化的架构。 要使用 Dapr 来调用应用程序，请在任意 Dapr 实例上使用 &lt;code>invoke&lt;/code> 这个API。 Sidecar 编程模型鼓励每个应用程序与自己的 Dapr 实例对话。 Dapr 实例会相互发现并进行通信。&lt;/p>
&lt;h3 id="调用逻辑">调用逻辑&lt;/h3>
&lt;p>下图是 Dapr的服务调用如何工作的总览图&lt;/p>
&lt;img src="https://docs.dapr.io/images/service-invocation-overview.png" width=800 alt="显示服务调用步骤的图表">
&lt;ol>
&lt;li>
&lt;p>服务 A 对服务 B 发起HTTP/gRPC的调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dapr 使用在给定 &lt;a href="https://docs.dapr.io/operations/hosting/"> 托管平台&lt;/a> 上运行的 &lt;a href="https://github.com/dapr/components-contrib/tree/master/nameresolution">命名解析组件&lt;/a> 发现服务 B的位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dapr 将消息转发至服务 B的 Dapr 边车&lt;/p>
&lt;p>&lt;strong>注&lt;/strong>: Dapr 边车之间的所有调用考虑到性能都优先使用 gRPC。 仅服务与 Dapr 边车之间的调用可以是 HTTP 或 gRPC&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务 B的 Dapr 边车将请求转发至服务 B 上的特定端点 (或方法) 。 服务 B 随后运行其业务逻辑代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务 B 发送响应给服务 A。 响应将转至服务 B 的边车。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dapr 将消息转发至服务 A 的 Dapr 边车。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务 A 接收响应。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="特性">特性&lt;/h2>
&lt;p>服务调用提供了一系列特性，使您可以方便地调用远程应用程序上的方法。&lt;/p>
&lt;h3 id="命名空间作用域">命名空间作用域&lt;/h3>
&lt;p>服务调用支持跨命名空间调用。 在所有受支持的托管平台上， Dapr 应用程序标识（ID）遵循包含了目标命名空间的有效 FQDN 格式。&lt;/p>
&lt;p>例如，以下字符串包含应用程序标识 &lt;code>nodeapp&lt;/code> 以及应用程序在 &lt;code>production&lt;/code> 中运行的名称空间。&lt;/p>
&lt;pre>&lt;code>localhost:3500/v1.0/invoke/nodeapp.production/method/neworder
&lt;/code>&lt;/pre>&lt;p>这在 Kubernetes 集群中进行跨命名空间调用特别有用。 观看此演示视频以获取有关如何使用具有命名空间的服务调用。 &lt;iframe width="560" height="315" src="https://www.bilibili.com/video/BV14z4y167te?p=2&amp;t=497" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen mark="crwd-mark">&lt;/iframe>&lt;/p>
&lt;h3 id="服务间安全性">服务间安全性&lt;/h3>
&lt;p>Dapr 应用程序之间的所有调用都可以通过托管平台上的相互(mTLS) 身份验证来安全，包括通过 Dapr 哨兵服务来自动证书翻转（certificate rollover）。 下面的图表显示了自托管的应用程序。&lt;/p>
&lt;p>更多信息查看 &lt;a href="https://docs.dapr.io/concepts/security-concept/#sidecar-to-sidecar-communication">服务间安全&lt;/a>。&lt;/p>
&lt;h3 id="重试">重试&lt;/h3>
&lt;p>应用程序可以控制哪些其他应用程序允许调用它们，以及通过访问策略授权它们做什么。 这使您能够限制敏感应用，也就是说有人员信息的应用被未经授权的应用访问。 与服务间安全通信相结合，提供软多租户部署。&lt;/p>
&lt;p>更多信息参考 &lt;a href="https://docs.dapr.io/operations/configuration/invoke-allowlist/">服务调用的访问控制允许列表&lt;/a>。&lt;/p>
&lt;h4 id="服务调用安全示例">服务调用安全示例&lt;/h4>
&lt;p>下图是 Kubernetes 集群上的一个部署示例，使用 Dapr 化的&lt;code>Ingress&lt;/code>服务，该服务调用&lt;code>Service A&lt;/code>，使用mTLS加密服务调用，并应用访问控制策略。 &lt;code>Service A&lt;/code> 接下来调用 &lt;code>Service B&lt;/code> 并也使用服务调用和 mTLS。 每个服务都在不同的名称空间中运行，以增加隔离。&lt;/p>
&lt;img src="https://docs.dapr.io/images/service-invocation-security.png" width=800>
&lt;h3 id="重试-1">重试&lt;/h3>
&lt;p>在发生调用失败和瞬态错误的情况下，服务调用会在回退（backoff）时间段内执行自动重试。&lt;/p>
&lt;p>导致重试的错误有：&lt;/p>
&lt;ul>
&lt;li>网络错误，包括端点不可用和拒绝连接&lt;/li>
&lt;li>因续订主调/被调方Dapr边车上的证书而导致的身份验证错误&lt;/li>
&lt;/ul>
&lt;p>每次调用重试的回退间隔是 1 秒，最多重试三次。 通过 gRPC 连接目标 sidecar 的超时时间为5秒。&lt;/p>
&lt;h3 id="可插拔的服务发现">可插拔的服务发现&lt;/h3>
&lt;p>Dapr 可以运行在任何&lt;a href="https://docs.dapr.io/operations/hosting/">托管平台&lt;/a>。 对于支持的托管平台，这意味着他们有一个能够发现服务的 &lt;a href="https://github.com/dapr/components-contrib/tree/master/nameresolution">名称解析组件&lt;/a>。 例如，Kubernetes 名称解析组件使用 Kubernetes DNS 服务来解析在集群中运行的其他应用程序的位置。 对于本地和多个物理机器，这将使用 mDNS 协议。&lt;/p>
&lt;h3 id="使用-mdns-轮询负载均衡">使用 mDNS 轮询负载均衡&lt;/h3>
&lt;p>Dapr 使用 mDNS 协议提供轮询负载均衡的服务调用请求，例如用于本地或多个联网的物理机器。&lt;/p>
&lt;p>下面的图表显示了如何运作的一个例子。 如果您有一个应用程序实例，其中包含 app ID 为 &lt;code>FrontEnd&lt;/code> 和 3 个 app ID 为 &lt;code>Cart&lt;/code> 的应用程序实例，并且您从 &lt;code>FrontEnd&lt;/code> 应用程序到 &lt;code>Cart&lt;/code> 应用程序的3个实例之间的进行轮询。 这些实例可以在同一机器上或不同的机器上。 .&lt;/p>
&lt;img src="https://docs.dapr.io/images/service-invocation-mdns-round-robin.png" width=800 alt="显示服务调用步骤的图表">
&lt;p>注意：您可以有 N 个相同app ID的实例，对于每个应用程序来说 app ID 都是唯一的。 而且您可以有多个此应用程序的实例，其中所有这些实例都有相同的 app ID。&lt;/p>
&lt;h3 id="具有可观测性的追踪和指标">具有可观测性的追踪和指标&lt;/h3>
&lt;p>默认情况下，所有应用程序之间的调用都会被追踪，也会收集到度量（metrics），以便为应用程序提供洞察力（insights）和诊断。 这在生产场景中尤其重要。 这给您的服务之间的调用提供了调用链图和度量（metrics）。 更多信息参考 &lt;a href="https://docs.dapr.io/concepts/observability-concept/">观测性&lt;/a>。&lt;/p>
&lt;h3 id="服务调用-api">服务调用 API&lt;/h3>
&lt;p>服务调用的 API 规范可在 &lt;a href="https://docs.dapr.io/reference/api/service_invocation_api/">规范仓库&lt;/a> 中找到。&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>按照上述调用顺序，假定您有 &lt;a href="https://github.com/dapr/quickstarts/blob/master/hello-world/README.md">Hello World 快速入门&lt;/a>中描述的应用程序，在 python 应用程序调用一个 node.js 应用的地方。 这种情况下，python应用将是“service A”，Node.js应用将是“service B”。&lt;/p>
&lt;p>下面的图表展示本地机器上 API 调用的顺序 1-7：&lt;/p>
&lt;img src="https://docs.dapr.io/images/service-invocation-overview-example.png" width=800>
&lt;ol>
&lt;li>Node.js 应用程序有一个 app ID 为 &lt;code>nodeapp&lt;/code> 的 Dapr 应用程序。 当 python 应用程序通过 POST &lt;code>http://localhost:3500/v1.0/invoke/nodeapp/method/neworder&lt;/code> 调用 Node.js 应用程序的 &lt;code>neworder&lt;/code> 方法时, 首先会到达 python app 的本地 dapr sidecar。&lt;/li>
&lt;li>Dapr 使用本地机器运行的名称解析组件(在这种情况下自动运行的 mDNS)，发现 Node.js 应用的位置。&lt;/li>
&lt;li>Dapr 使用刚刚收到的位置将请求转发到 Node.js 应用的 sidecar。&lt;/li>
&lt;li>Node.js 应用的 sidecar 将请求转发到 Node.js 应用程序。 Node.js 应用执行其业务逻辑，记录收到的消息，然后将订单 ID 存储到 Redis (未在图表中显示)中&lt;/li>
&lt;li>Node.js应 用程序通过 Node.js sidecar 向 Python 应用程序发送一个响应。&lt;/li>
&lt;li>Dapr 转发响应到 Python 的 Dapr sidecar&lt;/li>
&lt;li>Python 应用程序收到响应。&lt;/li>
&lt;/ol>
&lt;h2 id="下一步">下一步&lt;/h2>
&lt;ul>
&lt;li>关注以下指南：
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services/">入门指南：发现并调用服务&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/operations/configuration/grpc/">指南：配置 Dapr 来使用 gRPC&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>试试 &lt;a href="https://github.com/dapr/quickstarts/blob/master/hello-world/README.md">hello World 快速入门&lt;/a> ，它会显示如何使用 HTTP 服务调用或试试 &lt;a href="https://docs.dapr.io/developing-applications/sdks/">Dapr SDK&lt;/a> 中的 Sample。&lt;/li>
&lt;li>阅读 &lt;a href="https://docs.dapr.io/reference/api/service_invocation_api/">服务调用 API 规范&lt;/a>&lt;/li>
&lt;li>了解 &lt;a href="https://docs.dapr.io/operations/performance-and-scalability/perf-service-invocation/">服务调用性能&lt;/a> 数字&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: 入门指南：发现并调用服务</title><link>https://docs.dapr.io/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services/</guid><description>
&lt;p>本文介绍如何使用唯一的应用程序 ID 部署每个服务，以便其他服务可以使用服务调用 API 发现和调用这些终结点。&lt;/p>
&lt;h2 id="步骤-1-为服务选择标识">步骤 1: 为服务选择标识&lt;/h2>
&lt;p>Dapr 允许您为您的应用分配一个全局唯一ID。 此 ID 为您的应用程序封装了状态，不管它可能有多少实例。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-0-self-hosted-cli-tab" data-toggle="tab" href="#tabs-0-self-hosted-cli" role="tab"
aria-controls="tabs-0-self-hosted-cli" aria-selected="true">
Self-Hosted (CLI)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-0-kubernetes-tab" data-toggle="tab" href="#tabs-0-kubernetes" role="tab"
aria-controls="tabs-0-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active" id="tabs-0-self-hosted-cli" role="tabpanel" aria-labelled-by="tabs-0-self-hosted-cli-tab">
&lt;br />&lt;p>在自托管方式下，设置 &lt;code>--app-id&lt;/code> 标记:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id cart --app-port &lt;span style="color:#ae81ff">5000&lt;/span> python app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果您的应用使用 SSL 连接，您可以告诉Dapr 在不安全的 SSL 连接中调用您的应用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id cart --app-port &lt;span style="color:#ae81ff">5000&lt;/span> --app-ssl python app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-0-kubernetes" role="tabpanel" aria-labelled-by="tabs-0-kubernetes-tab">
&lt;br />&lt;h3 id="使用-kubernetes-设置标识">使用 Kubernetes 设置标识&lt;/h3>
&lt;p>在 Kubernetes 中，在您的pod 上设置 &lt;code>dapr.io/app-id&lt;/code> 注解：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">python-app&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python-app&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python-app&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python-app&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cart&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5000&amp;#34;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>如果应用程序使用 SSL 连接，那么可以使用 &lt;code>app-ssl: &amp;quot;true&amp;quot;&lt;/code> 注解 (完整列表 &lt;a href="https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-annotations/">此处&lt;/a>) 告知 Dapr 在不安全的 SSL 连接上调用应用程序。&lt;/em>&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="步骤-2-设置服务">步骤 2: 设置服务&lt;/h2>
&lt;p>以下是购物车应用的 Python 示例。 它可以用任何编程语言编写。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> Flask
app &lt;span style="color:#f92672">=&lt;/span> Flask(__name__)
&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/add&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>():
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Added!&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
app&lt;span style="color:#f92672">.&lt;/span>run()
&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
app&lt;span style="color:#f92672">.&lt;/span>run()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此 Python 应用程序通过 &lt;code>/add()&lt;/code> 端点暴露了一个 &lt;code>add()&lt;/code> 方法。&lt;/p>
&lt;h2 id="步骤-3-调用服务">步骤 3: 调用服务&lt;/h2>
&lt;p>Dapr 采用边车（sidecar）、去中心化的架构。 要使用 Dapr 调用应用程序，您可以在任意 Dapr 实例中使用 &lt;code>调用&lt;/code> API。&lt;/p>
&lt;p>sidecar 编程模型鼓励每个应用程序与自己的 Dapr 实例对话。 Dapr 实例会相互发现并进行通信。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-1-curl-tab" data-toggle="tab" href="#tabs-1-curl" role="tab"
aria-controls="tabs-1-curl" aria-selected="true">
curl
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-1-cli-tab" data-toggle="tab" href="#tabs-1-cli" role="tab"
aria-controls="tabs-1-cli" aria-selected="false">
CLI
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active" id="tabs-1-curl" role="tabpanel" aria-labelled-by="tabs-1-curl-tab">
&lt;br />&lt;p>从一个终端或命令提示运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl http://localhost:3500/v1.0/invoke/cart/method/add -X POST
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 add 端点是一个“POST”方法，我们在 curl 命令中使用了 &lt;code>-X POST&lt;/code>。&lt;/p>
&lt;p>要调用 &amp;ldquo;GET&amp;rdquo; 端点:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl http://localhost:3500/v1.0/invoke/cart/method/add
&lt;/code>&lt;/pre>&lt;/div>&lt;p>要调用 &amp;ldquo;DELETE&amp;rdquo; 端点:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl http://localhost:3500/v1.0/invoke/cart/method/add -X DELETE
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dapr 将调用的服务返回的任何有效负载放在 HTTP 响应的消息体中。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-1-cli" role="tabpanel" aria-labelled-by="tabs-1-cli-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr invoke --app-id cart --method add
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h3 id="命名空间">命名空间&lt;/h3>
&lt;p>当运行于&lt;a href="https://docs.dapr.io/reference/api/service_invocation_api/#namespace-supported-platforms">支持命名空间&lt;/a>的平台时，在您的 app ID 中包含命名空间：&lt;code>myApp.production&lt;/code>&lt;/p>
&lt;p>例如，调用包含名称空间的示例 python 服务:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl http://localhost:3500/v1.0/invoke/cart.production/method/add -X POST
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看更多有关名称空间的内容，请参阅[跨命名空间 API 规范](https://docs.dapr.io/reference/api/service_invocation_api/#cross-namespace-invocation)。&lt;/p>
&lt;h2 id="步骤-4-查看跟踪和日志">步骤 4: 查看跟踪和日志&lt;/h2>
&lt;p>上面的示例显示了如何直接调用本地或 Kubernetes 中运行的其他服务。 Dapr 输出指标、跟踪和日志记录信息，允许您可视化服务之间的调用图、日志错误和可选地记录有效负载正文。&lt;/p>
&lt;p>有关跟踪和日志的更多信息，请参阅 &lt;a href="https://docs.dapr.io/concepts/observability-concept/">可观察性&lt;/a> 篇文章。&lt;/p>
&lt;p>相关链接&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/service-invocation-overview/">服务调用概述&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/api/service_invocation_api/">服务调用 API 规范&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>