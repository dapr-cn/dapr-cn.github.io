<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – 状态管理</title><link>https://docs.dapr.io/developing-applications/building-blocks/state-management/</link><description>Recent content in 状态管理 on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/building-blocks/state-management/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: 状态管理概览</title><link>https://docs.dapr.io/developing-applications/building-blocks/state-management/state-management-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/state-management/state-management-overview/</guid><description>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>通过状态管理构件，你的应用程序可以将数据存储为 &lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">支持的状态存储引擎&lt;/a>中的键/值对。&lt;/p>
&lt;p>当使用状态管理时，你的应用程序可以利用一些自己构建会很复杂，容易出错的功能，比如:&lt;/p>
&lt;ul>
&lt;li>分布式并发和数据一致性&lt;/li>
&lt;li>批量&lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD&lt;/a> 操作&lt;/li>
&lt;/ul>
&lt;p>你的应用程序可以使用Dapr的状态管理API，使用状态存储组件保存和读取键/值对，如下图所示。 例如，通过使用HTTP POST可以保存键/值对，通过使用HTTP GET可以读取一个键并返回它的值。&lt;/p>
&lt;img src="https://docs.dapr.io/images/state-management-overview.png" width=900>
&lt;h2 id="特性">特性&lt;/h2>
&lt;h3 id="可插拔状态存储">可插拔状态存储&lt;/h3>
&lt;p>Dapr数据存储被建模为组件，可以在不修改你的服务代码的情况下进行替换。 请访问 &lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">支持的状态存储引擎&lt;/a>页面查看完整列表。&lt;/p>
&lt;h3 id="可配置的状态存储行为">可配置的状态存储行为&lt;/h3>
&lt;p>Dapr允许开发人员在对于状态的操作请求中附加额外的元数据，这些元数据用以描述期望如何处理该请求。 你可以附加以下：&lt;/p>
&lt;ul>
&lt;li>并发要求&lt;/li>
&lt;li>一致性要求&lt;/li>
&lt;/ul>
&lt;p>默认情况下，您的应用程序应该假设数据存储是&lt;strong>最终一致&lt;/strong>的，并使用&lt;strong>last-write-wins&lt;/strong>并发模式。&lt;/p>
&lt;p>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">并非所有的存储引擎都一样&lt;/a>。 为了保证应用程序的可移植性，你可以了解下存储引擎的功能，使你的代码适应不同的存储引擎。&lt;/p>
&lt;h3 id="并发concurrency">并发（Concurrency）&lt;/h3>
&lt;p>Dapr支持使用ETags的乐观并发控制（OCC）。 当一个发送请求操作状态时，Dapr会给返回的状态附加一个ETag属性。 当用户代码试图更新或删除一个状态时，它应该通过更新的请求体或删除的&lt;code>If-Match&lt;/code>头附加ETag。 只有当提供的ETag与状态存储中的ETag匹配时，写操作才能成功。&lt;/p>
&lt;p>Dapr之所以选择OCC，是因为在不少应用中，数据更新冲突都是很少的，因为客户端是按业务上下文自然分割的，可以对不同的数据进行操作。 然而，如果你的应用选择使用ETags，请求可能会因为不匹配的ETags而被拒绝。 建议你在使用ETags时，使用重试策略来补偿这种冲突。&lt;/p>
&lt;p>如果您的应用程序在书面请求中省略了ETags，Dapr会在处理请求时跳过ETags校验。 这与ETags的&lt;strong>last-write-wins&lt;/strong>模式相比，基本上可以实现&lt;strong>first-write-wins&lt;/strong>模式。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note on ETags&lt;/h4>
对于原生不支持ETags的存储引擎，要求相应的Dapr状态存储实现能够模拟ETags，并在处理状态时遵循Dapr状态管理API规范。 由于Dapr状态存储实现在技术上是底层数据存储引擎的客户端，所以这种模拟应该直接使用存储引擎提供的并发控制机制。
&lt;/div>
&lt;p>阅读&lt;a href="https://docs.dapr.io/reference/api/state_api/">API参考&lt;/a>，了解如何设置并发选项。&lt;/p>
&lt;h3 id="一致性">一致性&lt;/h3>
&lt;p>Dapr同时支持&lt;strong>强一致性&lt;/strong>和&lt;strong>最终一致性&lt;/strong>，其中最终一致性为默认行为。&lt;/p>
&lt;p>当使用强一致性时，Dapr会等待所有副本（或指定的quorums）确认后才会确认写入请求。 当最终使用一致性时，Dapr 将在基本数据存储接受写入请求后立即返回，即使这是单个副本。&lt;/p>
&lt;p>阅读&lt;a href="https://docs.dapr.io/reference/api/state_api/">API参考&lt;/a>，了解如何设置一致性选项。&lt;/p>
&lt;h3 id="批量操作">批量操作&lt;/h3>
&lt;p>Dapr 支持两种类型的批量操作 - &lt;strong>bulk&lt;/strong> 或 &lt;strong>multi&lt;/strong>。 您可以将几个相同类型的请求分组成批量(或批次)。 Dapr将请求作为单个请求批量提交给基础数据存储。 换句话说，批量（bulk）操作不是事务性的。 另一方面，您可以将不同类型的请求分组为多操作，作为原子事务处理。&lt;/p>
&lt;p>阅读 &lt;a href="https://docs.dapr.io/reference/api/state_api/">API 参考&lt;/a> 以了解如何使用批量（bulk）选项和批次（multi）选项。&lt;/p>
&lt;h3 id="actor-状态">Actor 状态&lt;/h3>
&lt;p>事务性状态存储可用于存储 Actor 状态。 指定 Actor 要使用哪个状态存储， 在状态存储组件的元数据部分中指定属性 &lt;code>actorStateStore&lt;/code> as &lt;code>true&lt;/code> Actor 状态与事务状态库中的具体计划一起储存，这样可以进行一致的查询。 Actor 状态与事务状态库中的具体计划一起储存，这样可以进行一致的查询。 阅读 &lt;a href="https://docs.dapr.io/reference/api/state_api/">API 参考&lt;/a> 以了解更多关于 Actor 中的状态存储 和 &lt;a href="https://docs.dapr.io/reference/api/actors_api/">Actor API 参考&lt;/a>&lt;/p>
&lt;h3 id="直接查询状态存储">直接查询状态存储&lt;/h3>
&lt;p>Dapr保存和检索状态值，而不进行任何转换。 您可以直接从 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/query-state-store/">基础状态存储&lt;/a> 中查询并聚合状态。&lt;/p>
&lt;p>例如，要在 Redis 中获取与 app ID“myApp”相关的所有状态 key，可以使用:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">KEYS &lt;span style="color:#e6db74">&amp;#34;myApp*&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查询-actor-状态">查询 Actor 状态&lt;/h4>
&lt;p>如果数据存储支持 SQL 查询，您可以使用 SQL 查询 Actor 的状态。 例如使用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> StateTable &lt;span style="color:#66d9ef">WHERE&lt;/span> Id&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;app-id&amp;gt;||&amp;lt;actor-type&amp;gt;||&amp;lt;actor-id&amp;gt;||&amp;lt;key&amp;gt;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>您还可以跨 Actor 实例执行聚合查询，避免 Actor 框架常见的基于回合的并发性限制。 例如，要计算所有温度计Actor的平均温度，使用:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">AVG&lt;/span>(value) &lt;span style="color:#66d9ef">FROM&lt;/span> StateTable &lt;span style="color:#66d9ef">WHERE&lt;/span> Id &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;app-id&amp;gt;||&amp;lt;thermometer&amp;gt;||*||temperature&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note on direct queries&lt;/h4>
对状态存储的直接查询不受 Dapr 并发控制，毕竟您没有通过 Dapr 运行时调用。 您看到的是提交数据的快照，对于跨多个 Actor 的只读查询是可以接受的，当然写操作应该通过 Dapr 状态管理或 Actor api 来执行。
&lt;/div>
&lt;h3 id="状态管理-api">状态管理 API&lt;/h3>
&lt;p>状态管理API可以在 &lt;a href="https://docs.dapr.io/reference/api/state_api/">状态管理 API 参考&lt;/a> 中找到。它描述了如何根据 key 来查询、保存和删除状态。&lt;/p>
&lt;h2 id="下一步">下一步&lt;/h2>
&lt;ul>
&lt;li>遵循这些指南：
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-get-save-state/">指南：如何保存和获取状态&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-stateful-service/">指南：如何创建一个有状态的服务&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-share-state/">指南：如何在应用程序之间共享状态&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>试试 &lt;a href="https://github.com/dapr/quickstarts/blob/master/hello-world/README.md">hello world 快速入门&lt;/a> ，它会显示如何使用状态管理或试试 &lt;a href="https://docs.dapr.io/developing-applications/sdks/">Dapr SDK&lt;/a> 中的 Sample。&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">状态存储组件&lt;/a> 列表&lt;/li>
&lt;li>阅读 &lt;a href="https://docs.dapr.io/reference/api/state_api/">状态管理 API 引用&lt;/a>&lt;/li>
&lt;li>阅读 &lt;a href="https://docs.dapr.io/reference/api/actors_api/">Actor API 引用&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: 指南：如何保存和获取状态</title><link>https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-get-save-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-get-save-state/</guid><description>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>状态管理是任何应用程序最常见的需求之一：无论是新是旧，是单体还是微服务。 与不同的数据库库打交道，进行测试，处理重试和故障是很费时费力的。&lt;/p>
&lt;p>Dapr提供的状态管理功能包括一致性和并发选项。 在本指南中，我们将从基础知识开始。使用键/值状态API来允许应用程序保存，获取和删除状态。&lt;/p>
&lt;h2 id="前提">前提&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/getting-started/install-dapr-cli/">Dapr CLI&lt;/a>&lt;/li>
&lt;li>初始化的 &lt;a href="https://docs.dapr.io/getting-started/install-dapr-selfhost/">Dapr 环境&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="第一步设置状态存储">第一步：设置状态存储&lt;/h2>
&lt;p>状态存储组件代表Dapr用来与数据库进行通信的资源。&lt;/p>
&lt;p>在本指南中，我们将使用 Redis 作为状态存储引擎，但在 &lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">支持列表&lt;/a>中的任何状态存储引擎都是可以使用的。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-3-self-hosted-cli-tab" data-toggle="tab" href="#tabs-3-self-hosted-cli" role="tab"
aria-controls="tabs-3-self-hosted-cli" aria-selected="true">
Self-Hosted (CLI)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-3-kubernetes-tab" data-toggle="tab" href="#tabs-3-kubernetes" role="tab"
aria-controls="tabs-3-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">
&lt;div class="tab-pane fade show active" id="tabs-3-self-hosted-cli" role="tabpanel" aria-labelled-by="tabs-3-self-hosted-cli-tab">
&lt;br />&lt;p>当在单机模式下使用&lt;code>dapr init&lt;/code>时，Dapr CLI会自动提供一个状态存储(Redis)，并在&lt;code>components&lt;/code>目录中创建相关的YAML，在Linux/MacOS上位于&lt;code>$HOME/.dapr/components&lt;/code>，在Windows上位于&lt;code>%USERPROFILE%/.dapr/components&lt;/code>。&lt;/p>
&lt;p>如果需要切换使用的状态存储引擎，用你选择的文件替换&lt;code>/components&lt;/code>下的YAML文件&lt;code>statestore.yaml&lt;/code>。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-3-kubernetes" role="tabpanel" aria-labelled-by="tabs-3-kubernetes-tab">
&lt;br />&lt;p>要将其部署到 Kubernetes 集群中，请在下面的 yaml 中填写你的&lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">所需statestore 组件&lt;/a> 的 &lt;code>metadata&lt;/code> 连接详情，保存为 &lt;code>statestore.yaml&lt;/code>，并执行命令 &lt;code>kubectl apply -f statestore.yaml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">localhost:6379&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请参阅 &lt;a href="https://docs.dapr.io/operations/components/setup-state-store/">这里&lt;/a>的说明，了解如何在 Kubernetes 上设置不同的状态存储引擎。&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="第二步保存和检索单个状态">第二步：保存和检索单个状态&lt;/h2>
&lt;p>下面的例子显示了如何使用Dapr状态构件的单个键/值对。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
设置一个app-id是很重要的，因为状态键是以这个值为前缀的。 如果你不设置，就会在运行期间为你自动生成一个值，而到下次运行命令时又会生成一个新的值，你将因此无法再访问以前保存的状态。
&lt;/div>
&lt;ul class="nav nav-tabs" id="tabs-5" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-5-http-api-bash-tab" data-toggle="tab" href="#tabs-5-http-api-bash" role="tab"
aria-controls="tabs-5-http-api-bash" aria-selected="true">
HTTP API (Bash)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-5-http-api-powershell-tab" data-toggle="tab" href="#tabs-5-http-api-powershell" role="tab"
aria-controls="tabs-5-http-api-powershell" aria-selected="false">
HTTP API (PowerShell)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-5-python-sdk-tab" data-toggle="tab" href="#tabs-5-python-sdk" role="tab"
aria-controls="tabs-5-python-sdk" aria-selected="false">
Python SDK
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-5-php-sdk-tab" data-toggle="tab" href="#tabs-5-php-sdk" role="tab"
aria-controls="tabs-5-php-sdk" aria-selected="false">
PHP SDK
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-5-content">
&lt;div class="tab-pane fade show active" id="tabs-5-http-api-bash" role="tabpanel" aria-labelled-by="tabs-5-http-api-bash-tab">
&lt;br />&lt;p>首先启动一个Dapr sidecar：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id myapp --dapr-http-port &lt;span style="color:#ae81ff">3500&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在一个单独的终端中保存一个键/值对到你的statestore中：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;[{ &amp;#34;key&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;value1&amp;#34;}]&amp;#39;&lt;/span> http://localhost:3500/v1.0/state/statestore
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在获取你刚才保存的状态：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl http://localhost:3500/v1.0/state/statestore/key1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你也可以重启你的sidecar，然后再次尝试检索状态，看看存储的状态是否与应用状态保持一致。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-5-http-api-powershell" role="tabpanel" aria-labelled-by="tabs-5-http-api-powershell-tab">
&lt;br />&lt;p>首先启动Dapr sidecar:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp --port &lt;span style="color:#ae81ff">3500&lt;/span> run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在一个单独的终端中保存一个键/值对到你的statestore中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Post -ContentType &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> -Body &lt;span style="color:#e6db74">&amp;#39;[{&amp;#34;key&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;value1&amp;#34;}]&amp;#39;&lt;/span> -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在获取你刚才保存的状态：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore/key1&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你也可以重启你的sidecar，然后再次尝试检索状态，看看存储的状态是否与应用状态保持一致。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-5-python-sdk" role="tabpanel" aria-labelled-by="tabs-5-python-sdk-tab">
&lt;br />&lt;p>将以下内容保存到名为&lt;code>pythonState.py&lt;/code>的文件中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> dapr.clients &lt;span style="color:#f92672">import&lt;/span> DaprClient
&lt;span style="color:#66d9ef">with&lt;/span> DaprClient() &lt;span style="color:#66d9ef">as&lt;/span> d:
d&lt;span style="color:#f92672">.&lt;/span>save_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myFirstKey&amp;#34;&lt;/span>, value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myFirstValue&amp;#34;&lt;/span> )
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;State has been stored&amp;#34;&lt;/span>)
data &lt;span style="color:#f92672">=&lt;/span> d&lt;span style="color:#f92672">.&lt;/span>get_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myFirstKey&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>data
&lt;span style="color:#66d9ef">print&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;Got value: {data}&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后执行以下命令启动Dapr sidecar并运行Python应用程序:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp run python pythonState.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你应该会得到一个类似于下面的输出，它将同时显示Dapr和应用程序的日志:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">== DAPR == time=&amp;#34;2021-01-06T21:34:33.7970377-08:00&amp;#34; level=info msg=&amp;#34;starting Dapr Runtime -- version 0.11.3 -- commit a1a8e11&amp;#34; app_id=Braidbald-Boot scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:34:33.8040378-08:00&amp;#34; level=info msg=&amp;#34;standalone mode configured&amp;#34; app_id=Braidbald-Boot scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:34:33.8040378-08:00&amp;#34; level=info msg=&amp;#34;app id: Braidbald-Boot&amp;#34; app_id=Braidbald-Boot scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:34:33.9750400-08:00&amp;#34; level=info msg=&amp;#34;component loaded. name: statestore, type: state.redis&amp;#34; app_id=Braidbald-Boot scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:34:33.9760387-08:00&amp;#34; level=info msg=&amp;#34;API gRPC server is running on port 51656&amp;#34; app_id=Braidbald-Boot scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:34:33.9770372-08:00&amp;#34; level=info msg=&amp;#34;dapr initialized. Status: Running. Init Elapsed 172.9994ms&amp;#34; app_id=Braidbald-Boot scope=dapr.
Checking if Dapr sidecar is listening on GRPC port 51656
Dapr sidecar is up and running.
Updating metadata for app command: python pythonState.py
You are up and running! Both Dapr and your app logs will appear here.
== APP == State has been stored
== APP == Got value: b&amp;#39;myFirstValue&amp;#39; Status: Running. Init Elapsed 172.9994ms&amp;#34; app_id=Braidbald-Boot scope=dapr.
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-5-php-sdk" role="tabpanel" aria-labelled-by="tabs-5-php-sdk-tab">
&lt;br />&lt;p>在&lt;code>state-example.php&lt;/code>中保存以下内容:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">\Dapr\State\StateManager&lt;/span> $stateManager, &lt;span style="color:#a6e22e">\Psr\Log\LoggerInterface&lt;/span> $logger) {
$stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">save_state&lt;/span>(&lt;span style="color:#a6e22e">store_name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;statestore&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">\Dapr\State\StateItem&lt;/span>(
&lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myFirstKey&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myFirstValue&amp;#39;&lt;/span>
));
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;State has been stored&amp;#39;&lt;/span>);
$data &lt;span style="color:#f92672">=&lt;/span> $stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">load_state&lt;/span>(&lt;span style="color:#a6e22e">store_name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;statestore&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myFirstKey&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>;
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got value: {data}&amp;#34;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $data]);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后，执行以下命令启动Dapr sidecar并运行PHP应用程序:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp run -- php state-example.php
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你应该会得到一个类似于下面的输出，它将同时显示Dapr和应用程序的日志:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">✅ You&amp;#39;re up and running! Both Dapr and your app logs will appear here.
== APP == [2021-02-12T16:30:11.078777+01:00] APP.ALERT: State has been stored [] []
== APP == [2021-02-12T16:30:11.082620+01:00] APP.ALERT: Got value: myFirstValue {&amp;#34;data&amp;#34;:&amp;#34;myFirstValue&amp;#34;} []
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="第三步删除状态">第三步：删除状态&lt;/h2>
&lt;p>下面的例子显示了如何通过给状态管理API传递一个键来删除一个对象:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-6" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-6-http-api-bash-tab" data-toggle="tab" href="#tabs-6-http-api-bash" role="tab"
aria-controls="tabs-6-http-api-bash" aria-selected="true">
HTTP API (Bash)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-6-http-api-powershell-tab" data-toggle="tab" href="#tabs-6-http-api-powershell" role="tab"
aria-controls="tabs-6-http-api-powershell" aria-selected="false">
HTTP API (PowerShell)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-6-python-sdk-tab" data-toggle="tab" href="#tabs-6-python-sdk" role="tab"
aria-controls="tabs-6-python-sdk" aria-selected="false">
Python SDK
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-6-content">
&lt;div class="tab-pane fade show active" id="tabs-6-http-api-bash" role="tabpanel" aria-labelled-by="tabs-6-http-api-bash-tab">
&lt;br />&lt;p>用上面运行的同一个dapr实例执行:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X DELETE &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore/key1&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再尝试获取状态，注意没有返回任何值。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-6-http-api-powershell" role="tabpanel" aria-labelled-by="tabs-6-http-api-powershell-tab">
&lt;br />&lt;p>用上面运行的同一个dapr实例执行:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Delete -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore/key1&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再尝试获取状态，注意没有返回任何值。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-6-python-sdk" role="tabpanel" aria-labelled-by="tabs-6-python-sdk-tab">
&lt;br />&lt;p>修改&lt;code>pythonState.py&lt;/code>如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> dapr.clients &lt;span style="color:#f92672">import&lt;/span> DaprClient
&lt;span style="color:#66d9ef">with&lt;/span> DaprClient() &lt;span style="color:#66d9ef">as&lt;/span> d:
d&lt;span style="color:#f92672">.&lt;/span>save_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>, value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value1&amp;#34;&lt;/span> )
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;State has been stored&amp;#34;&lt;/span>)
data &lt;span style="color:#f92672">=&lt;/span> d&lt;span style="color:#f92672">.&lt;/span>get_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>data
&lt;span style="color:#66d9ef">print&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;Got value: {data}&amp;#34;&lt;/span>)
d&lt;span style="color:#f92672">.&lt;/span>delete_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>)
data &lt;span style="color:#f92672">=&lt;/span> d&lt;span style="color:#f92672">.&lt;/span>get_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>data
&lt;span style="color:#66d9ef">print&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;Got value after delete: {data}&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在通过以下命令运行你的程序:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp run python pythonState.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你应该会看到一个类似于下面的输出:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">Starting Dapr with id Yakchocolate-Lord. HTTP Port: 59457. gRPC Port: 59458
== DAPR == time=&amp;#34;2021-01-06T22:55:36.5570696-08:00&amp;#34; level=info msg=&amp;#34;starting Dapr Runtime -- version 0.11.3 -- commit a1a8e11&amp;#34; app_id=Yakchocolate-Lord scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T22:55:36.5690367-08:00&amp;#34; level=info msg=&amp;#34;standalone mode configured&amp;#34; app_id=Yakchocolate-Lord scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T22:55:36.7220140-08:00&amp;#34; level=info msg=&amp;#34;component loaded. Status: Running. Init Elapsed 154.984ms&amp;#34; app_id=Yakchocolate-Lord scope=dapr.runtime type=log ver=0.11.3
Checking if Dapr sidecar is listening on GRPC port 59458
Dapr sidecar is up and running.
Updating metadata for app command: python pythonState.py
You&amp;#39;re up and running!
== APP == State has been stored
== APP == Got value: b&amp;#39;value1&amp;#39;
== APP == Got value after delete: b&amp;#39;&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-6-" role="tabpanel" aria-labelled-by="tabs-6--tab">
&lt;br />&lt;p>修改&lt;code>state-example.php&lt;/code>，内容如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">\Dapr\State\StateManager&lt;/span> $stateManager, &lt;span style="color:#a6e22e">\Psr\Log\LoggerInterface&lt;/span> $logger) {
$stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">save_state&lt;/span>(&lt;span style="color:#a6e22e">store_name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;statestore&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">\Dapr\State\StateItem&lt;/span>(
&lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myFirstKey&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myFirstValue&amp;#39;&lt;/span>
));
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;State has been stored&amp;#39;&lt;/span>);
$data &lt;span style="color:#f92672">=&lt;/span> $stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">load_state&lt;/span>(&lt;span style="color:#a6e22e">store_name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;statestore&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myFirstKey&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>;
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got value: {data}&amp;#34;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $data]);
$stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">delete_keys&lt;/span>(&lt;span style="color:#a6e22e">store_name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;statestore&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">keys&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;myFirstKey&amp;#39;&lt;/span>]);
$data &lt;span style="color:#f92672">=&lt;/span> $stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">load_state&lt;/span>(&lt;span style="color:#a6e22e">store_name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;statestore&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myFirstKey&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>;
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got value after delete: {data}&amp;#34;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $data]);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在使用以下命令运行它:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp run -- php state-example.php
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你应该会看到类似下面的输出:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">✅ You&amp;#39;re up and running!
== APP == [2021-02-12T16:38:00.839201+01:00] APP.ALERT: State has been stored [] []
== APP == [2021-02-12T16:38:00.841997+01:00] APP.ALERT: Got value: myFirstValue {&amp;#34;data&amp;#34;:&amp;#34;myFirstValue&amp;#34;} []
== APP == [2021-02-12T16:38:00.845721+01:00] APP.ALERT: Got value after delete: {&amp;#34;data&amp;#34;:null} []
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="第四步保存和检索多个状态">第四步：保存和检索多个状态&lt;/h2>
&lt;p>Dapr还允许你在同一个调用中保存和检索多个状态:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-7" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-7-http-api-bash-tab" data-toggle="tab" href="#tabs-7-http-api-bash" role="tab"
aria-controls="tabs-7-http-api-bash" aria-selected="true">
HTTP API (Bash)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-7-http-api-powershell-tab" data-toggle="tab" href="#tabs-7-http-api-powershell" role="tab"
aria-controls="tabs-7-http-api-powershell" aria-selected="false">
HTTP API (PowerShell)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-7-python-sdk-tab" data-toggle="tab" href="#tabs-7-python-sdk" role="tab"
aria-controls="tabs-7-python-sdk" aria-selected="false">
Python SDK
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-7-content">
&lt;div class="tab-pane fade show active" id="tabs-7-http-api-bash" role="tabpanel" aria-labelled-by="tabs-7-http-api-bash-tab">
&lt;br />&lt;p>在上面运行的同一个dapr实例中，将两个键/值对保存到你的statetore中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;[{ &amp;#34;key&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;value1&amp;#34;}, { &amp;#34;key&amp;#34;: &amp;#34;key2&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;value2&amp;#34;}]&amp;#39;&lt;/span> http://localhost:3500/v1.0/state/statestore
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在获取你刚才保存的状态：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;keys&amp;#34;:[&amp;#34;key1&amp;#34;, &amp;#34;key2&amp;#34;]}&amp;#39;&lt;/span> http://localhost:3500/v1.0/state/statestore/bulk
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-7-http-api-powershell" role="tabpanel" aria-labelled-by="tabs-7-http-api-powershell-tab">
&lt;br />&lt;p>在上面运行的同一个dapr实例中，将两个键/值对保存到你的statetore中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Post -ContentType &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> -Body &lt;span style="color:#e6db74">&amp;#39;[{ &amp;#34;key&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;value1&amp;#34;}, { &amp;#34;key&amp;#34;: &amp;#34;key2&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;value2&amp;#34;}]&amp;#39;&lt;/span> -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在获取你刚才保存的状态：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Post -ContentType &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> -Body &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;keys&amp;#34;:[&amp;#34;key1&amp;#34;, &amp;#34;key2&amp;#34;]}&amp;#39;&lt;/span> -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore/bulk&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-7-python-sdk" role="tabpanel" aria-labelled-by="tabs-7-python-sdk-tab">
&lt;br />&lt;p>&lt;code>StateItem&lt;/code>对象可以使用&lt;code>save_states&lt;/code>和&lt;code>get_states&lt;/code>方法来存储多个Dapr状态。&lt;/p>
&lt;p>用以下代码更新你的&lt;code>pythonState.py&lt;/code>文件:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> dapr.clients &lt;span style="color:#f92672">import&lt;/span> DaprClient
&lt;span style="color:#f92672">from&lt;/span> dapr.clients.grpc._state &lt;span style="color:#f92672">import&lt;/span> StateItem
&lt;span style="color:#66d9ef">with&lt;/span> DaprClient() &lt;span style="color:#66d9ef">as&lt;/span> d:
s1 &lt;span style="color:#f92672">=&lt;/span> StateItem(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>, value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value1&amp;#34;&lt;/span>)
s2 &lt;span style="color:#f92672">=&lt;/span> StateItem(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key2&amp;#34;&lt;/span>, value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value2&amp;#34;&lt;/span>)
d&lt;span style="color:#f92672">.&lt;/span>save_bulk_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, states&lt;span style="color:#f92672">=&lt;/span>[s1,s2])
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;States have been stored&amp;#34;&lt;/span>)
items &lt;span style="color:#f92672">=&lt;/span> d&lt;span style="color:#f92672">.&lt;/span>get_bulk_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, keys&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;key2&amp;#34;&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>items
&lt;span style="color:#66d9ef">print&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;Got items: {[i.data for i in items]}&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在通过以下命令运行你的程序:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp run python pythonState.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你应该会看到一个类似于下面的输出:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">== DAPR == time=&amp;#34;2021-01-06T21:54:56.7262358-08:00&amp;#34; level=info msg=&amp;#34;starting Dapr Runtime -- version 0.11.3 -- commit a1a8e11&amp;#34; app_id=Musesequoia-Sprite scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:54:56.7401933-08:00&amp;#34; level=info msg=&amp;#34;standalone mode configured&amp;#34; app_id=Musesequoia-Sprite scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:54:56.8754240-08:00&amp;#34; level=info msg=&amp;#34;Initialized name resolution to standalone&amp;#34; app_id=Musesequoia-Sprite scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:54:56.8844248-08:00&amp;#34; level=info msg=&amp;#34;component loaded. name: statestore, type: state.redis&amp;#34; app_id=Musesequoia-Sprite scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:54:56.8854273-08:00&amp;#34; level=info msg=&amp;#34;API gRPC server is running on port 60614&amp;#34; app_id=Musesequoia-Sprite scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T21:54:56.8854273-08:00&amp;#34; level=info msg=&amp;#34;dapr initialized. Status: Running. Init Elapsed 145.234ms&amp;#34; app_id=Musesequoia-Sprite scope=dapr.runtime type=log ver=0.11.3
Checking if Dapr sidecar is listening on GRPC port 60614
Dapr sidecar is up and running.
Updating metadata for app command: python pythonState.py
You&amp;#39;re up and running!
== APP == States have been stored
== APP == Got items: [b&amp;#39;value1&amp;#39;, b&amp;#39;value2&amp;#39;]
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-7-" role="tabpanel" aria-labelled-by="tabs-7--tab">
&lt;br />&lt;p>要用PHP批量加载和保存状态，只需创建一个 &amp;ldquo;Plain Ole' PHP对象&amp;rdquo;(POPO)，并用 StateStore注解进行声明。&lt;/p>
&lt;p>更新&lt;code>state-example.php&lt;/code>文件:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
&lt;span style="color:#75715e">#[\Dapr\State\Attributes\StateStore(&amp;#39;statestore&amp;#39;, \Dapr\consistency\EventualLastWrite::class)]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyState&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $key1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;value1&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $key2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;value2&amp;#39;&lt;/span>;
}
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">\Dapr\State\StateManager&lt;/span> $stateManager, &lt;span style="color:#a6e22e">\Psr\Log\LoggerInterface&lt;/span> $logger) {
$obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MyState&lt;/span>();
$stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">save_object&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $obj);
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;States have been stored&amp;#39;&lt;/span>);
$stateManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">load_object&lt;/span>(&lt;span style="color:#a6e22e">into&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $obj);
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got value: {data}&amp;#34;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $obj]);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行该应用:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp run -- php state-example.php
&lt;/code>&lt;/pre>&lt;/div>&lt;p>并看到以下输出:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">✅ You&amp;#39;re up and running!
== APP == [2021-02-12T16:55:02.913801+01:00] APP.ALERT: States have been stored [] []
== APP == [2021-02-12T16:55:02.917850+01:00] APP.ALERT: Got value: [object MyState] {&amp;#34;data&amp;#34;:{&amp;#34;MyState&amp;#34;:{&amp;#34;key1&amp;#34;:&amp;#34;value1&amp;#34;,&amp;#34;key2&amp;#34;:&amp;#34;value2&amp;#34;}}} []
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="第五步执行状态事务性操作">第五步：执行状态事务性操作&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
状态事务性操作需要一个支持multi-item transactions的状态存储引擎。 请访问 &lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">支持的状态存储引擎&lt;/a>页面查看完整列表。 请注意，在自托管环境中创建的默认Redis容器是支持的。
&lt;/div>
&lt;ul class="nav nav-tabs" id="tabs-9" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-9-http-api-bash-tab" data-toggle="tab" href="#tabs-9-http-api-bash" role="tab"
aria-controls="tabs-9-http-api-bash" aria-selected="true">
HTTP API (Bash)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-9-http-api-powershell-tab" data-toggle="tab" href="#tabs-9-http-api-powershell" role="tab"
aria-controls="tabs-9-http-api-powershell" aria-selected="false">
HTTP API (PowerShell)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-9-python-sdk-tab" data-toggle="tab" href="#tabs-9-python-sdk" role="tab"
aria-controls="tabs-9-python-sdk" aria-selected="false">
Python SDK
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-9-php-sdk-tab" data-toggle="tab" href="#tabs-9-php-sdk" role="tab"
aria-controls="tabs-9-php-sdk" aria-selected="false">
PHP SDK
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-9-content">
&lt;div class="tab-pane fade show active" id="tabs-9-http-api-bash" role="tabpanel" aria-labelled-by="tabs-9-http-api-bash-tab">
&lt;br />&lt;p>用上面运行的同一个dapr实例执行两个状态事务操作:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;operations&amp;#34;: [{&amp;#34;operation&amp;#34;:&amp;#34;upsert&amp;#34;, &amp;#34;request&amp;#34;: {&amp;#34;key&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;newValue1&amp;#34;}}, {&amp;#34;operation&amp;#34;:&amp;#34;delete&amp;#34;, &amp;#34;request&amp;#34;: {&amp;#34;key&amp;#34;: &amp;#34;key2&amp;#34;}}]}&amp;#39;&lt;/span> http://localhost:3500/v1.0/state/statestore/transaction
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在可以看到你的状态事务操作的结果:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;keys&amp;#34;:[&amp;#34;key1&amp;#34;, &amp;#34;key2&amp;#34;]}&amp;#39;&lt;/span> http://localhost:3500/v1.0/state/statestore/bulk
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-9-http-api-powershell" role="tabpanel" aria-labelled-by="tabs-9-http-api-powershell-tab">
&lt;br />&lt;p>在上面运行的同一个dapr实例中，将两个键/值对保存到你的statetore中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Post -ContentType &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> -Body &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;operations&amp;#34;: [{&amp;#34;operation&amp;#34;:&amp;#34;upsert&amp;#34;, &amp;#34;request&amp;#34;: {&amp;#34;key&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;newValue1&amp;#34;}}, {&amp;#34;operation&amp;#34;:&amp;#34;delete&amp;#34;, &amp;#34;request&amp;#34;: {&amp;#34;key&amp;#34;: &amp;#34;key2&amp;#34;}}]}&amp;#39;&lt;/span> -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在可以看到你的状态事务操作的结果:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Post -ContentType &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> -Body &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;keys&amp;#34;:[&amp;#34;key1&amp;#34;, &amp;#34;key2&amp;#34;]}&amp;#39;&lt;/span> -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/state/statestore/bulk&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-9-python-sdk" role="tabpanel" aria-labelled-by="tabs-9-python-sdk-tab">
&lt;br />&lt;p>如果你的状态存储需要事务支持，可以考虑使用&lt;code>TransactionalStateOperation&lt;/code>。&lt;/p>
&lt;p>用以下代码更新你的&lt;code>pythonState.py&lt;/code>文件:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> dapr.clients &lt;span style="color:#f92672">import&lt;/span> DaprClient
&lt;span style="color:#f92672">from&lt;/span> dapr.clients.grpc._state &lt;span style="color:#f92672">import&lt;/span> StateItem
&lt;span style="color:#f92672">from&lt;/span> dapr.clients.grpc._request &lt;span style="color:#f92672">import&lt;/span> TransactionalStateOperation, TransactionOperationType
&lt;span style="color:#66d9ef">with&lt;/span> DaprClient() &lt;span style="color:#66d9ef">as&lt;/span> d:
s1 &lt;span style="color:#f92672">=&lt;/span> StateItem(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>, value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value1&amp;#34;&lt;/span>)
s2 &lt;span style="color:#f92672">=&lt;/span> StateItem(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key2&amp;#34;&lt;/span>, value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value2&amp;#34;&lt;/span>)
d&lt;span style="color:#f92672">.&lt;/span>save_bulk_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, states&lt;span style="color:#f92672">=&lt;/span>[s1,s2])
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;States have been stored&amp;#34;&lt;/span>)
d&lt;span style="color:#f92672">.&lt;/span>execute_state_transaction(
store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>,
operations&lt;span style="color:#f92672">=&lt;/span>[
TransactionalStateOperation(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;newValue1&amp;#34;&lt;/span>, operation_type&lt;span style="color:#f92672">=&lt;/span>TransactionOperationType&lt;span style="color:#f92672">.&lt;/span>upsert),
TransactionalStateOperation(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key2&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value2&amp;#34;&lt;/span>, operation_type&lt;span style="color:#f92672">=&lt;/span>TransactionOperationType&lt;span style="color:#f92672">.&lt;/span>delete)
]
)
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;State transactions have been completed&amp;#34;&lt;/span>)
items &lt;span style="color:#f92672">=&lt;/span> d&lt;span style="color:#f92672">.&lt;/span>get_bulk_state(store_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;statestore&amp;#34;&lt;/span>, keys&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;key2&amp;#34;&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>items
&lt;span style="color:#66d9ef">print&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;Got items: {[i.data for i in items]}&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在通过以下命令运行你的程序:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run python pythonState.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你应该会看到一个类似于下面的输出:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">Starting Dapr with id Singerchecker-Player. HTTP Port: 59533. gRPC Port: 59534
== DAPR == time=&amp;#34;2021-01-06T22:18:14.1246721-08:00&amp;#34; level=info msg=&amp;#34;starting Dapr Runtime -- version 0.11.3 -- commit a1a8e11&amp;#34; app_id=Singerchecker-Player scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T22:18:14.1346254-08:00&amp;#34; level=info msg=&amp;#34;standalone mode configured&amp;#34; app_id=Singerchecker-Player scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T22:18:14.2747063-08:00&amp;#34; level=info msg=&amp;#34;component loaded. name: statestore, type: state.redis&amp;#34; app_id=Singerchecker-Player scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T22:18:14.2757062-08:00&amp;#34; level=info msg=&amp;#34;API gRPC server is running on port 59534&amp;#34; app_id=Singerchecker-Player scope=dapr.runtime type=log ver=0.11.3
== DAPR == time=&amp;#34;2021-01-06T22:18:14.2767059-08:00&amp;#34; level=info msg=&amp;#34;dapr initialized. Status: Running. Init Elapsed 142.0805ms&amp;#34; app_id=Singerchecker-Player scope=dapr.runtime type=log ver=0.11.3
Checking if Dapr sidecar is listening on GRPC port 59534
Dapr sidecar is up and running.
Updating metadata for app command: python pythonState.py
You&amp;#39;re up and running!
== APP == State transactions have been completed
== APP == Got items: [b&amp;#39;value1&amp;#39;, b&amp;#39;&amp;#39;]
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-9-php-sdk" role="tabpanel" aria-labelled-by="tabs-9-php-sdk-tab">
&lt;br />&lt;p>事务性状态通过扩展&lt;code>TransactionalState&lt;/code>基础对象来支持，它挂接到你的 对象，然后通过setters和getters来提供事务。 而你可能会希望依赖注入框架来替你创建一个事务对象:&lt;/p>
&lt;p>再次修改&lt;code>state-example.php&lt;/code>文件:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
&lt;span style="color:#75715e">#[\Dapr\State\Attributes\StateStore(&amp;#39;statestore&amp;#39;, \Dapr\consistency\EventualLastWrite::class)]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyState&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">\Dapr\State\TransactionalState&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $key1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;value1&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $key2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;value2&amp;#39;&lt;/span>;
}
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">MyState&lt;/span> $obj, &lt;span style="color:#a6e22e">\Psr\Log\LoggerInterface&lt;/span> $logger, &lt;span style="color:#a6e22e">\Dapr\State\StateManager&lt;/span> $stateManager) {
$obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">begin&lt;/span>();
$obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">key1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;hello world&amp;#39;&lt;/span>;
$obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">key2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;value3&amp;#39;&lt;/span>;
$obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">commit&lt;/span>();
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Transaction committed!&amp;#39;&lt;/span>);
&lt;span style="color:#75715e">// begin a new transaction which reloads from the store
&lt;/span>&lt;span style="color:#75715e">&lt;/span> $obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">begin&lt;/span>();
$logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got value: {key1}, {key2}&amp;#34;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;key1&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">key1&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;key2&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">key2&lt;/span>]);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行程序:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp run -- php state-example.php
&lt;/code>&lt;/pre>&lt;/div>&lt;p>观察到以下输出:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">✅ You&amp;#39;re up and running!
== APP == [2021-02-12T17:10:06.837110+01:00] APP.ALERT: Transaction committed! [] []
== APP == [2021-02-12T17:10:06.840857+01:00] APP.ALERT: Got value: hello world, value3 {&amp;#34;key1&amp;#34;:&amp;#34;hello world&amp;#34;,&amp;#34;key2&amp;#34;:&amp;#34;value3&amp;#34;} []
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="下一步">下一步&lt;/h2>
&lt;ul>
&lt;li>阅读完整的 &lt;a href="https://docs.dapr.io/reference/api/state_api/">状态 API 参考&lt;/a>&lt;/li>
&lt;li>试试其中一个 &lt;a href="https://docs.dapr.io/developing-applications/sdks/">Dapr SDK&lt;/a>&lt;/li>
&lt;li>构建一个 &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-stateful-service/">状态服务&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: 指南：如何创建一个有状态的服务</title><link>https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-stateful-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-stateful-service/</guid><description>
&lt;p>在这篇文章中，你将了解到如何使用选入(opt-in) 并发和一致性模型来创建一个可以水平扩展的有状态服务。&lt;/p>
&lt;p>这可以把开发人员从困难的状态协调、冲突解决和失败处理中解放出来，允许他们以Dapr的API形式使用这些功能。&lt;/p>
&lt;h2 id="设置状态存储">设置状态存储&lt;/h2>
&lt;p>状态存储组件代表Dapr用来与数据库进行通信的资源。 在本指南中，我们将使用Redis作为状态存储引擎。&lt;/p>
&lt;p>在&lt;a href="https://docs.dapr.io/reference/components-reference/supported-state-stores/">这里&lt;/a>查看支持的状态存储引擎列表。&lt;/p>
&lt;h3 id="使用-dapr-cli">使用 Dapr CLI&lt;/h3>
&lt;p>当使用&lt;code>dapr run&lt;/code>运行你的应用程序时，Dapr CLI会自动提供一个状态存储（Redis）并创建相关的YAML。 如果需要切换使用的状态存储引擎，用你选择的文件替换/components下的YAML文件``。&lt;/p>
&lt;h3 id="kubernetes">Kubernetes&lt;/h3>
&lt;p>请参阅 &lt;a href="%7B%7BX%1A20X%7D%7D">这里&lt;/a> 的说明，了解如何在 Kubernetes 上设置不同的状态存储引擎。&lt;/p>
&lt;h2 id="强一致性和最终一致性">强一致性和最终一致性&lt;/h2>
&lt;p>使用强一致性时，Dapr将确保底层状态存储在写入或删除状态之前，一旦数据被写入到所有副本或收到来自quorum的ack，就会返回响应。&lt;/p>
&lt;p>对于GET类型的请求，Dapr将确保存储引擎在副本间一致地返回最新的数据。 除非在对状态API的请求中另有指定，否则默认为最终一致性。&lt;/p>
&lt;p>下面的例子使用了强一致性:&lt;/p>
&lt;h3 id="保存状态">保存状态&lt;/h3>
&lt;p>&lt;em>下面的例子是用Python编写的，但适用于任何编程语言。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests
&lt;span style="color:#f92672">import&lt;/span> json
store_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;redis-store&amp;#34;&lt;/span> &lt;span style="color:#75715e"># name of the state store as specified in state store component yaml file&lt;/span>
dapr_state_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/state/{}&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(store_name)
stateReq &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[{ &amp;#34;key&amp;#34;: &amp;#34;k1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;Some Data&amp;#34;, &amp;#34;options&amp;#34;: { &amp;#34;consistency&amp;#34;: &amp;#34;strong&amp;#34; }}]&amp;#39;&lt;/span>
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>post(dapr_state_url, json&lt;span style="color:#f92672">=&lt;/span>stateReq)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取状态">获取状态&lt;/h3>
&lt;p>&lt;em>下面的例子是用Python编写的，但适用于任何编程语言。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests
&lt;span style="color:#f92672">import&lt;/span> json
store_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;redis-store&amp;#34;&lt;/span> &lt;span style="color:#75715e"># name of the state store as specified in state store component yaml file&lt;/span>
dapr_state_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/state/{}&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(store_name)
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(dapr_state_url &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/key1&amp;#34;&lt;/span>, headers&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;consistency&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;strong&amp;#34;&lt;/span>})
&lt;span style="color:#66d9ef">print&lt;/span>(response&lt;span style="color:#f92672">.&lt;/span>headers[&lt;span style="color:#e6db74">&amp;#39;ETag&amp;#39;&lt;/span>])
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除状态">删除状态&lt;/h3>
&lt;p>&lt;em>下面的例子是用Python编写的，但适用于任何编程语言。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests
&lt;span style="color:#f92672">import&lt;/span> json
store_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;redis-store&amp;#34;&lt;/span> &lt;span style="color:#75715e"># name of the state store as specified in state store component yaml file&lt;/span>
dapr_state_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/state/{}&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(store_name)
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>delete(dapr_state_url &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/key1&amp;#34;&lt;/span>, headers&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;consistency&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;strong&amp;#34;&lt;/span>})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果没有指定&lt;code>concurrency&lt;/code>选项，last-write 是默认的并发模式。&lt;/p>
&lt;h2 id="first-write-wins-和-last-write-wins">First-write-wins 和 Last-write-wins&lt;/h2>
&lt;p>Dapr允许开发人员在处理数据存储时选择两种常见的并发模式：First-write-wins 和 Last-write-wins。 在有多个应用程序实例，同时向同一个键进行写入的情况下，First-Write-Wins策略非常有用。&lt;/p>
&lt;p>Dapr的默认模式是Last-write-wins。&lt;/p>
&lt;p>Dapr使用版本号来确定一个特定的键是否已经更新。 客户端在读取键对应的值时保留版本号，然后在写入和删除等更新过程中使用版本号。 如果版本信息在客户端检索后发生了变化，就会抛出一个错误，这时就需要客户端再次执行读取，以获取最新的版本信息和状态。&lt;/p>
&lt;p>Dapr利用ETags来确定状态的版本号。 ETags标签从状态相关请求中以&lt;code>ETag&lt;/code>头返回。&lt;/p>
&lt;p>使用ETags，当出现ETag不匹配时，客户可以通过异常知道资源在上次检查后已经被更新。&lt;/p>
&lt;p>下面的例子展示了如何获得一个ETag，然后使用它来保存状态，然后删除状态：&lt;/p>
&lt;p>&lt;em>下面的例子是用Python编写的，但适用于任何编程语言。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests
&lt;span style="color:#f92672">import&lt;/span> json
store_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;redis-store&amp;#34;&lt;/span> &lt;span style="color:#75715e"># name of the state store as specified in state store component yaml file&lt;/span>
dapr_state_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/state/{}&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(store_name)
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(dapr_state_url &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/key1&amp;#34;&lt;/span>, headers&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;concurrency&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;first-write&amp;#34;&lt;/span>})
etag &lt;span style="color:#f92672">=&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>headers[&lt;span style="color:#e6db74">&amp;#39;ETag&amp;#39;&lt;/span>]
newState &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[{ &amp;#34;key&amp;#34;: &amp;#34;k1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;New Data&amp;#34;, &amp;#34;etag&amp;#34;: {}, &amp;#34;options&amp;#34;: { &amp;#34;concurrency&amp;#34;: &amp;#34;first-write&amp;#34; }}]&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(etag)
requests&lt;span style="color:#f92672">.&lt;/span>post(dapr_state_url, json&lt;span style="color:#f92672">=&lt;/span>newState)
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>delete(dapr_state_url &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/key1&amp;#34;&lt;/span>, headers&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;If-Match&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{}&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(etag)})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="处理版本不匹配引起的失败">处理版本不匹配引起的失败&lt;/h3>
&lt;p>在这个例子中，我们将看到如何在版本发生变化时重试保存状态操作:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests
&lt;span style="color:#f92672">import&lt;/span> json
&lt;span style="color:#75715e"># This method saves the state and returns false if failed to save state&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">save_state&lt;/span>(data):
&lt;span style="color:#66d9ef">try&lt;/span>:
store_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;redis-store&amp;#34;&lt;/span> &lt;span style="color:#75715e"># name of the state store as specified in state store component yaml file&lt;/span>
dapr_state_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/state/{}&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(store_name)
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>post(dapr_state_url, json&lt;span style="color:#f92672">=&lt;/span>data)
&lt;span style="color:#66d9ef">if&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>status_code &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> True
&lt;span style="color:#66d9ef">except&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> False
&lt;span style="color:#66d9ef">return&lt;/span> False
&lt;span style="color:#75715e"># This method gets the state and returns the response, with the ETag in the header --&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_state&lt;/span>(key):
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/state/&amp;lt;state_store_name&amp;gt;/{}&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(key), headers&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;concurrency&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;first-write&amp;#34;&lt;/span>})
&lt;span style="color:#66d9ef">return&lt;/span> response
&lt;span style="color:#75715e"># Exit when save state is successful. success will be False if there&amp;#39;s an ETag mismatch --&amp;gt;&lt;/span>
success &lt;span style="color:#f92672">=&lt;/span> False
&lt;span style="color:#66d9ef">while&lt;/span> success &lt;span style="color:#f92672">!=&lt;/span> True:
response &lt;span style="color:#f92672">=&lt;/span> get_state(&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>)
etag &lt;span style="color:#f92672">=&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>headers[&lt;span style="color:#e6db74">&amp;#39;ETag&amp;#39;&lt;/span>]
newState &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[{ &amp;#34;key&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;New Data&amp;#34;, &amp;#34;etag&amp;#34;: {}, &amp;#34;options&amp;#34;: { &amp;#34;concurrency&amp;#34;: &amp;#34;first-write&amp;#34; }}]&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(etag)
success &lt;span style="color:#f92672">=&lt;/span> save_state(newState)
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Developing-Applications: 指南：如何在应用程序之间共享状态</title><link>https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-share-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/state-management/howto-share-state/</guid><description>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>Dapr 为开发者提供了不同的方式来共享应用程序之间的状态。&lt;/p>
&lt;p>在共享状态时，不同的体系结构可能有不同的需求。 例如，在一个场景中，您可能想要封装某个应用程序中的所有状态，并让 Dapr 管理您的访问权限。 在不同的场景中，您可能需要两个在相同状态下工作的应用程序能够获得和保存相同的键值(keys)。&lt;/p>
&lt;p>要启用状态共享， Dapr 支持以下键前缀策略:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>Appid&lt;/code>&lt;/strong> - 这是默认策略。 带有&lt;code>appid&lt;/code>前缀的状态仅允许具有指定&lt;code>appid&lt;/code>的应用程序管理。 所有的状态键都会以&lt;code>appid&lt;/code>为前缀，并对应用进行限定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>name&lt;/code>&lt;/strong> - 此设置使用状态存储组件的名称作为前缀。 对于一个给定的状态存储，多个应用程序可以共享同一个状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>none&lt;/code>&lt;/strong> - 此设置不使用前缀。 多个应用程序在不同的状态存储中共享状态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="指定状态前缀策略">指定状态前缀策略&lt;/h2>
&lt;p>要指定前缀策略，请在状态组件上添加一个名为&lt;code>keyPrefix&lt;/code>的元数据键:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">statestore&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">state.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">keyPrefix&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;key-prefix-strategy&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="示例">示例&lt;/h2>
&lt;p>下面的例子将向你展示上述支持的前缀策略下是如何进行状态检索的:&lt;/p>
&lt;h3 id="appid-default">&lt;code>appid&lt;/code> (default)&lt;/h3>
&lt;p>一个id为&lt;code>myApp&lt;/code>的Dapr应用程序正在将状态保存到一个名为&lt;code>redis&lt;/code>的状态存储中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">curl -X POST http://localhost:3500/v1.0/state/redis &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span>
-d &lt;span style="color:#e6db74">&amp;#39;[
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;key&amp;#34;: &amp;#34;darth&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;value&amp;#34;: &amp;#34;nihilus&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;span style="color:#e6db74"> ]&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该键将被保存为&lt;code>myApp||darth&lt;/code>。&lt;/p>
&lt;h3 id="name">&lt;code>name&lt;/code>&lt;/h3>
&lt;p>一个id为&lt;code>myApp&lt;/code>的Dapr应用程序正在将状态保存到一个名为&lt;code>redis&lt;/code>的状态存储中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">curl -X POST http://localhost:3500/v1.0/state/redis &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span>
-d &lt;span style="color:#e6db74">&amp;#39;[
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;key&amp;#34;: &amp;#34;darth&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;value&amp;#34;: &amp;#34;nihilus&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;span style="color:#e6db74"> ]&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该键将被保存为&lt;code>redis||darth&lt;/code>。&lt;/p>
&lt;h3 id="none">&lt;code>none&lt;/code>&lt;/h3>
&lt;p>一个id为&lt;code>myApp&lt;/code>的Dapr应用程序正在将状态保存到一个名为&lt;code>redis&lt;/code>的状态存储中:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">curl -X POST http://localhost:3500/v1.0/state/redis &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span>
-d &lt;span style="color:#e6db74">&amp;#39;[
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;key&amp;#34;: &amp;#34;darth&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;value&amp;#34;: &amp;#34;nihilus&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;span style="color:#e6db74"> ]&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该键将被保存为&lt;code>darth&lt;/code>。&lt;/p></description></item><item><title>Developing-Applications: 使用后端状态存储</title><link>https://docs.dapr.io/developing-applications/building-blocks/state-management/query-state-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/state-management/query-state-store/</guid><description>
&lt;p>查看 &lt;strong>功能操作&lt;/strong> 章节可以看到一系列&lt;a href="%7B%7BX%1A1X%7D%7D">受支持的状态存储&lt;/a> 以及如何设置&lt;a href="%7B%7BX%1A2X%7D%7D">状态存储组件&lt;/a>.&lt;/p></description></item></channel></rss>