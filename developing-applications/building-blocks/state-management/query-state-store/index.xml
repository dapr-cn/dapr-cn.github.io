<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – Work with backend state stores</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/</link><description>Recent content in Work with backend state stores on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Azure Cosmos DB</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/query-cosmosdb-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/query-cosmosdb-store/</guid><description>
&lt;p>Dapr doesn&amp;rsquo;t transform state values while saving and retrieving states. Dapr requires all state store implementations to abide by a certain key format scheme (see &lt;a href="https://dapr-cn.github.io/docs/reference/api/state_api/">Dapr state management spec&lt;/a>. You can directly interact with the underlying store to manipulate the state data, such querying states, creating aggregated views and making backups.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> Azure Cosmos DB is a multi-modal database that supports multiple APIs. The default Dapr Cosmos DB state store implementation uses the &lt;a href="https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-getting-started">Azure Cosmos DB SQL API&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-connect-to-azure-cosmos-db">1. Connect to Azure Cosmos DB&lt;/h2>
&lt;p>The easiest way to connect to your Cosmos DB instance is to use the Data Explorer on &lt;a href="https://portal.azure.com">Azure Management Portal&lt;/a>. Alternatively, you can use &lt;a href="https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-introduction">various SDKs and tools&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> The following samples use Cosmos DB &lt;a href="https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-getting-started">SQL API&lt;/a>. When you configure an Azure Cosmos DB for Dapr, you need to specify the exact database and collection to use. The follow samples assume you&amp;rsquo;ve already connected to the right database and a collection named &amp;ldquo;states&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;h2 id="2-list-keys-by-app-id">2. List keys by App ID&lt;/h2>
&lt;p>To get all state keys associated with application &amp;ldquo;myapp&amp;rdquo;, use the query:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> &lt;span style="color:#66d9ef">CONTAINS&lt;/span>(states.id, &lt;span style="color:#e6db74">&amp;#39;myapp||&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above query returns all documents with id containing &amp;ldquo;myapp-&amp;rdquo;, which is the prefix of the state keys.&lt;/p>
&lt;h2 id="3-get-specific-state-data">3. Get specific state data&lt;/h2>
&lt;p>To get the state data by a key &amp;ldquo;balance&amp;rdquo; for the application &amp;ldquo;myapp&amp;rdquo;, use the query:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> states.id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myapp||balance&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, read the &lt;strong>value&lt;/strong> field of the returned document.&lt;/p>
&lt;p>To get the state version/ETag, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> states._etag &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> states.id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myapp||balance&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-read-actor-state">4. Read actor state&lt;/h2>
&lt;p>To get all the state keys associated with an actor with the instance ID &amp;ldquo;leroy&amp;rdquo; of actor type &amp;ldquo;cat&amp;rdquo; belonging to the application with ID &amp;ldquo;mypets&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> &lt;span style="color:#66d9ef">CONTAINS&lt;/span>(states.id, &lt;span style="color:#e6db74">&amp;#39;mypets||cat||leroy||&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And to get a specific actor state such as &amp;ldquo;food&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> states.id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;mypets||cat||leroy||food&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>WARNING:&lt;/strong> You should not manually update or delete states in the store. All writes and delete operations should be done via the Dapr runtime.&lt;/p>
&lt;/blockquote></description></item><item><title>Developing-Applications: Redis</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/query-redis-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/query-redis-store/</guid><description>
&lt;p>Dapr doesn&amp;rsquo;t transform state values while saving and retrieving states. Dapr requires all state store implementations to abide by a certain key format scheme (see &lt;a href="%7B%7BX%1A16X%7D%7D">Dapr state management spec&lt;/a>. You can directly interact with the underlying store to manipulate the state data, such as querying states, creating aggregated views and making backups.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> The following examples uses Redis CLI against a Redis store using the default Dapr state store implementation.&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-connect-to-redis">1. Connect to Redis&lt;/h2>
&lt;p>You can use the official &lt;a href="https://redis.io/topics/rediscli">redis-cli&lt;/a> or any other Redis compatible tools to connect to the Redis state store to directly query Dapr states. If you are running Redis in a container, the easiest way to use redis-cli is to use a container:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run --rm -it --link &amp;lt;name of the Redis container&amp;gt; redis redis-cli -h &amp;lt;name of the Redis container&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-list-keys-by-app-id">2. List keys by App ID&lt;/h2>
&lt;p>To get all state keys associated with application &amp;ldquo;myapp&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">KEYS myapp*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above command returns a list of existing keys, for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;myapp||balance&amp;#34;&lt;/span>
2&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;myapp||amount&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-get-specific-state-data">3. Get specific state data&lt;/h2>
&lt;p>Dapr saves state values as hash values. Each hash value contains a &amp;ldquo;data&amp;rdquo; field, which contains the state data and a &amp;ldquo;version&amp;rdquo; field, which contains an ever-incrementing version serving as the ETag.&lt;/p>
&lt;p>For example, to get the state data by a key &amp;ldquo;balance&amp;rdquo; for the application &amp;ldquo;myapp&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">HGET myapp&lt;span style="color:#f92672">||&lt;/span>balance data
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To get the state version/ETag, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">HGET myapp&lt;span style="color:#f92672">||&lt;/span>balance version
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-read-actor-state">4. Read actor state&lt;/h2>
&lt;p>To get all the state keys associated with an actor with the instance ID &amp;ldquo;leroy&amp;rdquo; of actor type &amp;ldquo;cat&amp;rdquo; belonging to the application with ID &amp;ldquo;mypets&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">KEYS mypets&lt;span style="color:#f92672">||&lt;/span>cat&lt;span style="color:#f92672">||&lt;/span>leroy*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And to get a specific actor state such as &amp;ldquo;food&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">HGET mypets&lt;span style="color:#f92672">||&lt;/span>cat&lt;span style="color:#f92672">||&lt;/span>leroy&lt;span style="color:#f92672">||&lt;/span>food value
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>WARNING:&lt;/strong> You should not manually update or delete states in the store. All writes and delete operations should be done via the Dapr runtime.&lt;/p>
&lt;/blockquote></description></item><item><title>Developing-Applications: SQL server</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store/</guid><description>
&lt;p>Dapr doesn&amp;rsquo;t transform state values while saving and retrieving states. Dapr requires all state store implementations to abide by a certain key format scheme (see &lt;a href="https://dapr-cn.github.io/docs/reference/api/state_api/">Dapr state management spec&lt;/a>. You can directly interact with the underlying store to manipulate the state data, such querying states, creating aggregated views and making backups.&lt;/p>
&lt;h2 id="1-connect-to-sql-server">1. Connect to SQL Server&lt;/h2>
&lt;p>The easiest way to connect to your SQL Server instance is to use the &lt;a href="https://docs.microsoft.com/sql/azure-data-studio/download-azure-data-studio">Azure Data Studio&lt;/a> (Windows, macOS, Linux) or &lt;a href="https://docs.microsoft.com/sql/ssms/download-sql-server-management-studio-ssms">SQL Server Management Studio&lt;/a> (Windows).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> The following samples use Azure SQL. When you configure an Azure SQL database for Dapr, you need to specify the exact table name to use. The follow samples assume you&amp;rsquo;ve already connected to the right database with a table named &amp;ldquo;states&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;h2 id="2-list-keys-by-app-id">2. List keys by App ID&lt;/h2>
&lt;p>To get all state keys associated with application &amp;ldquo;myapp&amp;rdquo;, use the query:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> [&lt;span style="color:#66d9ef">Key&lt;/span>] &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myapp-%&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above query returns all rows with id containing &amp;ldquo;myapp-&amp;rdquo;, which is the prefix of the state keys.&lt;/p>
&lt;h2 id="3-get-specific-state-data">3. Get specific state data&lt;/h2>
&lt;p>To get the state data by a key &amp;ldquo;balance&amp;rdquo; for the application &amp;ldquo;myapp&amp;rdquo;, use the query:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> [&lt;span style="color:#66d9ef">Key&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myapp-balance&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, read the &lt;strong>Data&lt;/strong> field of the returned row.&lt;/p>
&lt;p>To get the state version/ETag, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> [RowVersion] &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> [&lt;span style="color:#66d9ef">Key&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myapp-balance&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-get-filtered-state-data">4. Get filtered state data&lt;/h2>
&lt;p>To get all state data where the value &amp;ldquo;color&amp;rdquo; in json data equals to &amp;ldquo;blue&amp;rdquo;, use the query:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> JSON_VALUE([&lt;span style="color:#66d9ef">Data&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;$.color&amp;#39;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;blue&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-read-actor-state">5. Read actor state&lt;/h2>
&lt;p>To get all the state keys associated with an actor with the instance ID &amp;ldquo;leroy&amp;rdquo; of actor type &amp;ldquo;cat&amp;rdquo; belonging to the application with ID &amp;ldquo;mypets&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> [&lt;span style="color:#66d9ef">Key&lt;/span>] &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;mypets-cat-leroy-%&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And to get a specific actor state such as &amp;ldquo;food&amp;rdquo;, use the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> states &lt;span style="color:#66d9ef">WHERE&lt;/span> [&lt;span style="color:#66d9ef">Key&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;mypets-cat-leroy-food&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>WARNING:&lt;/strong> You should not manually update or delete states in the store. All writes and delete operations should be done via the Dapr runtime.&lt;/p>
&lt;/blockquote></description></item></channel></rss>