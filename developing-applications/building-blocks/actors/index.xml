<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – Actors</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/</link><description>Recent content in Actors on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Dapr actors overview</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/actors-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/actors-overview/</guid><description>
&lt;p>The Dapr actors runtime provides support for &lt;a href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/actors-background/">virtual actors&lt;/a> through following capabilities:&lt;/p>
&lt;h2 id="actor-method-invocation">Actor method invocation&lt;/h2>
&lt;p>You can interact with Dapr to invoke the actor method by calling HTTP/gRPC endpoint&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">POST/GET/PUT/DELETE http://localhost:3500/v1.0/actors/&amp;lt;actorType&amp;gt;/&amp;lt;actorId&amp;gt;/method/&amp;lt;method&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can provide any data for the actor method in the request body and the response for the request is in response body which is data from actor method call.&lt;/p>
&lt;p>Refer &lt;a href="https://dapr-cn.github.io/docs/reference/api/actors_api/#invoke-actor-method">api spec&lt;/a> for more details.&lt;/p>
&lt;h2 id="actor-state-management">Actor state management&lt;/h2>
&lt;p>Actors can save state reliably using state management capability.&lt;/p>
&lt;p>You can interact with Dapr through HTTP/gRPC endpoints for state management.&lt;/p>
&lt;p>To use actors, your state store must support multi-item transactions. This means your state store &lt;a href="https://github.com/dapr/components-contrib/tree/master/state">component&lt;/a> must implement the &lt;a href="https://github.com/dapr/components-contrib/blob/master/state/transactional_store.go">TransactionalStore&lt;/a> interface. The following state stores implement this interface:&lt;/p>
&lt;ul>
&lt;li>Redis&lt;/li>
&lt;li>MongoDB&lt;/li>
&lt;li>PostgreSQL&lt;/li>
&lt;li>SQL Server&lt;/li>
&lt;li>Azure CosmosDB&lt;/li>
&lt;/ul>
&lt;h2 id="actor-timers-and-reminders">Actor timers and reminders&lt;/h2>
&lt;p>Actors can schedule periodic work on themselves by registering either timers or reminders.&lt;/p>
&lt;h3 id="actor-timers">Actor timers&lt;/h3>
&lt;p>You can register a callback on actor to be executed based on a timer.&lt;/p>
&lt;p>The Dapr actor runtime ensures that the callback methods respect the turn-based concurrency guarantees.This means that no other actor methods or timer/reminder callbacks will be in progress until this callback completes execution.&lt;/p>
&lt;p>The next period of the timer starts after the callback completes execution. This implies that the timer is stopped while the callback is executing and is started when the callback finishes.&lt;/p>
&lt;p>The Dapr actors runtime saves changes made to the actor&amp;rsquo;s state when the callback finishes. If an error occurs in saving the state, that actor object is deactivated and a new instance will be activated.&lt;/p>
&lt;p>All timers are stopped when the actor is deactivated as part of garbage collection. No timer callbacks are invoked after that. Also, the Dapr actors runtime does not retain any information about the timers that were running before deactivation. It is up to the actor to register any timers that it needs when it is reactivated in the future.&lt;/p>
&lt;p>You can create a timer for an actor by calling the HTTP/gRPC request to Dapr.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-http" data-lang="http">&lt;span style="color:#960050;background-color:#1e0010">POST/PUT http://localhost:3500/v1.0/actors/&amp;lt;actorType&amp;gt;/&amp;lt;actorId&amp;gt;/timers/&amp;lt;name&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The timer &lt;code>duetime&lt;/code> and callback are specified in the request body. The due time represents when the timer will first fire after registration. The &lt;code>period&lt;/code> represents how often the timer fires after that. A due time of 0 means to fire immediately. Negative due times and negative periods are invalid.&lt;/p>
&lt;p>The following request body configures a timer with a &lt;code>dueTime&lt;/code> of 9 seconds and a &lt;code>period&lt;/code> of 3 seconds. This means it will first fire after 9 seconds, then every 3 seconds after that.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;dueTime&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m9s0ms&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;period&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m3s0ms&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following request body configures a timer with a &lt;code>dueTime&lt;/code> 0 seconds and a &lt;code>period&lt;/code> of 3 seconds. This means it fires immediately after registration, then every 3 seconds after that.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;dueTime&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m0s0ms&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;period&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m3s0ms&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can remove the actor timer by calling&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-http" data-lang="http">&lt;span style="color:#960050;background-color:#1e0010">DELETE http://localhost:3500/v1.0/actors/&amp;lt;actorType&amp;gt;/&amp;lt;actorId&amp;gt;/timers/&amp;lt;name&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Refer &lt;a href="https://dapr-cn.github.io/docs/reference/api/actors_api/#invoke-timer">api spec&lt;/a> for more details.&lt;/p>
&lt;h3 id="actor-reminders">Actor reminders&lt;/h3>
&lt;p>Reminders are a mechanism to trigger &lt;em>persistent&lt;/em> callbacks on an actor at specified times. Their functionality is similar to timers. But unlike timers, reminders are triggered under all circumstances until the actor explicitly unregisters them or the actor is explicitly deleted. Specifically, reminders are triggered across actor deactivations and failovers because the Dapr actors runtime persists the information about the actors' reminders using Dapr actor state provider.&lt;/p>
&lt;p>You can create a persistent reminder for an actor by calling the Http/gRPC request to Dapr.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-http" data-lang="http">&lt;span style="color:#960050;background-color:#1e0010">POST/PUT http://localhost:3500/v1.0/actors/&amp;lt;actorType&amp;gt;/&amp;lt;actorId&amp;gt;/reminders/&amp;lt;name&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reminder &lt;code>duetime&lt;/code> and callback can be specified in the request body. The due time represents when the reminder first fires after registration. The &lt;code>period&lt;/code> represents how often the reminder will fire after that. A due time of 0 means to fire immediately. Negative due times and negative periods are invalid. To register a reminder that fires only once, set the period to an empty string.&lt;/p>
&lt;p>The following request body configures a reminder with a &lt;code>dueTime&lt;/code> 9 seconds and a &lt;code>period&lt;/code> of 3 seconds. This means it will first fire after 9 seconds, then every 3 seconds after that.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;dueTime&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m9s0ms&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;period&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m3s0ms&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following request body configures a reminder with a &lt;code>dueTime&lt;/code> 0 seconds and a &lt;code>period&lt;/code> of 3 seconds. This means it will fire immediately after registration, then every 3 seconds after that.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;dueTime&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m0s0ms&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;period&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m3s0ms&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following request body configures a reminder with a &lt;code>dueTime&lt;/code> 15 seconds and a &lt;code>period&lt;/code> of empty string. This means it will first fire after 15 seconds, then never fire again.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;dueTime&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0h0m15s0ms&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;period&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="retrieve-actor-reminder">Retrieve actor reminder&lt;/h4>
&lt;p>You can retrieve the actor reminder by calling&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-http" data-lang="http">&lt;span style="color:#960050;background-color:#1e0010">GET http://localhost:3500/v1.0/actors/&amp;lt;actorType&amp;gt;/&amp;lt;actorId&amp;gt;/reminders/&amp;lt;name&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="remove-the-actor-reminder">Remove the actor reminder&lt;/h4>
&lt;p>You can remove the actor reminder by calling&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-http" data-lang="http">&lt;span style="color:#960050;background-color:#1e0010">DELETE http://localhost:3500/v1.0/actors/&amp;lt;actorType&amp;gt;/&amp;lt;actorId&amp;gt;/reminders/&amp;lt;name&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Refer &lt;a href="https://dapr-cn.github.io/docs/reference/api/actors_api/#invoke-reminder">api spec&lt;/a> for more details.&lt;/p></description></item><item><title>Developing-Applications: Introduction to actors</title><link>https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/actors-background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/actors-background/</guid><description>
&lt;p>The &lt;a href="https://en.wikipedia.org/wiki/Actor_model">actor pattern&lt;/a> describes &lt;strong>actors&lt;/strong> as the lowest-level &amp;ldquo;unit of computation&amp;rdquo;. In other words, you write your code in a self-contained unit (called an actor) that receives messages and processes them one at a time, without any kind of concurrency or threading.&lt;/p>
&lt;p>While your code processes a message, it can send one or more messages to other actors, or create new actors. An underlying &lt;strong>runtime&lt;/strong> manages how, when and where each actor runs, and also routes messages between actors.&lt;/p>
&lt;p>A large number of actors can execute simultaneously, and actors execute independently from each other.&lt;/p>
&lt;p>Dapr includes a runtime that specifically implements the &lt;a href="https://www.microsoft.com/en-us/research/project/orleans-virtual-actors/">Virtual Actor pattern&lt;/a>. With Dapr&amp;rsquo;s implementation, you write your Dapr actors according to the Actor model, and Dapr leverages the scalability and reliability guarantees that the underlying platform provides.&lt;/p>
&lt;h2 id="quick-links">Quick links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/actors-overview/">Dapr Actor Features&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/docs/reference/api/actors_api/">Dapr Actor API Spec&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="when-to-use-actors">When to use actors&lt;/h3>
&lt;p>As with any other technology decision, you should decide whether to use actors based on the problem you&amp;rsquo;re trying to solve.&lt;/p>
&lt;p>The actor design pattern can be a good fit to a number of distributed systems problems and scenarios, but the first thing you should consider are the constraints of the pattern. Generally speaking, consider the actor pattern to model your problem or scenario if:&lt;/p>
&lt;ul>
&lt;li>Your problem space involves a large number (thousands or more) of small, independent, and isolated units of state and logic.&lt;/li>
&lt;li>You want to work with single-threaded objects that do not require significant interaction from external components, including querying state across a set of actors.&lt;/li>
&lt;li>Your actor instances won&amp;rsquo;t block callers with unpredictable delays by issuing I/O operations.&lt;/li>
&lt;/ul>
&lt;h2 id="actors-in-dapr">Actors in dapr&lt;/h2>
&lt;p>Every actor is defined as an instance of an actor type, identical to the way an object is an instance of a class. For example, there may be an actor type that implements the functionality of a calculator and there could be many actors of that type that are distributed on various nodes across a cluster. Each such actor is uniquely identified by an actor ID.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/actor_background_game_example.png" width=400>
&lt;h2 id="actor-lifetime">Actor lifetime&lt;/h2>
&lt;p>Dapr actors are virtual, meaning that their lifetime is not tied to their in-memory representation. As a result, they do not need to be explicitly created or destroyed. The Dapr actors runtime automatically activates an actor the first time it receives a request for that actor ID. If an actor is not used for a period of time, the Dapr Actors runtime garbage-collects the in-memory object. It will also maintain knowledge of the actor&amp;rsquo;s existence should it need to be reactivated later.&lt;/p>
&lt;p>Invocation of actor methods and reminders reset the idle time, e.g. reminder firing will keep the actor active. Actor reminders fire whether an actor is active or inactive, if fired for inactive actor, it will activate the actor first. Actor timers do not reset the idle time, so timer firing will not keep the actor active. Timers only fire while the actor is active.&lt;/p>
&lt;p>The idle timeout and scan interval Dapr runtime uses to see if an actor can be garbage-collected is configurable. This information can be passed when Dapr runtime calls into the actor service to get supported actor types.&lt;/p>
&lt;p>This virtual actor lifetime abstraction carries some caveats as a result of the virtual actor model, and in fact the Dapr Actors implementation deviates at times from this model.&lt;/p>
&lt;p>An actor is automatically activated (causing an actor object to be constructed) the first time a message is sent to its actor ID. After some period of time, the actor object is garbage collected. In the future, using the actor ID again, causes a new actor object to be constructed. An actor&amp;rsquo;s state outlives the object&amp;rsquo;s lifetime as state is stored in configured state provider for Dapr runtime.&lt;/p>
&lt;h2 id="distribution-and-failover">Distribution and failover&lt;/h2>
&lt;p>To provide scalability and reliability, actors instances are distributed throughout the cluster and Dapr automatically migrates them from failed nodes to healthy ones as required.&lt;/p>
&lt;p>Actors are distributed across the instances of the actor service, and those instance are distributed across the nodes in a cluster. Each service instance contains a set of actors for a given actor type.&lt;/p>
&lt;h3 id="actor-placement-service">Actor placement service&lt;/h3>
&lt;p>The Dapr actor runtime manages distribution scheme and key range settings for you. This is done by the actor &lt;code>Placement&lt;/code> service. When a new instance of a service is created, the corresponding Dapr runtime registers the actor types it can create and the &lt;code>Placement&lt;/code> service calculates the partitioning across all the instances for a given actor type. This table of partition information for each actor type is updated and stored in each Dapr instance running in the environment and can change dynamically as new instance of actor services are created and destroyed. This is shown in the diagram below.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/actors_background_placement_service_registration.png" width=600>
&lt;p>When a client calls an actor with a particular id (for example, actor id 123), the Dapr instance for the client hashes the actor type and id, and uses the information to call onto the corresponding Dapr instance that can serve the requests for that particular actor id. As a result, the same partition (or service instance) is always called for any given actor id. This is shown in the diagram below.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/actors_background_id_hashing_calling.png" width=600>
&lt;p>This simplifies some choices but also carries some consideration:&lt;/p>
&lt;ul>
&lt;li>By default, actors are randomly placed into pods resulting in uniform distribution.&lt;/li>
&lt;li>Because actors are randomly placed, it should be expected that actor operations always require network communication, including serialization and deserialization of method call data, incurring latency and overhead.&lt;/li>
&lt;/ul>
&lt;p>Note: The Dapr actor Placement service is only used for actor placement and therefore is not needed if your services are not using Dapr actors. The Placement service can run in all &lt;a href="https://dapr-cn.github.io/docs/operations/hosting/">hosting environments&lt;/a>, including self-hosted and Kubernetes.&lt;/p>
&lt;h2 id="actor-communication">Actor communication&lt;/h2>
&lt;p>You can interact with Dapr to invoke the actor method by calling HTTP/gRPC endpoint.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">POST/GET/PUT/DELETE http://localhost:3500/v1.0/actors/&amp;lt;actorType&amp;gt;/&amp;lt;actorId&amp;gt;/&amp;lt;method/state/timers/reminders&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can provide any data for the actor method in the request body, and the response for the request would be in the response body which is the data from actor call.&lt;/p>
&lt;p>Refer to &lt;a href="https://dapr-cn.github.io/docs/developing-applications/building-blocks/actors/actors-overview/">Dapr Actor Features&lt;/a> for more details.&lt;/p>
&lt;h3 id="concurrency">Concurrency&lt;/h3>
&lt;p>The Dapr Actors runtime provides a simple turn-based access model for accessing actor methods. This means that no more than one thread can be active inside an actor object&amp;rsquo;s code at any time. Turn-based access greatly simplifies concurrent systems as there is no need for synchronization mechanisms for data access. It also means systems must be designed with special considerations for the single-threaded access nature of each actor instance.&lt;/p>
&lt;p>A single actor instance cannot process more than one request at a time. An actor instance can cause a throughput bottleneck if it is expected to handle concurrent requests.&lt;/p>
&lt;p>Actors can deadlock on each other if there is a circular request between two actors while an external request is made to one of the actors simultaneously. The Dapr actor runtime automatically times out on actor calls and throw an exception to the caller to interrupt possible deadlock situations.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/actors_background_communication.png" width=600>
&lt;h3 id="turn-based-access">Turn-based access&lt;/h3>
&lt;p>A turn consists of the complete execution of an actor method in response to a request from other actors or clients, or the complete execution of a timer/reminder callback. Even though these methods and callbacks are asynchronous, the Dapr Actors runtime does not interleave them. A turn must be fully finished before a new turn is allowed. In other words, an actor method or timer/reminder callback that is currently executing must be fully finished before a new call to a method or callback is allowed. A method or callback is considered to have finished if the execution has returned from the method or callback and the task returned by the method or callback has finished. It is worth emphasizing that turn-based concurrency is respected even across different methods, timers, and callbacks.&lt;/p>
&lt;p>The Dapr actors runtime enforces turn-based concurrency by acquiring a per-actor lock at the beginning of a turn and releasing the lock at the end of the turn. Thus, turn-based concurrency is enforced on a per-actor basis and not across actors. Actor methods and timer/reminder callbacks can execute simultaneously on behalf of different actors.&lt;/p>
&lt;p>The following example illustrates the above concepts. Consider an actor type that implements two asynchronous methods (say, Method1 and Method2), a timer, and a reminder. The diagram below shows an example of a timeline for the execution of these methods and callbacks on behalf of two actors (ActorId1 and ActorId2) that belong to this actor type.&lt;/p>
&lt;img src="https://dapr-cn.github.io/docs/images/actors_background_concurrency.png" width=600></description></item></channel></rss>