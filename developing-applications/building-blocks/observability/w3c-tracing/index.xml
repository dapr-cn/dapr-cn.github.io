<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – W3C 跟踪上下文</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/</link><description>Recent content in W3C 跟踪上下文 on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: W3C 跟踪上下文概述</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/w3c-tracing-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/w3c-tracing-overview/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Dapr 使用 W3C 跟踪上下文对服务调用和 pub/sub 消息传递进行分布式跟踪。 在很大程度上，Dapr 负责生成和传播跟踪上下文信息的所有繁重工作，这些信息可以发送到许多不同的诊断工具进行可视化和查询。 作为开发者，您只有在极少数情况下需要传播或生成跟踪标头。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>分布式跟踪是一种由跟踪工具实现的方法，用于跟踪、分析和调试跨多个软件组件的事务。 通常情况下，分布式跟踪会游历多个服务，这要求它是唯一可识别的。 跟踪上下文的传播依托于这个唯一标识。&lt;/p>
&lt;p>在过去，跟踪上下文传播通常由每个不同的跟踪供应商单独实现。 在多供应商环境中，这会导致互操作性问题，例如：&lt;/p>
&lt;ul>
&lt;li>由于没有共享的唯一标识，因此不同跟踪供应商收集的跟踪无法相互关联。&lt;/li>
&lt;li>跨越不同跟踪供应商之间边界的跟踪无法传播，因为没有统一协商的标识集可以转发。&lt;/li>
&lt;li>供应商特定的元数据可能会被中介丢弃。&lt;/li>
&lt;li>因为没有可遵循的标准，云平台供应商，中介和服务提供商无法保证支持跟踪上下文的传播。&lt;/li>
&lt;/ul>
&lt;p>在过去，这些问题没有产生重大影响，因为大多数应用程序都由单个跟踪供应商监控，并停留在单个平台提供者的边界内。 如今，越来越多的应用程序被分发到并使用多个中间件服务和云平台。&lt;/p>
&lt;p>现代应用的这种转变呼唤建立一种分布式跟踪上下文传播标准。 &lt;a href="https://www.w3.org/TR/trace-context">W3C 跟踪上下文规范&lt;/a> 定义了一种普遍认可的交换跟踪上下文传播数据的格式 - 称为跟踪上下文。 跟踪上下文解决了上述问题：&lt;/p>
&lt;ul>
&lt;li>为单个跟踪和请求提供唯一标识符，允许将多个供应商的跟踪数据连接起来。&lt;/li>
&lt;li>提供一个商定的机制，以转发供应商特有的跟踪数据，并在多个跟踪工具参与单个事务时避免出现跟踪中断的情况。&lt;/li>
&lt;li>提供中介、平台和硬件提供商都可以支持的行业标准。&lt;/li>
&lt;/ul>
&lt;p>传播跟踪数据的统一方法提高了分布式应用程序行为的可见性，从而有助于问题分析和性能分析。&lt;/p>
&lt;h2 id="场景">场景&lt;/h2>
&lt;p>您需要了解如何使用跟踪的两种情况：&lt;/p>
&lt;ol>
&lt;li>Dapr生成并在服务之间传播跟踪上下文。&lt;/li>
&lt;li>Dapr 生成跟踪上下文，您需要将跟踪上下文传播到另一个服务，或者你生成跟踪上下文，Dapr 将跟踪上下文传播到服务。&lt;/li>
&lt;/ol>
&lt;h3 id="dapr-在服务之间生成和传播跟踪上下文">Dapr 在服务之间生成和传播跟踪上下文&lt;/h3>
&lt;p>在这些场景下，Dapr 会为您完成所有工作。 您不需要创建和传播任何跟踪头。 Dapr 负责创建所有跟踪头并传播它们。 让我们用示例来了解一下这些场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>单个服务调用 (&lt;code>service A -&amp;gt; service B&lt;/code> )&lt;/p>
&lt;p>Dapr 在服务A 中生成跟踪标头，这些跟踪标头从服务A 传播到服务B。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多个顺序的服务调用 （ &lt;code>服务 A -&amp;gt; 服务 B -&amp;gt; 服务 C&lt;/code>）&lt;/p>
&lt;p>Dapr 在服务 A 中请求开始时生成跟踪标头，这些跟踪标头从 &lt;code>服务 A-&amp;gt; 服务 B -&amp;gt; 服务 C&lt;/code> 一路传播到进一步启用了 Dapr 的服务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>请求来自外部端点 （例如从网关服务到启用 Dapr 的服务 A）&lt;/p>
&lt;p>Dapr 在服务 A 中生成跟踪标头，这些跟踪标头从服务 A 传播到进一步启用了 Dapr 的服务 &lt;code>服务 A -&amp;gt; 服务 B -&amp;gt; 服务 C&lt;/code>。 这与上面的场景 2 类似。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pub/sub消息：Dapr 在发布的消息主题中生成跟踪头，而这些跟踪头被传播到任何监听该主题的服务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="您需要在服务之间传播或生成跟踪上下文">您需要在服务之间传播或生成跟踪上下文&lt;/h3>
&lt;p>在这些场景下，Dapr 会为您完成一些工作，您需要创建或传播跟踪标头。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>从单个服务到不同服务的多次服务调用&lt;/p>
&lt;p>当您从一个服务调用多个服务时，比如像这样从服务A中调用，你需要传播跟踪头。&lt;/p>
&lt;pre>&lt;code> service A -&amp;gt; service B
[ .. some code logic ..]
service A -&amp;gt; service C
[ .. some code logic ..]
service A -&amp;gt; service D
[ .. some code logic ..]
&lt;/code>&lt;/pre>
&lt;p>在这种情况下，当服务 A 首先调用服务 B 时，Dapr 会在服务 A 中生成跟踪标头，然后这些跟踪标头将传播到服务 B。 这些跟踪标头作为响应标头的一部分在服务 B 的响应中返回。 但是，您需要将返回的跟踪上下文传播到下一个服务，如服务 C 和服务 D，因为 Dapr 不知道您希望重用相同的标头。&lt;/p>
&lt;p>若要了解如何从响应中提取跟踪标头并将跟踪标头添加到请求中，请参阅 &lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/">如何使用跟踪上下文&lt;/a> 一文.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您已选择生成自己的跟踪上下文标头。 这是很少会遇到的。 There may be occassions where you specifically chose to add W3C trace headers into a service call, for example if you have an existing application that does not currently use Dapr. 在这种情况下，Dapr 仍然会为您传播跟踪上下文标头。 如果您决定自己生成跟踪标头，有三种方法可以实现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>You can use the industry standard OpenCensus/OpenTelemetry SDKs to generate trace headers and pass these trace headers to a Dapr enabled service. 这是首选的建议。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您可以使用供应商SDK来生成W3C跟踪标头，如DynaTrace SDK，并将这些跟踪标头传递给启用Dapr的服务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您可以遵循 &lt;a href="https://www.w3.org/TR/trace-context/"> W3C 跟踪上下文规范 &lt;/a> 来处理跟踪上下文，将这些跟踪标头传递给启用 Dapr 的服务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="w3c-跟踪标头">W3C 跟踪标头&lt;/h2>
&lt;p>这些是 Dapr 为 HTTP 和 gRPC 生成和传播的特定跟踪上下文标头。&lt;/p>
&lt;h3 id="跟踪上下文-http-标头格式">跟踪上下文 HTTP 标头格式&lt;/h3>
&lt;p>当将HTTP响应的跟踪上下文头传播到HTTP请求时，您需要复制这些标头。&lt;/p>
&lt;h4 id="traceparent-标头">Traceparent 标头&lt;/h4>
&lt;p>The traceparent header represents the incoming request in a tracing system in a common format, understood by all vendors. 下面是 Traceparent 标头的示例。&lt;/p>
&lt;p>&lt;code>traceparent: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01&lt;/code>&lt;/p>
&lt;p>Traceparent 字段的详细信息 [ 在这里 ](https://www. w3. org/Tr/trace-context/#traceparent-header)。&lt;/p>
&lt;h4 id="tracestate-标头">Tracestate 标头&lt;/h4>
&lt;p>Tracestate 标头包含特定于供应商格式的父级（parent）。&lt;/p>
&lt;p>&lt;code>tracestate: congo=t61rcWkgMzE&lt;/code>&lt;/p>
&lt;p>Tracestate 字段的详细信息 &lt;a href="https://www.w3.org/TR/trace-context/#tracestate-header"> 在这里 &lt;/a> 。&lt;/p>
&lt;h3 id="跟踪上下文-grpc-标头格式">跟踪上下文 gRPC 标头格式&lt;/h3>
&lt;p>在 gRPC API 调用中，跟踪上下文通过 &lt;code>grpc-trace-bin&lt;/code> 标头传递。&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/tracing/open-telemetry-collector/">操作方法：使用 OpenTelemetry Collector 为分布式跟踪安装应用程序洞察器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/tracing/supported-tracing-backends/zipkin/">操作方法: 为分布式跟踪安装 Zipkin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.w3.org/TR/trace-context/">W3C 跟踪上下文规范&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dapr/quickstarts/tree/master/observability">可观测性示例&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: How-To : 使用 Dapr 的 W3C 跟踪上下文</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/w3c-tracing-howto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/w3c-tracing-howto/</guid><description>
&lt;h1 id="如何使用跟踪上下文">如何使用跟踪上下文&lt;/h1>
&lt;p>Dapr 使用 W3C 跟踪上下文对服务调用和 pub/sub 消息传递进行分布式跟踪。 Dapr 承担生成和传播跟踪上下文信息的所有繁重工作，并且很少需要传播或创建跟踪上下文。 首先阅读 &lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/">W3C 分布式跟踪&lt;/a> 这篇文章中的方案 ，以了解您是否需要传播或创建跟踪上下文。&lt;/p>
&lt;p>若要查看跟踪，请阅读 &lt;a href="https://dapr-cn.github.io/operations/monitoring/tracing/">如何诊断与跟踪&lt;/a> 文章。&lt;/p>
&lt;h2 id="如何从响应中检索跟踪上下文">如何从响应中检索跟踪上下文&lt;/h2>
&lt;p>&lt;code>注意: 在 Dapr SDK 中没有用于传播和检索跟踪上下文的辅助方法。 您需要使用 http/gRPC 客户端通过 http 标头和 gRPC 元数据传播和检索跟踪标头。&lt;/code>&lt;/p>
&lt;h3 id="在-go-中检索跟踪上下文">在 Go 中检索跟踪上下文&lt;/h3>
&lt;h4 id="对于-http-调用">对于 HTTP 调用&lt;/h4>
&lt;p>OpenCensus Go SDK provides &lt;a href="https://pkg.go.dev/go.opencensus.io/plugin/ochttp/propagation/tracecontext?tab=doc">ochttp&lt;/a> package that provides methods to retrieve trace context from http response.&lt;/p>
&lt;p>若要从 HTTP 响应检索跟踪上下文，可以使用 ：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tracecontext&lt;/span>.&lt;span style="color:#a6e22e">HTTPFormat&lt;/span>{}
&lt;span style="color:#a6e22e">sc&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">SpanContextFromRequest&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对于grpc-调用">对于gRPC 调用&lt;/h4>
&lt;p>在 gRPC 调用返回时检索追踪上下文头部， 您可以将响应头的引用作为gRPC 调用选项传递给响应头，这个选项包含响应头：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">responseHeader&lt;/span> &lt;span style="color:#a6e22e">metadata&lt;/span>.&lt;span style="color:#a6e22e">MD&lt;/span>
&lt;span style="color:#75715e">// Call the InvokeService with call option
&lt;/span>&lt;span style="color:#75715e">// grpc.Header(&amp;amp;responseHeader)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">InvokeService&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">InvokeServiceRequest&lt;/span>{
&lt;span style="color:#a6e22e">Id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;client&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Message&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">commonv1pb&lt;/span>.&lt;span style="color:#a6e22e">InvokeRequest&lt;/span>{
&lt;span style="color:#a6e22e">Method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MyMethod&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">ContentType&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;text/plain; charset=UTF-8&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">any&lt;/span>.&lt;span style="color:#a6e22e">Any&lt;/span>{&lt;span style="color:#a6e22e">Value&lt;/span>: []byte(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>)},
},
},
&lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">responseHeader&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在-c-中检索跟踪上下文">在 C# 中检索跟踪上下文&lt;/h3>
&lt;h4 id="对于-http-调用-1">对于 HTTP 调用&lt;/h4>
&lt;p>要从 HTTP 响应检索跟踪上下文，可以使用 &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.headers.httpresponseheaders?view=netcore-3.1">.NET API&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">// client is HttpClient. req is HttpRequestMessage
&lt;/span>&lt;span style="color:#75715e">&lt;/span>HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.SendAsync(req);
IEnumerable&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; values1, values2;
&lt;span style="color:#66d9ef">string&lt;/span> traceparentValue = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">string&lt;/span> tracestateValue = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (response.Headers.TryGetValues(&lt;span style="color:#e6db74">&amp;#34;traceparent&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">out&lt;/span> values1))
{
traceparentValue = values1.FirstOrDefault();
}
&lt;span style="color:#66d9ef">if&lt;/span> (response.Headers.TryGetValues(&lt;span style="color:#e6db74">&amp;#34;tracestate&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">out&lt;/span> values2))
{
tracestateValue = values2.FirstOrDefault();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对于grpc-调用-1">对于gRPC 调用&lt;/h4>
&lt;p>要从 gRPC 响应检索跟踪上下文，可以使用 &lt;a href="https://www.nuget.org/packages/Grpc.Net.Client">Grpc.Net.Client&lt;/a> ResponseHeadersAsync 方法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">// client is Dapr proto client
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> var call = client.InvokeServiceAsync(req);
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> call.ResponseAsync;
&lt;span style="color:#66d9ef">var&lt;/span> headers = &lt;span style="color:#66d9ef">await&lt;/span> call.ResponseHeadersAsync();
&lt;span style="color:#66d9ef">var&lt;/span> tracecontext = headers.First(e =&amp;gt; e.Key == &lt;span style="color:#e6db74">&amp;#34;grpc-trace-bin&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有关使用 .NET 客户端调用 gRPC 服务的其他细节 &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/grpc/client?view=aspnetcore-3.1">在此处&lt;/a>。&lt;/p>
&lt;h2 id="如何在请求中传播跟踪上下文">如何在请求中传播跟踪上下文&lt;/h2>
&lt;p>&lt;code>注意: 在 Dapr SDK 中没有用于传播和检索跟踪上下文的辅助方法。 您需要使用 http/gRPC 客户端通过 http 标头和 gRPC 元数据传播和检索跟踪标头。&lt;/code>&lt;/p>
&lt;h3 id="在-go-中传递跟踪上下文">在 Go 中传递跟踪上下文&lt;/h3>
&lt;h4 id="对于-http-调用-2">对于 HTTP 调用&lt;/h4>
&lt;p>OpenCensus Go SDK 提供 &lt;a href="https://pkg.go.dev/go.opencensus.io/plugin/ochttp/propagation/tracecontext?tab=doc">ochttp&lt;/a> 包，提供在 http 请求中附加跟踪上下文的方法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tracecontext&lt;/span>.&lt;span style="color:#a6e22e">HTTPFormat&lt;/span>{}
&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http://localhost:3500/v1.0/invoke/mathService/method/api/v1/add&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#a6e22e">traceContext&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">SpanContext&lt;/span>()
&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">SpanContextToRequest&lt;/span>(&lt;span style="color:#a6e22e">traceContext&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对于grpc-调用-2">对于gRPC 调用&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">traceContext&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">SpanContext&lt;/span>()
&lt;span style="color:#a6e22e">traceContextBinary&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">propagation&lt;/span>.&lt;span style="color:#a6e22e">Binary&lt;/span>(&lt;span style="color:#a6e22e">traceContext&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，可以通过 &lt;a href="https://google.golang.org/grpc/metadata">gRPC 元数据&lt;/a> 到 &lt;code>grpc-trace-bin&lt;/code> 头传递跟踪上下文。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ctx&lt;/span> = &lt;span style="color:#a6e22e">metadata&lt;/span>.&lt;span style="color:#a6e22e">AppendToOutgoingContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;grpc-trace-bin&amp;#34;&lt;/span>, string(&lt;span style="color:#a6e22e">traceContextBinary&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，您可以在后续的 Dapr gRPC 调用中继续传递此go上下文 &lt;code>ctx&lt;/code> 作为第一个参数。 例如， &lt;code>InvokeService&lt;/code>，上下文在第一个参数中传递。&lt;/p>
&lt;h3 id="在-c-中传递跟踪上下文">在 C 中传递跟踪上下文&lt;/h3>
&lt;h4 id="对于-http-调用-3">对于 HTTP 调用&lt;/h4>
&lt;p>要在 HTTP 请求中传递跟踪上下文，可以使用 &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.headers.httprequestheaders?view=netcore-3.1">.NET API&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">// client is HttpClient. req is HttpRequestMessage
&lt;/span>&lt;span style="color:#75715e">&lt;/span>req.Headers.Add(&lt;span style="color:#e6db74">&amp;#34;traceparent&amp;#34;&lt;/span>, traceparentValue);
req.Headers.Add(&lt;span style="color:#e6db74">&amp;#34;tracestate&amp;#34;&lt;/span>, tracestateValue);
HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.SendAsync(req);
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对于grpc-调用-3">对于gRPC 调用&lt;/h4>
&lt;p>要在 gRPC 调用元数据中传递跟踪上下文，您可以使用 &lt;a href="https://www.nuget.org/packages/Grpc.Net.Client">Grpc.Net.Client&lt;/a> ResponseHeadersAsync 方法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">// client is Dapr.Client.Autogen.Grpc.v1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> headers = &lt;span style="color:#66d9ef">new&lt;/span> Metadata();
headers.Add(&lt;span style="color:#e6db74">&amp;#34;grpc-trace-bin&amp;#34;&lt;/span>, tracecontext);
&lt;span style="color:#66d9ef">using&lt;/span> var call = client.InvokeServiceAsync(req, headers);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有关使用 .NET 客户端调用 gRPC 服务的其他细节 &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/grpc/client?view=aspnetcore-3.1">在此处&lt;/a>。&lt;/p>
&lt;h2 id="如何创建跟踪上下文">如何创建跟踪上下文&lt;/h2>
&lt;p>您可以使用推荐的 OpenCensus SDK 创建跟踪上下文。 OpenCensus 支持多种不同的编程语言。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">语言&lt;/th>
&lt;th style="text-align:center">SDK&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Go&lt;/td>
&lt;td style="text-align:center">&lt;a href="https://pkg.go.dev/go.opencensus.io?tab=overview">Link&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Java&lt;/td>
&lt;td style="text-align:center">&lt;a href="https://www.javadoc.io/doc/io.opencensus/opencensus-api/latest/index.html">Link&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">C#&lt;/td>
&lt;td style="text-align:center">&lt;a href="https://github.com/census-instrumentation/opencensus-csharp/">Link&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">C++&lt;/td>
&lt;td style="text-align:center">&lt;a href="https://github.com/census-instrumentation/opencensus-cpp">Link&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Node.js&lt;/td>
&lt;td style="text-align:center">&lt;a href="https://github.com/census-instrumentation/opencensus-node">Link&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Python&lt;/td>
&lt;td style="text-align:center">&lt;a href="https://census-instrumentation.github.io/opencensus-python/trace/api/index.html">Link&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="在-go-中创建跟踪上下文">在 Go 中创建跟踪上下文&lt;/h3>
&lt;h4 id="1-1-获取-opencensus-go-sdk">1. 1. 获取 OpenCensus Go SDK&lt;/h4>
&lt;p>先决条件:OpenCensus Go 库需要 Go 1.8 或更高版本。 有关安装的详细信息，请访问 &lt;a href="https://pkg.go.dev/go.opencensus.io?tab=overview">这里&lt;/a>。&lt;/p>
&lt;h4 id="2-2-导入包-goopenensussiotrace">2. 2. 导入包 &amp;ldquo;go.openensuss.io/trace&amp;rdquo;&lt;/h4>
&lt;p>&lt;code>$ go get -u go.opencensus.io&lt;/code>&lt;/p>
&lt;h4 id="3-3-创建跟踪上下文">3. 3. 创建跟踪上下文&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">StartSpan&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cache.Get&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>()
&lt;span style="color:#75715e">// Do work to get from cache.
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在-java-中创建跟踪上下文">在 Java 中创建跟踪上下文&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Scope ss &lt;span style="color:#f92672">=&lt;/span> TRACER&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">spanBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cache.Get&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">startScopedSpan&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在-python-中创建跟踪上下文">在 Python 中创建跟踪上下文&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">with&lt;/span> tracer&lt;span style="color:#f92672">.&lt;/span>span(name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cache.get&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> span:
&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在-nodejs-中创建跟踪上下文">在 NodeJS 中创建跟踪上下文&lt;/h3>
&lt;pre>&lt;code class="language-nodejs" data-lang="nodejs">tracer.startRootSpan({name: 'cache.Get'}, rootSpan =&amp;gt; {
});
&lt;/code>&lt;/pre>&lt;h3 id="在-c-中创建跟踪上下文">在 C++ 中创建跟踪上下文&lt;/h3>
&lt;pre>&lt;code class="language-cplusplus" data-lang="cplusplus">opencensus::trace::Span span = opencensus::trace::Span::StartSpan(
&amp;quot;cache.Get&amp;quot;, nullptr, {&amp;amp;sampler});
&lt;/code>&lt;/pre>&lt;h3 id="在-c-中创建跟踪上下文-1">在 C# 中创建跟踪上下文&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> span = tracer.SpanBuilder(&lt;span style="color:#e6db74">&amp;#34;cache.Get&amp;#34;&lt;/span>).StartScopedSpan();
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="把它和一个go-示例一起放在一起">把它和一个Go 示例一起放在一起&lt;/h2>
&lt;h3 id="在-dapr-中配置跟踪">在 Dapr 中配置跟踪&lt;/h3>
&lt;p>首先需要在 Dapr 中启用跟踪配置。 提到此步骤是为了完整地从启用跟踪到调用具有跟踪上下文的 Dapr。 创建一个部署配置 yaml ，例如 &lt;code>appconfig.yaml&lt;/code> 具有以下配置。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">appconfig&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Kubernetes中，您可以应用以下配置 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f appconfig.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在部署 YAML 中设置以下跟踪注释。 您可以在示例 &lt;a href="https://dapr-cn.github.io/operations/configuration/grpc/">grpc app&lt;/a> 部署 yaml 中添加以下注释。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">dapr.io/config&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;appconfig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用跟踪上下文调用-dapr">使用跟踪上下文调用 dapr&lt;/h3>
&lt;p>Dapr 包含生成跟踪上下文，您无需明确创建跟踪上下文。&lt;/p>
&lt;p>但是，如果您选择显式传递跟踪上下文，那么 Dapr 将使用被传递的跟踪上下文并在整个 HTTP/GRPC 调用中传播。&lt;/p>
&lt;p>使用示例中的 &lt;a href="https://dapr-cn.github.io/operations/configuration/grpc/">grpc app&lt;/a> 并将这全部放在一起，以下步骤显示如何创建 Dapr 客户端并调用传递跟踪上下文的 InvokeService 方法 :&lt;/p>
&lt;p>其他代码片段和详细信息，请参阅 &lt;a href="https://dapr-cn.github.io/operations/configuration/grpc/">grpc 应用程序&lt;/a>。&lt;/p>
&lt;h3 id="1-1-导入包">1. 1. 导入包&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#a6e22e">pb&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/dapr/go-sdk/dapr&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;go.opencensus.io/trace&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;go.opencensus.io/trace/propagation&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;google.golang.org/grpc/metadata&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-2-创建客户端">2. 2. 创建客户端&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#75715e">// Get the Dapr port and create a connection
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">daprPort&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;DAPR_GRPC_PORT&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">daprAddress&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;localhost:%s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">daprPort&lt;/span>)
&lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">Dial&lt;/span>(&lt;span style="color:#a6e22e">daprAddress&lt;/span>, &lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">WithInsecure&lt;/span>())
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;span style="color:#75715e">// Create the client
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">NewDaprClient&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-3-使用跟踪上下文调用-invokeservice-方法">3. 3. 使用跟踪上下文调用 InvokeService 方法&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#75715e">// Create the Trace Context
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span> , &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">StartSpan&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#e6db74">&amp;#34;InvokeService&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// The returned context can be used to keep propagating the newly created span in the current context.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// In the same process, context.Context is used to propagate trace context.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// Across the process, use the propagation format of Trace Context to propagate trace context.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">traceContext&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">propagation&lt;/span>.&lt;span style="color:#a6e22e">Binary&lt;/span>(&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">SpanContext&lt;/span>())
&lt;span style="color:#a6e22e">ctx&lt;/span> = &lt;span style="color:#a6e22e">metadata&lt;/span>.&lt;span style="color:#a6e22e">NewOutgoingContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, string(&lt;span style="color:#a6e22e">traceContext&lt;/span>))
&lt;span style="color:#75715e">// Pass the trace context
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">InvokeService&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">InvokeServiceRequest&lt;/span>{
&lt;span style="color:#a6e22e">Id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;client&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Message&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">commonv1pb&lt;/span>.&lt;span style="color:#a6e22e">InvokeRequest&lt;/span>{
&lt;span style="color:#a6e22e">Method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MyMethod&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">ContentType&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;text/plain; charset=UTF-8&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">any&lt;/span>.&lt;span style="color:#a6e22e">Any&lt;/span>{&lt;span style="color:#a6e22e">Value&lt;/span>: []byte(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>)},
},
})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在，您可以使用相同的跟踪上下文将应用中和跨服务的调用与 Dapr 关联。&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/concepts/observability-concept/">可观察性概念&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/">用于分布式跟踪的 W3C 跟踪上下文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/tracing/open-telemetry-collector/">如何使用 OpenTelemetry 为分布式跟踪设置 Application Insights&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/tracing/supported-tracing-backends/zipkin/">如何设置 Zipkin 以进行分布式跟踪&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.w3.org/TR/trace-context/">W3C 跟踪上下文规范&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dapr/quickstarts/tree/master/observability">可观察性 快速开始&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>