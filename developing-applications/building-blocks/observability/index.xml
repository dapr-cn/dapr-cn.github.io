<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr Docs – Observability</title><link>https://docs.dapr.io/developing-applications/building-blocks/observability/</link><description>Recent content in Observability on Dapr Docs</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><atom:link href="https://docs.dapr.io/developing-applications/building-blocks/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Distributed tracing</title><link>https://docs.dapr.io/developing-applications/building-blocks/observability/tracing-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/observability/tracing-overview/</guid><description>
&lt;p>Dapr uses the Zipkin protocol for distributed traces and metrics collection. Due to the ubiquity of the Zipkin protocol, many backends are supported out of the box, for examples &lt;a href="https://cloud.google.com/stackdriver">Stackdriver&lt;/a>, &lt;a href="https://zipkin.io">Zipkin&lt;/a>, &lt;a href="https://newrelic.com">New Relic&lt;/a> and others. Combining with the OpenTelemetry Collector, Dapr can export traces to many other backends including but not limted to &lt;a href="https://azure.microsoft.com/en-us/services/monitor/">Azure Monitor&lt;/a>, &lt;a href="https://www.datadoghq.com">Datadog&lt;/a>, &lt;a href="https://www.instana.com">Instana&lt;/a>, &lt;a href="https://www.jaegertracing.io/">Jaeger&lt;/a>, and &lt;a href="https://www.signalfx.com/">SignalFX&lt;/a>.&lt;/p>
&lt;img src="https://docs.dapr.io/images/tracing.png" width=600>
&lt;h2 id="tracing-design">Tracing design&lt;/h2>
&lt;p>Dapr adds a HTTP/gRPC middleware to the Dapr sidecar. The middleware intercepts all Dapr and application traffic and automatically injects correlation IDs to trace distributed transactions. This design has several benefits:&lt;/p>
&lt;ul>
&lt;li>No need for code instrumentation. All traffic is automatically traced with configurable tracing levels.&lt;/li>
&lt;li>Consistent tracing behavior across microservices. Tracing is configured and managed on Dapr sidecar so that it remains consistent across services made by different teams and potentially written in different programming languages.&lt;/li>
&lt;li>Configurable and extensible. By leveraging the Zipkin API and the OpenTelemetry Collector, Dapr tracing can be configured to work with popular tracing backends, including custom backends a customer may have.&lt;/li>
&lt;li>You can define and enable multiple exporters at the same time.&lt;/li>
&lt;/ul>
&lt;h2 id="w3c-correlation-id">W3C Correlation ID&lt;/h2>
&lt;p>Dapr uses the standard W3C Trace Context headers. For HTTP requests, Dapr uses &lt;code>traceparent&lt;/code> header. For gRPC requests, Dapr uses &lt;code>grpc-trace-bin&lt;/code> header. When a request arrives without a trace ID, Dapr creates a new one. Otherwise, it passes the trace ID along the call chain.&lt;/p>
&lt;p>Read &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/observability/w3c-tracing/">W3C distributed tracing&lt;/a> for more background on W3C Trace Context.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>Dapr uses probabilistic sampling. The sample rate defines the probability a tracing span will be sampled and can have a value between 0 and 1 (inclusive). The default sample rate is 0.0001 (i.e. 1 in 10,000 spans is sampled).&lt;/p>
&lt;p>To change the default tracing behavior, use a configuration file (in self hosted mode) or a Kubernetes configuration object (in Kubernetes mode). For example, the following configuration object changes the sample rate to 1 (i.e. every span is sampled), and sends trace using Zipkin protocol to the Zipkin server at &lt;a href="http://zipkin.default.svc.cluster.local">http://zipkin.default.svc.cluster.local&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">tracing&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://zipkin.default.svc.cluster.local:9411/api/v2/spans&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: Changing &lt;code>samplingRate&lt;/code> to 0 disables tracing altogether.&lt;/p>
&lt;p>See the &lt;a href="#references">References&lt;/a> section for more details on how to configure tracing on local environment and Kubernetes environment.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/operations/monitoring/tracing/open-telemetry-collector/">How-To: Setup Application Insights for distributed tracing with OpenTelemetry Collector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/operations/monitoring/tracing/supported-tracing-backends/zipkin/">How-To: Set up Zipkin for distributed tracing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/observability/w3c-tracing/">W3C distributed tracing&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: W3C trace context</title><link>https://docs.dapr.io/developing-applications/building-blocks/observability/w3c-tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/observability/w3c-tracing/</guid><description/></item><item><title>Developing-Applications: Sidecar health</title><link>https://docs.dapr.io/developing-applications/building-blocks/observability/sidecar-health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/building-blocks/observability/sidecar-health/</guid><description>
&lt;p>Dapr provides a way to determine it&amp;rsquo;s health using an HTTP /healthz endpoint.
With this endpoint, the Dapr process, or sidecar, can be probed for its health and hence determine its readiness and liveness. See &lt;a href="https://docs.dapr.io/reference/api/health_api/">health API &lt;/a>&lt;/p>
&lt;p>The Dapr &lt;code>/healthz&lt;/code> endpoint can be used by health probes from the application hosting platform. This topic describes how Dapr integrates with probes from different hosting platforms.&lt;/p>
&lt;p>As a user, when deploying Dapr to a hosting platform (for example Kubernetes), the Dapr health endpoint is automatically configured for you. There is nothing you need to configure.&lt;/p>
&lt;p>Note: Dapr actors also have a health API endpoint where Dapr probes the application for a response to a signal from Dapr that the actor application is healthy and running. See &lt;a href="https://docs.dapr.io/reference/api/actors_api/#health-check">actor health API&lt;/a>&lt;/p>
&lt;h2 id="health-endpoint-integration-with-kubernetes">Health endpoint: Integration with Kubernetes&lt;/h2>
&lt;p>Kubernetes uses &lt;em>readiness&lt;/em> and &lt;em>liveness&lt;/em> probes to determines the health of the container.&lt;/p>
&lt;p>The kubelet uses liveness probes to know when to restart a container.
For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite having bugs.&lt;/p>
&lt;p>The kubelet uses readiness probes to know when a container is ready to start accepting traffic. A pod is considered ready when all of its containers are ready. One use of this readiness signal is to control which Pods are used as backends for Kubernetes services. When a pod is not ready, it is removed from Kubernetes service load balancers.&lt;/p>
&lt;p>When integrating with Kubernetes, the Dapr sidecar is injected with a Kubernetes probe configuration telling it to use the Dapr healthz endpoint. This is done by the &lt;code>Sidecar Injector&lt;/code> system service. The integration with the kubelet is shown in the diagram below.&lt;/p>
&lt;img src="https://docs.dapr.io/images/security-mTLS-dapr-system-services.png" width=600>
&lt;h3 id="how-to-configure-a-liveness-probe-in-kubernetes">How to configure a liveness probe in Kubernetes&lt;/h3>
&lt;p>In the pod configuration file, the liveness probe is added in the containers spec section as shown below :&lt;/p>
&lt;pre>&lt;code> livenessProbe:
httpGet:
path: /healthz
port: 8080
initialDelaySeconds: 3
periodSeconds: 3
&lt;/code>&lt;/pre>&lt;p>In the above &lt;em>example&lt;/em>, the &lt;code>periodSeconds&lt;/code> field specifies that the kubelet should perform a liveness probe every 3 seconds. The &lt;code>initialDelaySeconds&lt;/code> field tells the kubelet that it should wait 3 seconds before performing the first probe. To perform a probe, the kubelet sends an HTTP GET request to the server that is running in the container and listening on port 8080 in this example. If the handler for the server’s /healthz path returns a success code, the kubelet considers the container to be alive and healthy. If the handler returns a failure code, the kubelet kills the container and restarts it.&lt;/p>
&lt;p>Any code greater than or equal to 200 and less than 400 indicates success. Any other code indicates failure.&lt;/p>
&lt;h3 id="how-to-configure-a-readiness-probe-in-kubernetes">How to configure a readiness probe in Kubernetes&lt;/h3>
&lt;p>Readiness probes are configured similarly to liveness probes. The only difference is that you use the &lt;code>readinessProbe&lt;/code> field instead of the &lt;code>livenessProbe&lt;/code> field.&lt;/p>
&lt;pre>&lt;code>readinessProbe:
httpGet:
path: /healthz
port: 8080
initialDelaySeconds: 3
periodSeconds: 3
&lt;/code>&lt;/pre>&lt;h3 id="how-the-dapr-sidecar-health-endpoint-is-configured-with-kubernetes">How the Dapr sidecar health endpoint is configured with Kubernetes&lt;/h3>
&lt;p>As mentioned above, this configuration is done automatically by the Sidecar Injector service. This section describes the specific values that are set on the liveness and readiness probes.&lt;/p>
&lt;p>Dapr has its HTTP health endpoint &lt;code>/v1.0/healthz&lt;/code> on port 3500, This can be used with Kubernetes for readiness and liveness probe. When the Dapr sidecar is injected , the readiness and liveness probes are configured in the pod configuration file with the following values.&lt;/p>
&lt;pre>&lt;code>livenessProbe:
httpGet:
path: v1.0/healthz
port: 3500
initialDelaySeconds: 5
periodSeconds: 10
timeoutSeconds : 5
failureThreshold : 3
readinessProbe:
httpGet:
path: v1.0/healthz
port: 3500
initialDelaySeconds: 5
periodSeconds: 10
timeoutSeconds : 5
failureThreshold: 3
&lt;/code>&lt;/pre>&lt;p>For more information refer to;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/reference/api/health_api/"> Endpoint health API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/reference/api/actors_api/#health-check">Actor health API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">Kubernetes probe configuration parameters&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>