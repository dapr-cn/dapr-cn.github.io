<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – 可观测性</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/</link><description>Recent content in 可观测性 on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dapr-cn.github.io/developing-applications/building-blocks/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: 分布式跟踪</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/observability/tracing/</guid><description>
&lt;p>Dapr 使用 OpenTelemetry（以前称为 OpenCensus）进行分布式跟踪和指标收集。 OpenTelemetry 支持各种后端，包括 &lt;a href="https://azure.microsoft.com/en-us/services/monitor/">Azure Monitor&lt;/a>、 &lt;a href="https://www.datadoghq.com">Datadog&lt;/a>、 &lt;a href="https://www.instana.com">Instana&lt;/a>、 &lt;a href="https://www.jaegertracing.io/">Jaeger&lt;/a>、 &lt;a href="https://www.signalfx.com/">Signal Fx&lt;/a>、 &lt;a href="https://cloud.google.com/stackdriver">Stackdriver&lt;/a>、 &lt;a href="https://zipkin.io">Zipkin&lt;/a> 等。&lt;/p>
&lt;img src="https://dapr-cn.github.io/images/tracing.png" width=600>
&lt;h2 id="跟踪设计">跟踪设计&lt;/h2>
&lt;p>Dapr 将 HTTP/GRPC Middleware 添加到 Dapr sidecar。 Middleware 拦截所有 Dapr 和应用程序流量，并自动注入关联ID以跟踪分布式事务。 此设计有如下优点：&lt;/p>
&lt;ul>
&lt;li>无需代码检测。 自动跟踪所有流量（跟踪级别可配置）。&lt;/li>
&lt;li>跨微服务的一致跟踪行为。 跟踪是在 Dapr sidecar 上进行配置和管理的，因此它可以在服务之间保持一致，这些服务由不同的团队提供，并可能以不同的编程语言编写。&lt;/li>
&lt;li>可配置和可扩展。 通过利用 OpenTelmetry，可以将 Dapr 追踪配置为与流行的追踪后端一起使用，包括客户可能具有的自定义后端。&lt;/li>
&lt;li>OpenTelemetry Exporter被定义为 Dapr 组件的一等公民。 可以同时定义和启用多个Exporter。&lt;/li>
&lt;/ul>
&lt;h2 id="w3c-correlation-id">W3C Correlation ID&lt;/h2>
&lt;p>Dapr 使用标准的 W3C 跟踪上下文标头。 对于 HTTP 请求，Dapr 使用 &lt;code>traceparent&lt;/code> 标头。 对于 gRPC 请求，Dapr 使用 &lt;code>grpc-trace-bin&lt;/code> 标头。 当请求到达时，如果没有跟踪 ID ，Dapr 将创建一个新的跟踪 ID。 否则，它将沿调用链传递跟踪 ID。&lt;/p>
&lt;p>阅读 &lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/">W3C 分布式跟踪&lt;/a> ，了解更多关于 W3C Trace Context 的背景.&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>Dapr 使用 openCensus 定义的 &lt;a href="https://opencensus.io/tracing/sampling/probabilistic/">概率采样&lt;/a> 。 采样率定义跟踪 Span 采样的概率，其值可以在0和1之间（包括）。 默认采样率是0.0001（即每10000个span中采样一个）。&lt;/p>
&lt;p>若要更改默认的跟踪行为，请使用配置文件（在自托管模式下）或 Kubernetes 配置对象（在 Kubernetes 模式下）。 例如，以下配置对象将采样率更改为 1（即每个Span都采样），并使用 Zipkin 协议将跟踪发送到位于 &lt;a href="http://zipkin.default.svc.cluster.local">http://zipkin.default.svc.cluster.local&lt;/a> 的 Zipkin 服务器：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">tracing&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">zipkin&lt;/span>:
&lt;span style="color:#f92672">endpointAddress&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://zipkin.default.svc.cluster.local:9411/api/v2/spans&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>samplingRate&lt;/code> 更改为 0 将完全禁用追踪。&lt;/p>
&lt;p>关于如何在本地环境和 Kubernetes 环境中配置追踪的更多细节，请参阅 &lt;a href="#references">参考文档&lt;/a> 部分。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/open-telemetry-collector/">操作方法：使用 OpenTelemetry Collector 为分布式跟踪安装应用程序洞察器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/zipkin/">操作方法: 为分布式跟踪安装 Zipkin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/">W3C 分布式跟踪&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: W3C 跟踪上下文</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/observability/w3c-tracing/</guid><description/></item><item><title>Developing-Applications: 日志</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/observability/logs/</guid><description>
&lt;p>Dapr以纯文本形式或JSON格式生成结构化日志到标准输出。 默认情况下，所有 Dapr 进程 (运行时和系统服务) 都以纯文本写入控制台输出。 要启用 JSON 格式的日志，您需要在运行 Dapr 进程时添加 &lt;code>--log-as-json&lt;/code> 命令标志。&lt;/p>
&lt;p>如果要使用搜索引擎 ( 例如 Elastic Search 或 Azure Monitor ) 来搜索日志，那么建议使用 JSON 格式的日志，日志收集器和搜索引擎可以使用内置 JSON 解析器进行解析。&lt;/p>
&lt;h2 id="日志架构">日志架构&lt;/h2>
&lt;p>Dapr 基于以下架构生成日志。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>time&lt;/td>
&lt;td>ISO8601 时间戳&lt;/td>
&lt;td>&lt;code>2011-10-05T14:48:00.000Z&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>level&lt;/td>
&lt;td>日志级别 (info/warn/debug/error)&lt;/td>
&lt;td>&lt;code>info&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type&lt;/td>
&lt;td>日志类型&lt;/td>
&lt;td>&lt;code>log&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>msg&lt;/td>
&lt;td>日志消息&lt;/td>
&lt;td>&lt;code>hello dapr!&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scope&lt;/td>
&lt;td>日志记录范围&lt;/td>
&lt;td>&lt;code>dapr.runtime&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>instance&lt;/td>
&lt;td>容器名称&lt;/td>
&lt;td>&lt;code>dapr-pod-xxxxx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app_id&lt;/td>
&lt;td>Dapr 应用 ID&lt;/td>
&lt;td>&lt;code>dapr-app&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ver&lt;/td>
&lt;td>Dapr 运行时版本&lt;/td>
&lt;td>&lt;code>0.5.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="纯文本和-json-格式的日志">纯文本和 JSON 格式的日志&lt;/h2>
&lt;ul>
&lt;li>纯文本日志示例&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2020-03-11T17:08:48.303776-07:00&amp;#34;&lt;/span> level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;starting Dapr Runtime -- version 0.5.0-rc.2 -- commit v0.3.0-rc.0-155-g5dfcf2e&amp;#34;&lt;/span> instance&lt;span style="color:#f92672">=&lt;/span>dapr-pod-xxxx scope&lt;span style="color:#f92672">=&lt;/span>dapr.runtime type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>0.5.0-rc.2
time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2020-03-11T17:08:48.303913-07:00&amp;#34;&lt;/span> level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;log level set to: info&amp;#34;&lt;/span> instance&lt;span style="color:#f92672">=&lt;/span>dapr-pod-xxxx scope&lt;span style="color:#f92672">=&lt;/span>dapr.runtime type&lt;span style="color:#f92672">=&lt;/span>log ver&lt;span style="color:#f92672">=&lt;/span>0.5.0-rc.2
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>JSON 格式的日志示例&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{&lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;dapr-pod-xxxx&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;level&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;msg&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;starting Dapr Runtime -- version 0.5.0-rc.2 -- commit v0.3.0-rc.0-155-g5dfcf2e&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;scope&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;dapr.runtime&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;time&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2020-03-11T17:09:45.788005Z&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ver&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0.5.0-rc.2&amp;#34;&lt;/span>}
{&lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;dapr-pod-xxxx&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;level&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;msg&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;log level set to: info&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;scope&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;dapr.runtime&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;time&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2020-03-11T17:09:45.788075Z&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ver&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;0.5.0-rc.2&amp;#34;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置纯文本或-json-格式的日志">配置纯文本或 JSON 格式的日志&lt;/h2>
&lt;p>Dapr 支持纯文本和 JSON 格式的日志。 默认格式为纯文本。 如果要将纯文本与搜索引擎配合使用，那么将不需要更改任何配置选项。&lt;/p>
&lt;p>要使用 JSON 格式的日志，您需要在安装 Dapr 和部署应用程序时添加额外的配置。 建议使用 JSONformatted 日志，因为大多数日志收集器和搜索引擎可以使用内置解析器更容易解析 JSON 。&lt;/p>
&lt;h2 id="在-kubernetes-中配置日志格式">在 Kubernetes 中配置日志格式&lt;/h2>
&lt;p>以下步骤描述如何为 Kubernetes 配置 JSON 格式的日志&lt;/p>
&lt;h3 id="使用-helm-chart将-dapr-安装到集群">使用 Helm chart将 dapr 安装到集群&lt;/h3>
&lt;p>通过向 Helm 命令添加 &lt;code>--set global.logAsJson=true&lt;/code> 选项，可以为 Dapr 系统服务启用 JSON 格式的日志。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm install dapr dapr/dapr --namespace dapr-system --set global.logAsJson&lt;span style="color:#f92672">=&lt;/span>true
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="为-dapr-sidecars-启用-json-格式的日志">为 Dapr sidecars 启用 JSON 格式的日志&lt;/h3>
&lt;p>通过将 &lt;code>dapr.io/log-as-json: &amp;quot;true&amp;quot;&lt;/code> 注释添加到部署，可以在 Dapr sidecar-injector服务激活的 Dapr sidecars 中启用 JSON 格式的日志。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pythonapp&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pythonapp&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dapr.io/log-as-json&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="日志收集器">日志收集器&lt;/h2>
&lt;p>如果您在 Kubernetes 集群中运行 Dapr ，那么 &lt;a href="https://www.fluentd.org/">Fluentd&lt;/a> 是一个受欢迎的容器日志收集器。 您可以将 Fluentd 与 &lt;a href="https://docs.fluentd.org/parser/json">json 解析器插件&lt;/a> 一起使用，以解析 Dapr JSON 格式的日志。 此 &lt;a href="https://dapr-cn.github.io/operations/monitoring/fluentd/">how-to&lt;/a> 显示如何在您的集群中配置Fluntd 。&lt;/p>
&lt;p>如果您使用 Azure Kubernetes 服务 您可以使用默认OMS Agent和 Azure Monitor收集日志，而不需要安装 Fluentd。&lt;/p>
&lt;h2 id="搜索引擎">搜索引擎&lt;/h2>
&lt;p>如果使用 &lt;a href="https://www.fluentd.org/">Fluentd&lt;/a>，我们建议使用 Elastic Search 和 Kibana。 此 &lt;a href="https://dapr-cn.github.io/operations/monitoring/fluentd/">how-to&lt;/a> 演示如何在 Kubernetes 集群中设置 Elastic Search 和 Kibana 。&lt;/p>
&lt;p>如果您正在使用 Azure Kubernetes 服务，您可以使用 &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-overview">针对容器的Azure monitor&lt;/a> 而不会安装任何额外的监视工具。 也可以阅读 &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-onboard">如何为容器启用 Azure Monitor&lt;/a>&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/fluentd/">How-to : 设置 Fleuntd, Elastic search 和 Kibana&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/azure-monitor/">How-to：在 Azure Kubernetes 服务中设置Azure Monitor。&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: Metrics</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/observability/metrics/</guid><description>
&lt;p>Dapr exposes a &lt;a href="https://prometheus.io/">Prometheus&lt;/a> metrics endpoint that you can scrape to gain a greater understanding of how Dapr is behaving and to setup alerts for specific conditions.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>The metrics endpoint is enabled by default, you can disable it by passing the command line argument &lt;code>--enable-metrics=false&lt;/code> to Dapr system processes.&lt;/p>
&lt;p>The default metrics port is &lt;code>9090&lt;/code>. This can be overridden by passing the command line argument &lt;code>--metrics-port&lt;/code> to Daprd.&lt;/p>
&lt;p>To disable the metrics in the Dapr side car, you can use the &lt;code>metric&lt;/code> spec configuration and set &lt;code>enabled: false&lt;/code> to disable the metrics in the Dapr runtime.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">tracing&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">tracing&lt;/span>:
&lt;span style="color:#f92672">samplingRate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">metric&lt;/span>:
&lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="metrics">Metrics&lt;/h2>
&lt;p>Each Dapr system process emits Go runtime/process metrics by default and have their own metrics:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dapr/dapr/blob/master/docs/development/dapr-metrics.md">Dapr metric list&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/prometheus/">Howto: Run Prometheus locally&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/grafana/">Howto: Set up Prometheus and Grafana for metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/monitoring/azure-monitor/">Howto: Set up Azure monitor to search logs and collect metrics for Dapr&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: Sidecar health</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/observability/sidecar-health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/observability/sidecar-health/</guid><description>
&lt;p>Dapr provides a way to determine it&amp;rsquo;s health using an HTTP /healthz endpoint. With this endpoint, the Dapr process, or sidecar, can be probed for its health and hence determine its readiness and liveness. See &lt;a href="https://dapr-cn.github.io/reference/api/health_api/">health API &lt;/a>&lt;/p>
&lt;p>The Dapr &lt;code>/healthz&lt;/code> endpoint can be used by health probes from the application hosting platform. This topic describes how Dapr integrates with probes from different hosting platforms.&lt;/p>
&lt;p>As a user, when deploying Dapr to a hosting platform (for example Kubernetes), the Dapr health endpoint is automatically configured for you. There is nothing you need to configure.&lt;/p>
&lt;p>Note: Dapr actors also have a health API endpoint where Dapr probes the application for a response to a signal from Dapr that the actor application is healthy and running. See &lt;a href="https://dapr-cn.github.io/reference/api/actors_api/#health-check">actor health API&lt;/a>&lt;/p>
&lt;h2 id="health-endpoint-integration-with-kubernetes">Health endpoint: Integration with Kubernetes&lt;/h2>
&lt;p>Kubernetes uses &lt;em>readiness&lt;/em> and &lt;em>liveness&lt;/em> probes to determines the health of the container.&lt;/p>
&lt;p>The kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite having bugs.&lt;/p>
&lt;p>The kubelet uses readiness probes to know when a container is ready to start accepting traffic. A pod is considered ready when all of its containers are ready. One use of this readiness signal is to control which Pods are used as backends for Kubernetes services. When a pod is not ready, it is removed from Kubernetes service load balancers.&lt;/p>
&lt;p>When integrating with Kubernetes, the Dapr sidecar is injected with a Kubernetes probe configuration telling it to use the Dapr healthz endpoint. This is done by the &lt;code>Sidecar Injector&lt;/code> system service. The integration with the kubelet is shown in the diagram below.&lt;/p>
&lt;img src="https://dapr-cn.github.io/images/security-mTLS-dapr-system-services.png" width=600>
&lt;h3 id="how-to-configure-a-liveness-probe-in-kubernetes">How to configure a liveness probe in Kubernetes&lt;/h3>
&lt;p>In the pod configuration file, the liveness probe is added in the containers spec section as shown below :&lt;/p>
&lt;pre>&lt;code> livenessProbe:
httpGet:
path: /healthz
port: 8080
initialDelaySeconds: 3
periodSeconds: 3
&lt;/code>&lt;/pre>&lt;p>In the above &lt;em>example&lt;/em>, the &lt;code>periodSeconds&lt;/code> field specifies that the kubelet should perform a liveness probe every 3 seconds. The &lt;code>initialDelaySeconds&lt;/code> field tells the kubelet that it should wait 3 seconds before performing the first probe. To perform a probe, the kubelet sends an HTTP GET request to the server that is running in the container and listening on port 8080 in this example. If the handler for the server’s /healthz path returns a success code, the kubelet considers the container to be alive and healthy. If the handler returns a failure code, the kubelet kills the container and restarts it.&lt;/p>
&lt;p>Any code greater than or equal to 200 and less than 400 indicates success. Any other code indicates failure.&lt;/p>
&lt;h3 id="how-to-configure-a-readiness-probe-in-kubernetes">How to configure a readiness probe in Kubernetes&lt;/h3>
&lt;p>Readiness probes are configured similarly to liveness probes. The only difference is that you use the &lt;code>readinessProbe&lt;/code> field instead of the &lt;code>livenessProbe&lt;/code> field.&lt;/p>
&lt;pre>&lt;code>readinessProbe:
httpGet:
path: /healthz
port: 8080
initialDelaySeconds: 3
periodSeconds: 3
&lt;/code>&lt;/pre>&lt;h3 id="how-the-dapr-sidecar-health-endpoint-is-configured-with-kubernetes">How the Dapr sidecar health endpoint is configured with Kubernetes&lt;/h3>
&lt;p>As mentioned above, this configuration is done automatically by the Sidecar Injector service. This section describes the specific values that are set on the liveness and readiness probes.&lt;/p>
&lt;p>Dapr has its HTTP health endpoint &lt;code>/v1.0/healthz&lt;/code> on port 3500, This can be used with Kubernetes for readiness and liveness probe. When the Dapr sidecar is injected , the readiness and liveness probes are configured in the pod configuration file with the following values.&lt;/p>
&lt;pre>&lt;code>livenessProbe:
httpGet:
path: v1.0/healthz
port: 3500
initialDelaySeconds: 5
periodSeconds: 10
timeoutSeconds : 5
failureThreshold : 3
readinessProbe:
httpGet:
path: v1.0/healthz
port: 3500
initialDelaySeconds: 5
periodSeconds: 10
timeoutSeconds : 5
failureThreshold: 3
&lt;/code>&lt;/pre>&lt;p>For more information refer to;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/reference/api/health_api/"> Endpoint health API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/reference/api/actors_api/#health-check">Actor health API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">Kubernetes probe configuration parameters&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>