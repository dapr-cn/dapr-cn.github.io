<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – 发布 &amp; 订阅消息</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/</link><description>Recent content in 发布 &amp; 订阅消息 on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: 发布和订阅概述</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/pubsub-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/pubsub-overview/</guid><description>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">发布 / 订阅模式&lt;/a> 允许微服务使用消息相互通信。 &lt;strong>生产者&lt;/strong> 将消息发送至 &lt;strong>主题&lt;/strong> ，并且不知道接收消息的应用程序。 同样，一个 &lt;strong>消费者&lt;/strong> 将订阅该主题并收到它的消息，并且不知道什么应用程序生产了这些消息。 当您需要将微服务解偶时，此模式特别有用。&lt;/p>
&lt;p>Dapr 中的发布/订阅 API 提供至少一次（at-least-once）的保证，并与各种消息代理和队列系统集成。 应用程序的特定实现是可插入的，并在运行时在外部进行配置。 此方法可从应用程序中删除依赖项，因此使应用程序更具可移植性。 可用发布/订阅实现的完整列表 &lt;a href="https://dapr-cn.github.io/operations/components/setup-pubsub/supported-pubsub/">在这&lt;/a>。&lt;/p>
&lt;h2 id="功能">功能&lt;/h2>
&lt;h3 id="发布订阅-api">发布/订阅 API&lt;/h3>
&lt;p>发布 / 订阅 API 位于 &lt;a href="https://dapr-cn.github.io/reference/api/pubsub_api/">API 引用&lt;/a>。&lt;/p>
&lt;h3 id="消息格式">消息格式&lt;/h3>
&lt;p>要启用消息路由并为每个消息提供附加上下文，Dapr 使用 &lt;a href="https://github.com/cloudevents/spec/tree/v1.0"> CloudEvents 1.0 规范&lt;/a> 作为其消息格式。 使用 Dapr 应用程序发送的任何信息都将自动包入 Cloud Events 信封中，&lt;code>datacontenttype&lt;/code> 属性使用 &lt;code>Content-Type&lt;/code> 头部值。&lt;/p>
&lt;p>Dapr 实现以下 Cloud Events 字段:&lt;/p>
&lt;ul>
&lt;li>&lt;code>id&lt;/code>&lt;/li>
&lt;li>&lt;code>source&lt;/code>&lt;/li>
&lt;li>&lt;code>specversion&lt;/code>&lt;/li>
&lt;li>&lt;code>type&lt;/code>&lt;/li>
&lt;li>&lt;code>datacontenttype&lt;/code> (Optional)&lt;/li>
&lt;/ul>
&lt;p>下面的示例显示了 CloudEvent v1.0 中序列化为 JSON 的 XML 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;specversion&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;xml.message&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;https://example.com/message&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;subject&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Test XML Message&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;id-1234-5678-9101&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;time&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2020-09-23T06:23:21Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;datacontenttype&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;text/xml&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;&amp;lt;note&amp;gt;&amp;lt;to&amp;gt;User1&amp;lt;/to&amp;gt;&amp;lt;from&amp;gt;user2&amp;lt;/from&amp;gt;&amp;lt;message&amp;gt;hi&amp;lt;/message&amp;gt;&amp;lt;/note&amp;gt;&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>从 v0.9 版本开始，如果已发布的有效负载已采用 CloudEvent 格式，则 Dapr 不再将已发布的内容包装到 CloudEvent 中。&lt;/p>
&lt;/blockquote>
&lt;h3 id="订阅消息">订阅消息&lt;/h3>
&lt;p>Dapr 允许两种方法订阅主题: &lt;strong>声明式&lt;/strong>，在外部文件中定义订阅，以及 &lt;strong>编程方式&lt;/strong>，订阅在用户代码中定义。 要了解更多信息，请参阅 Dapr &lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/howto-publish-subscribe/#step-2-subscribe-to-topics">订阅主题&lt;/a>文档。&lt;/p>
&lt;h3 id="消息传递">消息传递&lt;/h3>
&lt;p>原则上，当订阅者在处理消息后应答非错误响应时，Dapr 认为成功发送了的消息。 为了进行更精细的控制，Dapr 的发布/订阅 API 还提供显式状态（在响应负载中定义），订阅者可以使用这些状态向 Dapr 指示特定的处理指令（例如， &lt;code>重试&lt;/code> 或 &lt;code>删除&lt;/code>）。 有关详细信息消息路由，请参阅 [Dapr 发布/订阅 API 文档](https://dapr-cn.github.io/reference/api/pubsub_api/#provide-routes-for-dapr-to-deliver-topic-events)&lt;/p>
&lt;h3 id="at-least-once-保证">At-Least-Once 保证&lt;/h3>
&lt;p>Dapr 保证消息传递 at-least-once 语义。 这意味着，当应用程序使用发布/订阅 API 将消息发布到主题时，Dapr 可确保此消息至少传递给每个订阅者一次。&lt;/p>
&lt;h3 id="多个消费组和多实例">多个消费组和多实例&lt;/h3>
&lt;p>多个消费组、多个应用程序实例使用一个消费组，这些都将由 Dapr 自动处理。 当同一个应用程序的多个实例(相同的 ID) 订阅主题时，Dapr 只将每个消息传递给该应用程序的一个实例。 同样，如果两个不同的应用程序 (不同的 ID) 订阅同一主题，那么 Dapr 将每个消息仅传递到每个应用程序的一个实例。&lt;/p>
&lt;h3 id="主题范围">主题范围&lt;/h3>
&lt;p>默认情况下，支持Dapr发布/订阅组件的所有主题 (例如，Kafka、Redis、RabbitMQ) 都可用于配置该组件的每个应用程序。 为了限制哪个应用程序可以发布或订阅主题，Dapr 提供了主题范围。 查看 &lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/pubsub-scopes/">发布/订阅主题范围&lt;/a> 了解更多信息。&lt;/p>
&lt;h2 id="下一步">下一步&lt;/h2>
&lt;ul>
&lt;li>阅读 &lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/howto-publish-subscribe/">发布和订阅&lt;/a>指南&lt;/li>
&lt;li>了解 &lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/pubsub-scopes/">发布/订阅范围&lt;/a>&lt;/li>
&lt;li>阅读 &lt;a href="https://dapr-cn.github.io/reference/api/pubsub_api/">API 引用&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: 指南：发布消息并订阅主题</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/howto-publish-subscribe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/howto-publish-subscribe/</guid><description>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Pub/Sub 是一个分布式系统中的常见模式，它有许多服务用于解偶、异步消息传递。 使用Pub/Sub，您可以在事件消费者与事件生产者解偶的场景中启用。&lt;/p>
&lt;p>Dapr 提供了一个可扩展的 Pub/Sub 系统（保证消息至少传递一次），允许开发者发布和订阅主题。 Dapr 提供了对底层系统的不同实现，并允许运维引入其偏爱的基础设施，例如 Redis Streams、Kafka 等。&lt;/p>
&lt;h2 id="步骤-1-设置-pubsub-组件">步骤 1: 设置 Pub/Sub 组件&lt;/h2>
&lt;p>第一步是设置 Pub/Sub 组件：&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-0-self-hosted-cli-tab" data-toggle="tab" href="#tabs-0-self-hosted-cli" role="tab"
aria-controls="tabs-0-self-hosted-cli" aria-selected="true">
Self-Hosted (CLI)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-0-kubernetes-tab" data-toggle="tab" href="#tabs-0-kubernetes" role="tab"
aria-controls="tabs-0-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active" id="tabs-0-self-hosted-cli" role="tabpanel" aria-labelled-by="tabs-0-self-hosted-cli-tab">
&lt;br />&lt;p>运行 &lt;code>dapr init&lt;/code> 时默认在本地机器上安装 Redis 流。&lt;/p>
&lt;p>在 Linux/MacOS 上打开 &lt;code>~/.dapr/components/pubsub.yam&lt;/code> 或在 Windows 上打开&lt;code>%UserProfile%\.dapr\components\pubsub.yaml&lt;/code> 组件文件以验证:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">localhost:6379&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以重写这个文件以使用另一个 Redis 实例或者另一个 &lt;a href="https://dapr-cn.github.io/operations/components/setup-pubsub/">pubsub component&lt;/a> ，通过创建 &lt;code>components&lt;/code> 文件夹（文件夹中包含重写的文件）并在 &lt;code>dapr run&lt;/code> 命令行界面使用 &lt;code>--components-path&lt;/code> 标志。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-0-kubernetes" role="tabpanel" aria-labelled-by="tabs-0-kubernetes-tab">
&lt;br />&lt;p>要将其部署到 Kubernetes 群集中，请为你想要的&lt;a href="https://dapr-cn.github.io/operations/components/setup-pubsub/"> pubsub 组件&lt;/a> 在下面的 yaml &lt;code>metadata&lt;/code> 中填写链接详情，保存为 &lt;code>pubsub.yaml&lt;/code>，然后运行 &lt;code>kubectl apply -f pubsub.yaml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">localhost:6379&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="步骤-2-订阅主题">步骤 2: 订阅主题&lt;/h2>
&lt;p>Dapr 允许两种方法订阅主题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>声明&lt;/strong>，其中订阅是在外部文件中定义的。&lt;/li>
&lt;li>&lt;strong>编程方式&lt;/strong>，订阅在用户代码中定义&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
声明和编程方式都支持相同的功能。 声明的方式从用户代码中移除对 Dapr 的依赖性，并允许使用现有应用程序订阅主题。 编程方法在用户代码中实现订阅。
&lt;/div>
&lt;h3 id="声明式订阅">声明式订阅&lt;/h3>
&lt;p>您可以使用以下自定义资源定义 （CRD） 订阅主题。 创建名为 &lt;code>subscription.yaml&lt;/code> 的文件并粘贴以下内容:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Subscription&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myevent-subscription&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">topic&lt;/span>: &lt;span style="color:#ae81ff">deathStarStatus&lt;/span>
&lt;span style="color:#f92672">route&lt;/span>: &lt;span style="color:#ae81ff">/dsstatus&lt;/span>
&lt;span style="color:#f92672">pubsubname&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">scopes&lt;/span>:
- &lt;span style="color:#ae81ff">app1&lt;/span>
- &lt;span style="color:#ae81ff">app2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的示例显示了 &lt;code>deathStarStatus&lt;/code>主题的事件订阅，对于pubsub 组件 &lt;code>pubsub&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>&lt;code>route&lt;/code> 告诉 Dapr 将所有主题消息发送到应用程序中的 &lt;code>/dsstatus&lt;/code> 端点。&lt;/li>
&lt;li>&lt;code>scopes&lt;/code> 为 &lt;code>app1&lt;/code> 和 &lt;code>app2&lt;/code> 启用订阅。&lt;/li>
&lt;/ul>
&lt;p>设置组件：
&lt;ul class="nav nav-tabs" id="tabs-2" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-2-self-hosted-cli-tab" data-toggle="tab" href="#tabs-2-self-hosted-cli" role="tab"
aria-controls="tabs-2-self-hosted-cli" aria-selected="true">
Self-Hosted (CLI)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-2-kubernetes-tab" data-toggle="tab" href="#tabs-2-kubernetes" role="tab"
aria-controls="tabs-2-kubernetes" aria-selected="false">
Kubernetes
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-2-content">
&lt;div class="tab-pane fade show active" id="tabs-2-self-hosted-cli" role="tabpanel" aria-labelled-by="tabs-2-self-hosted-cli-tab">
&lt;br />&lt;p>将 CRD 放在 &lt;code>./components&lt;/code> 目录中。 当 Dapr 启动时，它将加载组件和订阅。&lt;/p>
&lt;p>&lt;em>注意：默认情况下，在 MacOS/Linux 上从 &lt;code>$HOME/.dapr/components&lt;/code> 加载组件，以及 &lt;code>%USERPROFILE%\.dapr\components&lt;/code> 在Windows上。&lt;/em>&lt;/p>
&lt;p>还可以通过将 Dapr CLI 指向组件路径来覆盖默认目录：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr run --app-id myapp --components-path ./myComponents -- python3 app1.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>注意：如果你将订阅置于自定义组件路径中，请确保Pub/Sub 组件也存在。&lt;/em>&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-2-kubernetes" role="tabpanel" aria-labelled-by="tabs-2-kubernetes-tab">
&lt;br />&lt;p>在 Kubernetes 中，将 CRD 保存到文件中并将其应用于群集：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f subscription.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>&lt;/p>
&lt;h4 id="示例">示例&lt;/h4>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-3-python-tab" data-toggle="tab" href="#tabs-3-python" role="tab"
aria-controls="tabs-3-python" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-3-node-tab" data-toggle="tab" href="#tabs-3-node" role="tab"
aria-controls="tabs-3-node" aria-selected="false">
Node
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">
&lt;div class="tab-pane fade show active" id="tabs-3-python" role="tabpanel" aria-labelled-by="tabs-3-python-tab">
&lt;br />&lt;p>创建名为&amp;quot; &lt;code>app1.py&lt;/code> 的文件，并粘贴如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> flask
&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> request, jsonify
&lt;span style="color:#f92672">from&lt;/span> flask_cors &lt;span style="color:#f92672">import&lt;/span> CORS
&lt;span style="color:#f92672">import&lt;/span> json
&lt;span style="color:#f92672">import&lt;/span> sys
app &lt;span style="color:#f92672">=&lt;/span> flask&lt;span style="color:#f92672">.&lt;/span>Flask(__name__)
CORS(app)
&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ds_subscriber&lt;/span>():
&lt;span style="color:#66d9ef">print&lt;/span>(request&lt;span style="color:#f92672">.&lt;/span>json, flush&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">return&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>dumps({&lt;span style="color:#e6db74">&amp;#39;success&amp;#39;&lt;/span>:True}), &lt;span style="color:#ae81ff">200&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;ContentType&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}
app&lt;span style="color:#f92672">.&lt;/span>run()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 &lt;code>app1.py&lt;/code> 后，确保 flask 和 flask_cors 已经安装了：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install flask
pip install flask_cors
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app1 --app-port &lt;span style="color:#ae81ff">5000&lt;/span> run python app1.py
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-3-node" role="tabpanel" aria-labelled-by="tabs-3-node-tab">
&lt;br />&lt;p>设置上述订阅后，将此 javascript（Node &amp;gt; 4.16）下载到 &lt;code>app2.js&lt;/code> 文件中：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;express&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">bodyParser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;body-parser&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span>()
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#a6e22e">bodyParser&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>({ &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;application/*+json&amp;#39;&lt;/span> }));
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">sendStatus&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>);
});
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">listen&lt;/span>(&lt;span style="color:#a6e22e">port&lt;/span>, () =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`consumer app listening on port &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">!`&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行此应用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app2 --app-port &lt;span style="color:#ae81ff">3000&lt;/span> run node app2.js
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h3 id="编程方式订阅">编程方式订阅&lt;/h3>
&lt;p>若要订阅主题，请使用您选择的编程语言启动 Web 服务器，并监听以下 &lt;code>GET&lt;/code> 终结点： &lt;code>/dapr/subscribe &lt;/code>。 Dapr 实例将在启动时调用到您的应用，并期望对的订阅主题响应 JOSN：&lt;/p>
&lt;ul>
&lt;li>&lt;code>pubsubname&lt;/code>: Dapr 用到的 pub/sub 组件&lt;/li>
&lt;li>&lt;code>topic&lt;/code>: 订阅的主题&lt;/li>
&lt;li>&lt;code>route&lt;/code>：当消息来到该主题时，Dapr 需要调用哪个终结点&lt;/li>
&lt;/ul>
&lt;h4 id="示例-1">示例&lt;/h4>
&lt;ul class="nav nav-tabs" id="tabs-4" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-4-python-tab" data-toggle="tab" href="#tabs-4-python" role="tab"
aria-controls="tabs-4-python" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-4-node-tab" data-toggle="tab" href="#tabs-4-node" role="tab"
aria-controls="tabs-4-node" aria-selected="false">
Node
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-4-content">
&lt;div class="tab-pane fade show active" id="tabs-4-python" role="tabpanel" aria-labelled-by="tabs-4-python-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> flask
&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> request, jsonify
&lt;span style="color:#f92672">from&lt;/span> flask_cors &lt;span style="color:#f92672">import&lt;/span> CORS
&lt;span style="color:#f92672">import&lt;/span> json
&lt;span style="color:#f92672">import&lt;/span> sys
app &lt;span style="color:#f92672">=&lt;/span> flask&lt;span style="color:#f92672">.&lt;/span>Flask(__name__)
CORS(app)
&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dapr/subscribe&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;GET&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">subscribe&lt;/span>():
subscriptions &lt;span style="color:#f92672">=&lt;/span> [{&lt;span style="color:#e6db74">&amp;#39;pubsubname&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;pubsub&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;topic&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;deathStarStatus&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;route&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;dsstatus&amp;#39;&lt;/span>}]
&lt;span style="color:#66d9ef">return&lt;/span> jsonify(subscriptions)
&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ds_subscriber&lt;/span>():
&lt;span style="color:#66d9ef">print&lt;/span>(request&lt;span style="color:#f92672">.&lt;/span>json, flush&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">return&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>dumps({&lt;span style="color:#e6db74">&amp;#39;success&amp;#39;&lt;/span>:True}), &lt;span style="color:#ae81ff">200&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;ContentType&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}
app&lt;span style="color:#f92672">.&lt;/span>run()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 &lt;code>app1.py&lt;/code> 后，确保 flask 和 flask_cors 已经安装了：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install flask
pip install flask_cors
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app1 --app-port &lt;span style="color:#ae81ff">5000&lt;/span> run python app1.py
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-4-node" role="tabpanel" aria-labelled-by="tabs-4-node-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;express&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">bodyParser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;body-parser&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span>()
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#a6e22e">bodyParser&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>({ &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;application/*+json&amp;#39;&lt;/span> }));
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dapr/subscribe&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>([
{
&lt;span style="color:#a6e22e">pubsubname&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">topic&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;deathStarStatus&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">route&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;dsstatus&amp;#34;&lt;/span>
}
]);
})
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">sendStatus&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>);
});
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">listen&lt;/span>(&lt;span style="color:#a6e22e">port&lt;/span>, () =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`consumer app listening on port &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">!`&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行此应用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id app2 --app-port &lt;span style="color:#ae81ff">3000&lt;/span> run node app2.js
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>&lt;code>/dsstatus&lt;/code> 终结点与订阅中定义的 &lt;code>route&lt;/code> 相匹配，这是 Dapr 将所有主题消息发送至的位置。&lt;/p>
&lt;h2 id="步骤-3-发布主题">步骤 3: 发布主题&lt;/h2>
&lt;p>要将消息发布到主题，请在 Dapr 实例上调用以下端点:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-5" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-5-dapr-cli-tab" data-toggle="tab" href="#tabs-5-dapr-cli" role="tab"
aria-controls="tabs-5-dapr-cli" aria-selected="true">
Dapr CLI
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-5-http-api-bash-tab" data-toggle="tab" href="#tabs-5-http-api-bash" role="tab"
aria-controls="tabs-5-http-api-bash" aria-selected="false">
HTTP API (Bash)
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-5-http-api-powershell-tab" data-toggle="tab" href="#tabs-5-http-api-powershell" role="tab"
aria-controls="tabs-5-http-api-powershell" aria-selected="false">
HTTP API (PowerShell)
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-5-content">
&lt;div class="tab-pane fade show active" id="tabs-5-dapr-cli" role="tabpanel" aria-labelled-by="tabs-5-dapr-cli-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr publish --pubsub pubsub --topic deathStarStatus --data &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;status&amp;#34;: &amp;#34;completed&amp;#34;}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-5-http-api-bash" role="tabpanel" aria-labelled-by="tabs-5-http-api-bash-tab">
&lt;br />&lt;p>首先确保 Dapr sidecar 正在运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp --port &lt;span style="color:#ae81ff">3500&lt;/span> run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后发布一条消息给 &lt;code>deathStarStatus&lt;/code> 主题：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST http://localhost:3500/v1.0/publish/pubsub/deathStarStatus -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;status&amp;#34;: &amp;#34;completed&amp;#34;}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-5-http-api-powershell" role="tabpanel" aria-labelled-by="tabs-5-http-api-powershell-tab">
&lt;br />&lt;p>首先确保 Dapr sidecar 正在运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dapr --app-id myapp --port &lt;span style="color:#ae81ff">3500&lt;/span> run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后发布一条消息给 &lt;code>deathStarStatus&lt;/code> 主题：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">Invoke-RestMethod -Method Post -ContentType &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> -Body &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;status&amp;#34;: &amp;#34;completed&amp;#34;}&amp;#39;&lt;/span> -Uri &lt;span style="color:#e6db74">&amp;#39;http://localhost:3500/v1.0/publish/pubsub/deathStarStatus&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>Dapr 将在符合 Cloud Events v1.0 的信封中自动包装用户有效负载，对 &lt;code>datacontenttype&lt;/code> 属性使用 &lt;code>Content-Type&lt;/code> 头值。&lt;/p>
&lt;h2 id="步骤-4-ack-ing-消息">步骤 4: ACK-ing 消息&lt;/h2>
&lt;p>为了告诉Dapr 消息处理成功，返回一个 &lt;code>200 OK&lt;/code> 响应。 如果 Dapr 收到超过 &lt;code>200&lt;/code> 的返回状态代码，或者你的应用崩溃，Dapr 将根据 At-Least-Once 语义尝试重新传递消息。&lt;/p>
&lt;h4 id="示例-2">示例&lt;/h4>
&lt;ul class="nav nav-tabs" id="tabs-6" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-6-python-tab" data-toggle="tab" href="#tabs-6-python" role="tab"
aria-controls="tabs-6-python" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-6-node-tab" data-toggle="tab" href="#tabs-6-node" role="tab"
aria-controls="tabs-6-node" aria-selected="false">
Node
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-6-content">
&lt;div class="tab-pane fade show active" id="tabs-6-python" role="tabpanel" aria-labelled-by="tabs-6-python-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a6e22e">@app.route&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ds_subscriber&lt;/span>():
&lt;span style="color:#66d9ef">print&lt;/span>(request&lt;span style="color:#f92672">.&lt;/span>json, flush&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">return&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>dumps({&lt;span style="color:#e6db74">&amp;#39;success&amp;#39;&lt;/span>:True}), &lt;span style="color:#ae81ff">200&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;ContentType&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-6-node" role="tabpanel" aria-labelled-by="tabs-6-node-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dsstatus&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">sendStatus&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="下一步">下一步&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/pubsub-scopes/">对 pub/sub 主题的访问权&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dapr/quickstarts/tree/master/pub-sub">Pub/Sub 快速开始&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dapr-cn.github.io/operations/components/setup-pubsub/">Pub/sub 组件&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: 限定 Pub/Sub 主题访问权限</title><link>https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/pubsub-scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/developing-applications/building-blocks/pubsub/pubsub-scopes/</guid><description>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>&lt;a href="https://dapr-cn.github.io/operations/components/component-scopes/">名称空间或组件 scopes&lt;/a> 可用于限制对特定应用程序的组件访问。 添加到组件的这些应用程序作用域仅限制具有特定 ID 的应用程序才能使用该组件。&lt;/p>
&lt;p>除了此常规组件范围外，对于 pub/sub 组件，还可以限制以下操作：&lt;/p>
&lt;ul>
&lt;li>哪些主题可以使用(发布或订阅)&lt;/li>
&lt;li>哪些应用程序被允许发布到特定主题&lt;/li>
&lt;li>哪些应用程序被允许订阅特定主题&lt;/li>
&lt;/ul>
&lt;p>这称为 &lt;strong>pub/sub 主题作用域限定&lt;/strong>。&lt;/p>
&lt;p>为每个 pub/sub 组件定义发布/订阅范围。 您可能有一个名为 &lt;code>pubsub&lt;/code> 的 pub/sub 组件，它有一组范围设置，另一个 &lt;code>pubsub2&lt;/code> 另有一组范围设置。&lt;/p>
&lt;p>要使用这个主题范围，可以设置一个 pub/sub 组件的三个元数据属性：&lt;/p>
&lt;ul>
&lt;li>&lt;code>spec.metadata.publishingScopes&lt;/code>
&lt;ul>
&lt;li>分号分隔应用程序列表&amp;amp; 逗号分隔的主题列表允许该 app 发布信息到主题列表&lt;/li>
&lt;li>如果在 &lt;code>publishingScopes&lt;/code> (缺省行为) 中未指定任何内容，那么所有应用程序可以发布到所有主题&lt;/li>
&lt;li>要拒绝应用程序发布信息到任何主题，请将主题列表留空 (&lt;code>app1=;app2=topic2&lt;/code>)&lt;/li>
&lt;li>例如， &lt;code>app1=topic1;app2=topic2,topic3;app3=&lt;/code> 允许 app1 发布信息至 topic1 ，app2 允许发布信息到 topic2 和 topic3 ，app3 不允许发布信息到任何主题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>spec.metadata.subscriptionScopes&lt;/code>
&lt;ul>
&lt;li>分号分隔应用程序列表&amp;amp; 逗号分隔的主题列表允许该 app 订阅主题列表&lt;/li>
&lt;li>如果在 &lt;code>subscriptionScopes&lt;/code> (缺省行为) 中未指定任何内容，那么所有应用程序都可以订阅所有主题&lt;/li>
&lt;li>例如， &lt;code>app1=topic1;app2=topic2,topic3&lt;/code> 允许 app1 订阅 topic1 ，app2 可以订阅 topic2 和 topic3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>spec.metadata.allowedTopics&lt;/code>
&lt;ul>
&lt;li>一个逗号分隔的允许主题列表，对所有应用程序。&lt;/li>
&lt;li>如果未设置 &lt;code>allowedTopics&lt;/code> (缺省行为) ，那么所有主题都有效。 &lt;code>subscriptionScopes&lt;/code> 和 &lt;code>publishingScopes&lt;/code> 如果存在则仍然生效。&lt;/li>
&lt;li>&lt;code>publishingScopes&lt;/code> 或 &lt;code>subscriptionScopes&lt;/code> 可用于与 &lt;code>allowedTopics&lt;/code> 的 conjuction ，以添加限制粒度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>这些元数据属性可用于所有 pub/sub 组件。 以下示例使用 Redis 作为 pub/sub 组件。&lt;/p>
&lt;h2 id="示例-1-限制主题访问权限">示例 1: 限制主题访问权限&lt;/h2>
&lt;p>如果主题包含敏感信息，并且只允许应用程序的某个子集发布或订阅这些主题，限制哪些应用程序可以发布/订阅主题可能很有用。&lt;/p>
&lt;p>它还可以用于所有主题，以始终具有应用程序使用哪些主题作为发布者/订阅者的“基本事实”。&lt;/p>
&lt;p>以下是三个应用程序和三个主题的示例:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:6379&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">publishingScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app1=topic1;app2=topic2,topic3;app3=&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">subscriptionScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app2=;app3=topic1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下表显示哪些应用程序允许在主题中发布：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>topic1&lt;/th>
&lt;th>topic2&lt;/th>
&lt;th>topic3&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>下表显示哪些应用程序可以订阅主题：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>topic1&lt;/th>
&lt;th>topic2&lt;/th>
&lt;th>topic3&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>注意: 如果应用程序未列出 ( 例如， subscriptionScopes 中的 app1) ，那么允许订阅所有主题。 因为 &lt;code>allowedTopics&lt;/code> 未使用，而 app1 任何订阅范围，因此它还可以使用上面未列出的其他主题。&lt;/p>
&lt;/blockquote>
&lt;h2 id="示例-2-限制允许的主题">示例 2: 限制允许的主题&lt;/h2>
&lt;p>当 Dapr 应用程序给主题发送信息时，主题将自动创建。 在某些情况下，这个主题的创建应该得到管理。 例如:&lt;/p>
&lt;ul>
&lt;li>Dapr 应用程序中有关生成主题名称的错误可能会导致创建无限数量的主题&lt;/li>
&lt;li>简化主题名称和总数，防止主题无限增长&lt;/li>
&lt;/ul>
&lt;p>在这些情况下，可以使用 &lt;code>allowedTopics&lt;/code>。&lt;/p>
&lt;p>以下是三个允许的主题的示例:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:6379&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">allowedTopics&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;topic1,topic2,topic3&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有应用程序都可以使用这些主题，但仅允许这些主题，不允许其他主题。&lt;/p>
&lt;h2 id="示例-3-组合-allowedtopics-和范围">示例 3: 组合 &lt;code>allowedTopics&lt;/code> 和范围&lt;/h2>
&lt;p>有时，您希望合并这两个作用域，从而仅具有固定的一组允许主题，并指定对某些应用程序的作用域限定。&lt;/p>
&lt;p>以下是三个应用程序和两个主题的示例:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">dapr.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pubsub&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">pubsub.redis&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisHost&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:6379&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redisPassword&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">allowedTopics&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;A,B&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">publishingScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app1=A&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">subscriptionScopes&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app1=;app2=A&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意: 第三个应用程序未列出，因为如果在作用域内未指定应用程序，那么允许使用所有主题。&lt;/p>
&lt;/blockquote>
&lt;p>下表显示允许哪些应用程序发布到主题中:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>下表显示哪些应用程序允许订阅主题：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>app1&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app2&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>app3&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="例子-iframe-width560-height315-srcplayerbilibilicomplayerhtmlaid331013260bvidbv1ea411w71lcid277947422page1t513-frameborder0-allowaccelerometer-autoplay-clipboard-write-encrypted-media-gyroscope-picture-in-picture-allowfullscreen-markcrwd-markiframe">例子 &lt;iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=331013260&amp;bvid=BV1EA411W71L&amp;cid=277947422&amp;page=1&amp;t=513" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen mark="crwd-mark">&lt;/iframe>&lt;/h2></description></item></channel></rss>