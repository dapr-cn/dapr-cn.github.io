<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 中文文档 – Authenticating to services</title><link>https://dapr-cn.github.io/docs/developing-applications/integrations/authenticating/</link><description>Recent content in Authenticating to services on Dapr 中文文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dapr-cn.github.io/docs/developing-applications/integrations/authenticating/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Authenticating to AWS</title><link>https://dapr-cn.github.io/docs/developing-applications/integrations/authenticating/authenticating-aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dapr-cn.github.io/docs/developing-applications/integrations/authenticating/authenticating-aws/</guid><description>
&lt;p>All Dapr components using various AWS services (DynamoDB, SQS, S3, etc) use a standardized set of attributes for configuration, these are described below.&lt;/p>
&lt;p>&lt;a href="https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials">This article&lt;/a> provides a good overview of how the AWS SDK (which Dapr uses) handles credentials&lt;/p>
&lt;p>None of the following attributes are required, since the AWS SDK may be configured using the default provider chain described in the link above. It&amp;rsquo;s important to test the component configuration and inspect the log output from the Dapr runtime to ensure that components initialize correctly.&lt;/p>
&lt;p>&lt;code>region&lt;/code>: Which AWS region to connect to. In some situations (when running Dapr in self-hosted mode, for example) this flag can be provided by the environment variable &lt;code>AWS_REGION&lt;/code>. Since Dapr sidecar injection doesn&amp;rsquo;t allow configuring environment variables on the Dapr sidecar, it is recommended to always set the &lt;code>region&lt;/code> attribute in the component spec.&lt;br>
&lt;code>endpoint&lt;/code>: The endpoint is normally handled internally by the AWS SDK. However, in some situations it might make sense to set it locally - for example if developing against &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html">DynamoDB Local&lt;/a>.&lt;br>
&lt;code>accessKey&lt;/code>: AWS Access key id.&lt;br>
&lt;code>secretKey&lt;/code>: AWS Secret access key. Use together with &lt;code>accessKey&lt;/code> to explicitly specify credentials.&lt;br>
&lt;code>sessionToken&lt;/code>: AWS Session token. Used together with &lt;code>accessKey&lt;/code> and &lt;code>secretKey&lt;/code>. When using a regular IAM user&amp;rsquo;s access key and secret, a session token is normally not required.&lt;/p>
&lt;h2 id="alternatives-to-explicitly-specifying-credentials-in-component-manifest-files">Alternatives to explicitly specifying credentials in component manifest files&lt;/h2>
&lt;p>In production scenarios, it is recommended to use a solution such as &lt;a href="https://github.com/uswitch/kiam">Kiam&lt;/a> or &lt;a href="https://github.com/jtblin/kube2iam">Kube2iam&lt;/a>. If running on AWS EKS, you can &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/create-service-account-iam-policy-and-role.html">link an IAM role to a Kubernetes service account&lt;/a>, which your pod can use.&lt;/p>
&lt;p>All of these solutions solve the same problem: They allow the Dapr runtime process (or sidecar) to retrive credentials dynamically, so that explicit credentials aren&amp;rsquo;t needed. This provides several benefits, such as automated key rotation, and avoiding having to manage secrets.&lt;/p>
&lt;p>Both Kiam and Kube2IAM work by intercepting calls to the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html">instance metadata service&lt;/a>.&lt;/p>
&lt;h2 id="using-instance-roleprofile-when-running-in-stand-alone-mode-on-aws-ec2">Using instance role/profile when running in stand-alone mode on AWS EC2&lt;/h2>
&lt;p>If running Dapr directly on an AWS EC2 instance in stand-alone mode, instance profiles can be used. Simply configure an iam role and &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html">attach it to the instance profile&lt;/a> for the ec2 instance, and Dapr should be able to authenticate to AWS without specifying credentials in the Dapr component manifest.&lt;/p>
&lt;h2 id="authenticating-to-aws-when-running-dapr-locally-in-stand-alone-mode">Authenticating to AWS when running dapr locally in stand-alone mode&lt;/h2>
&lt;p>When running Dapr (or the Dapr runtime directly) in stand-alone mode, you have the option of injecting environment variables into the process like this (on Linux/MacOS:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">FOO&lt;span style="color:#f92672">=&lt;/span>bar daprd --app-id myapp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">configured named AWS profiles&lt;/a> locally , you can tell Dapr (or the Dapr runtime) which profile to use by specifying the &amp;ldquo;AWS_PROFILE&amp;rdquo; environment variable:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">AWS_PROFILE&lt;span style="color:#f92672">=&lt;/span>myprofile dapr run...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">AWS_PROFILE&lt;span style="color:#f92672">=&lt;/span>myprofile daprd...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use any of the &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html#envvars-list">supported environment variables&lt;/a> to configure Dapr in this manner.&lt;/p>
&lt;p>On Windows, the environment variable needs to be set before starting the &lt;code>dapr&lt;/code> or &lt;code>daprd&lt;/code> command, doing it inline as shown above is not supported.&lt;/p>
&lt;h2 id="authenticating-to-aws-if-using-aws-sso-based-profiles">Authenticating to AWS if using AWS SSO based profiles&lt;/h2>
&lt;p>If you authenticate to AWS using &lt;a href="https://aws.amazon.com/single-sign-on/">AWS SSO&lt;/a>, some AWS SDKs (including the Go SDK) don&amp;rsquo;t yet support this natively. There are several utilities you can use to &amp;ldquo;bridge the gap&amp;rdquo; between AWS SSO-based credentials, and &amp;ldquo;legacy&amp;rdquo; credentials, such as &lt;a href="https://pypi.org/project/awshelper/">AwsHelper&lt;/a> or &lt;a href="https://github.com/benkehoe/aws-sso-util">aws-sso-util&lt;/a>.&lt;/p>
&lt;p>If using AwsHelper, start Dapr like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">AWS_PROFILE&lt;span style="color:#f92672">=&lt;/span>myprofile awshelper dapr run...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">AWS_PROFILE&lt;span style="color:#f92672">=&lt;/span>myprofile awshelper daprd...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On Windows, the environment variable needs to be set before starting the &lt;code>awshelper&lt;/code> command, doing it inline as shown above is not supported.&lt;/p></description></item></channel></rss>