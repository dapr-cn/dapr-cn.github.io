<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – 如何用 Dapr.NET SDK 进行故障排除和诊断</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/</link><description>Recent content in 如何用 Dapr.NET SDK 进行故障排除和诊断 on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: 对使用 .NET SDK 的 发布/订阅 进行故障排除。</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/dotnet-troubleshooting-pubsub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/dotnet-troubleshooting-pubsub/</guid><description>
&lt;h1 id="发布订阅的故障排除">发布/订阅的故障排除&lt;/h1>
&lt;p>发布/订阅 最常见的问题是应用程序中的 发布/订阅 终结点没有被调用。&lt;/p>
&lt;p>这个问题有两个层次，有不同的解决方案：&lt;/p>
&lt;ul>
&lt;li>应用程序没有向 Dapr 注册 发布/订阅 终结点&lt;/li>
&lt;li>发布/订阅 终结点在 Dapr 注册，但请求没有到达所需的终结点&lt;/li>
&lt;/ul>
&lt;h2 id="第-1-步验证终结点注册">第 1 步：验证终结点注册&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>像平常一样启动应用程序(&lt;code>dapr run ...&lt;/code>)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在命令行中使用&lt;code>curl&lt;/code>（或其他HTTP测试工具）来访问&lt;code>/dapr/subscribe&lt;/code>端点。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>下面是一个例子，假设你的应用程序的监听端口是5000。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl http://localhost:5000/dapr/subscribe -v
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于正确配置的应用，输出应如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">* Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 5000 (#0)
&amp;gt; GET /dapr/subscribe HTTP/1.1
&amp;gt; Host: localhost:5000
&amp;gt; User-Agent: curl/7.64.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Fri, 15 Jan 2021 22:31:40 GMT
&amp;lt; Content-Type: application/json
&amp;lt; Server: Kestrel
&amp;lt; Transfer-Encoding: chunked
&amp;lt;
* Connection #0 to host localhost left intact
[{&amp;#34;topic&amp;#34;:&amp;#34;deposit&amp;#34;,&amp;#34;route&amp;#34;:&amp;#34;deposit&amp;#34;,&amp;#34;pubsubName&amp;#34;:&amp;#34;pubsub&amp;#34;},{&amp;#34;topic&amp;#34;:&amp;#34;withdraw&amp;#34;,&amp;#34;route&amp;#34;:&amp;#34;withdraw&amp;#34;,&amp;#34;pubsubName&amp;#34;:&amp;#34;pubsub&amp;#34;}]* Closing connection 0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>特别注意 HTTP 状态代码和 JSON 输出。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">&amp;lt; HTTP/1.1 200 OK
&lt;/code>&lt;/pre>&lt;/div>&lt;p>200 状态代码表示成功。&lt;/p>
&lt;p>最后包含的 JSON blob 是&lt;code>/dapr/subscribe&lt;/code>的输出，由Dapr运行时处理。 在这种情况下，它使用的是这个repo中的&lt;code>ControllerSample&lt;/code> - 所以这是一个正确输出的例子。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">[
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>},
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>有了这个命令的输出，你就可以诊断问题或进入下一步了。&lt;/p>
&lt;h3 id="选项-0-响应是200其中包含一些-发布订阅-条目">选项 0： 响应是200，其中包含一些 发布/订阅 条目。&lt;/h3>
&lt;p>&lt;strong>如果您在 JSON 输出中有此测试的条目，那么问题就会在其他地方出现，然后转到步骤 2。&lt;/strong>&lt;/p>
&lt;h3 id="选项-1-响应不是-200-或不包含-json">选项 1： 响应不是 200， 或不包含 Json&lt;/h3>
&lt;p>如果响应不是200或不包含 JSON ，则 &lt;code>MapSubscribibeHandler()&lt;/code> 终结点未能实现。&lt;/p>
&lt;p>请确保您在 &lt;code>Startup.cs&lt;/code> 中有一些代码，然后重复测试。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">app.UseRouting();
app.UseCloudEvents();
app.UseEndpoints(endpoints =&amp;gt;
{
endpoints.MapSubscribeHandler(); &lt;span style="color:#75715e">// This is the Dapr subscribe handler
&lt;/span>&lt;span style="color:#75715e">&lt;/span> endpoints.MapControllers();
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>如果添加订阅处理程序无法解决问题。 请在此仓库中打开一个问题，并包含您的 &lt;code>Startup.cs&lt;/code> 文件。&lt;/strong>&lt;/p>
&lt;h3 id="选项-2响应包含json但它是空的如-">选项 2：响应包含JSON，但它是空的（如 &lt;code>[]&lt;/code>）&lt;/h3>
&lt;p>如果JSON输出是一个空数组 (如 &lt;code>[]&lt;/code>)，那么下面的处理程序将被注册，但没有任何 topic 终结点。&lt;/p>
&lt;hr>
&lt;p>如果你正在使用一个控制器来处理 发布/订阅 ，你应该有一个类似的方法：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">&lt;span style="color:#a6e22e">[Topic(&amp;#34;pubsub&amp;#34;, &amp;#34;deposit&amp;#34;)]&lt;/span>
&lt;span style="color:#a6e22e">[HttpPost(&amp;#34;deposit&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;ActionResult&amp;gt; Deposit(...)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个示例中，需要 &lt;code>Topic&lt;/code> 和 &lt;code>HttpPost&lt;/code> 属性，但其他细节可能不同。&lt;/p>
&lt;hr>
&lt;p>如果你使用的是 发布/订阅 的路由，你应该有一个终结点，比如：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">endpoints.MapPost(&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>, ...).WithTopic(&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个例子中，需要调用 &lt;code>WithTopic(...)&lt;/code> ，但其他细节可能有所不同。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>在纠正这段代码并重新测试后，如果JSON输出仍然是空数组（像 &lt;code>[]&lt;/code> ），那么请在这个仓库上打开一个问题，并包含 &lt;code>Startup.cs&lt;/code> 的内容和你的 发布/订阅 终结点。&lt;/strong>&lt;/p>
&lt;h2 id="第-2-步验证终结点是否可访问">第 2 步：验证终结点是否可访问&lt;/h2>
&lt;p>在这一步中，我们将验证用 发布/订阅 注册的条目是否可以访问。 最后一步应该给你留下一些JSON输出，比如下面：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">[
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>},
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保留此输出，因为我们将使用 &lt;code>route&lt;/code> 信息来测试应用程序。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>像平常一样启动应用程序(dapr run &amp;hellip;)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按照 &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-5.0#debug-diagnostics">这里&lt;/a>的描述，调整日志记录的详细程度，以包含 ASP.NET Core 的 &lt;code>Information&lt;/code> 日志记录。 将 &lt;code>Microsoft&lt;/code> 键的值设为 &lt;code>Information&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在命令行使用 &lt;code>curl&lt;/code> (或其他HTTP测试工具) 来访问一个注册了 发布/订阅 终结点的路由。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>下面是一个例子，假设您的应用程序的监听端口是5000，并且您的 发布/订阅 路由之一是&lt;code>withdraw&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl http://localhost:5000/withdraw -H &lt;span style="color:#e6db74">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{}&amp;#39;&lt;/span> -v
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下是对示例运行上述命令的输出：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">* Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 5000 (#0)
&amp;gt; POST /withdraw HTTP/1.1
&amp;gt; Host: localhost:5000
&amp;gt; User-Agent: curl/7.64.1
&amp;gt; Accept: */*
&amp;gt; Content-Type: application/json
&amp;gt; Content-Length: 2
&amp;gt;
* upload completely sent off: 2 out of 2 bytes
&amp;lt; HTTP/1.1 400 Bad Request
&amp;lt; Date: Fri, 15 Jan 2021 22:53:27 GMT
&amp;lt; Content-Type: application/problem+json; charset=utf-8
&amp;lt; Server: Kestrel
&amp;lt; Transfer-Encoding: chunked
&amp;lt;
* Connection #0 to host localhost left intact
{&amp;#34;type&amp;#34;:&amp;#34;https://tools.ietf.org/html/rfc7231#section-6.5.1&amp;#34;,&amp;#34;title&amp;#34;:&amp;#34;One or more validation errors occurred.&amp;#34;,&amp;#34;status&amp;#34;:400,&amp;#34;traceId&amp;#34;:&amp;#34;|5e9d7eee-4ea66b1e144ce9bb.&amp;#34;,&amp;#34;errors&amp;#34;:{&amp;#34;Id&amp;#34;:[&amp;#34;The Id field is required.&amp;#34;]}}* Closing connection 0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据 HTTP 400 和 JSON 有效载荷，该响应表明已到达终结点，但由于验证错误，请求被拒绝。&lt;/p>
&lt;p>你也应该看看运行应用程序的控制台输出。 这是为清晰起见，去掉Dapr日志头的输出示例。&lt;/p>
&lt;pre>&lt;code>info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
Request starting HTTP/1.1 POST http://localhost:5000/withdraw application/json 2
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
Executing endpoint 'ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)'
info: Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker[3]
Route matched with {action = &amp;quot;Withdraw&amp;quot;, controller = &amp;quot;Sample&amp;quot;}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ControllerSample.Account]] Withdraw(ControllerSample.Transaction, Dapr.Client.DaprClient) on controller ControllerSample.Controllers.SampleController (ControllerSample).
info: Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor[1]
Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
info: Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker[2]
Executed action ControllerSample.Controllers.SampleController.Withdraw (ControllerSample) in 52.1211ms
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
Executed endpoint 'ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)'
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
Request finished in 157.056ms 400 application/problem+json; charset=utf-8
&lt;/code>&lt;/pre>&lt;p>主要关注的日志条目是来自路由的：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
Executing endpoint &amp;#39;ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此条目显示：&lt;/p>
&lt;ul>
&lt;li>路由已执行&lt;/li>
&lt;li>路由选择 &lt;code>ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)&lt;/code> 终结点&lt;/li>
&lt;/ul>
&lt;p>现在你已经掌握了解决这个问题所需的信息。&lt;/p>
&lt;h3 id="选项0路由选择正确的终结点">选项0：路由选择正确的终结点&lt;/h3>
&lt;p>如果路由日志条目中的信息是正确的，那么这意味着您的应用程序的行为是正确的。&lt;/p>
&lt;p>示例:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
Executing endpoint &amp;#39;ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可能想尝试使用 Dapr cli 执行直接发送 发布/订阅 消息并比较日志输出。&lt;/p>
&lt;p>Example command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">dapr publish --pubsub pubsub --topic withdraw --data &lt;span style="color:#e6db74">&amp;#39;{}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>如果这样做之后，你仍然不理解这个问题，请在此仓库中打开一个问题，并包含您的 &lt;code>Startup.cs&lt;/code> 文件。&lt;/strong>&lt;/p>
&lt;h3 id="选项-1路由没有执行">选项 1：路由没有执行&lt;/h3>
&lt;p>如果您在日志中没有看到 &lt;code>Microsoft.AspNetCore.Routing.EndpointMiddleware&lt;/code> 的条目，那么这意味着该请求是由路由以外的其他东西处理的。 在这种情况下，问题通常是中间件错乱。 请求中的其他日志可能会给你一个线索，让你知道发生了什么。&lt;/p>
&lt;p>&lt;strong>如果您需要帮助理解这个问题，请在此仓库中打开一个问题，并包含您的 &lt;code>Startup.cs&lt;/code> 文件。&lt;/strong>&lt;/p>
&lt;h3 id="选项-2路由选择了错误的终结点">选项 2：路由选择了错误的终结点&lt;/h3>
&lt;p>如果您在日志中看到 &lt;code>Microsoft.AspNetCore.Routing.EndpointMiddleware&lt;/code> 的条目，但它包含了错误的端点，那么这意味着您有路由冲突。 所选择的终结点将出现在日志中，以便让你了解造成冲突的原因。&lt;/p>
&lt;p>&lt;strong>如果您需要帮助理解这个问题，请在此仓库中打开一个问题，并包含您的 &lt;code>Startup.cs&lt;/code> 文件。&lt;/strong>&lt;/p></description></item></channel></rss>