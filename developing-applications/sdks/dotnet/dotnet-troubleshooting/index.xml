<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – How to troubleshoot and debug with the Dapr .NET SDK</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/</link><description>Recent content in How to troubleshoot and debug with the Dapr .NET SDK on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Troubleshoot Pub/Sub with the .NET SDK</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/dotnet-troubleshooting-pubsub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-troubleshooting/dotnet-troubleshooting-pubsub/</guid><description>
&lt;h1 id="troubleshooting-pubsub">Troubleshooting Pub/Sub&lt;/h1>
&lt;p>The most common problem with pub/sub is that the pub/sub endpoint in your application is not being called.&lt;/p>
&lt;p>There are two layers to this problem with different solutions:&lt;/p>
&lt;ul>
&lt;li>The application is not registering pub/sub endpoints with Dapr&lt;/li>
&lt;li>The pub/sub endpoints are registered with Dapr, but the request is not reaching the desired endpoint&lt;/li>
&lt;/ul>
&lt;h2 id="step-1-verify-endpoint-registration">Step 1: Verify endpoint registration&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Start the application as you would normally (&lt;code>dapr run ...&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>curl&lt;/code> at the command line (or another HTTP testing tool) to access the &lt;code>/dapr/subscribe&lt;/code> endpoint.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s an example command assuming your application&amp;rsquo;s listening port is 5000:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl http://localhost:5000/dapr/subscribe -v
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a correctly configured application the output should look like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">* Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 5000 (#0)
&amp;gt; GET /dapr/subscribe HTTP/1.1
&amp;gt; Host: localhost:5000
&amp;gt; User-Agent: curl/7.64.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Fri, 15 Jan 2021 22:31:40 GMT
&amp;lt; Content-Type: application/json
&amp;lt; Server: Kestrel
&amp;lt; Transfer-Encoding: chunked
&amp;lt;
* Connection #0 to host localhost left intact
[{&amp;#34;topic&amp;#34;:&amp;#34;deposit&amp;#34;,&amp;#34;route&amp;#34;:&amp;#34;deposit&amp;#34;,&amp;#34;pubsubName&amp;#34;:&amp;#34;pubsub&amp;#34;},{&amp;#34;topic&amp;#34;:&amp;#34;withdraw&amp;#34;,&amp;#34;route&amp;#34;:&amp;#34;withdraw&amp;#34;,&amp;#34;pubsubName&amp;#34;:&amp;#34;pubsub&amp;#34;}]* Closing connection 0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pay particular attention to the HTTP status code, and the JSON output.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">&amp;lt; HTTP/1.1 200 OK
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A 200 status code indicates success.&lt;/p>
&lt;p>The JSON blob that&amp;rsquo;s included near the end is the output of &lt;code>/dapr/subscribe&lt;/code> that&amp;rsquo;s procesed by the Dapr runtime. In this case it&amp;rsquo;s using the &lt;code>ControllerSample&lt;/code> in this repo - so this is an example of correct output.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">[
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>},
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>With the output of this command in hand, you are ready to diagnose a problem or move on to the next step.&lt;/p>
&lt;h3 id="option-0-the-response-was-a-200-included-some-pubsub-entries">Option 0: The response was a 200 included some pub/sub entries&lt;/h3>
&lt;p>&lt;strong>If you have entries in the JSON output from this test then the problem lies elsewhere, move on to step 2.&lt;/strong>&lt;/p>
&lt;h3 id="option-1-the-response-was-not-a-200-or-didnt-contain-json">Option 1: The response was not a 200, or didn&amp;rsquo;t contain JSON&lt;/h3>
&lt;p>If the response was not a 200 or did not contain JSON, then the &lt;code>MapSubscribeHandler()&lt;/code> endpoint was not reached.&lt;/p>
&lt;p>Make sure you have some code like the following in &lt;code>Startup.cs&lt;/code> and repeat the test.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">app.UseRouting();
app.UseCloudEvents();
app.UseEndpoints(endpoints =&amp;gt;
{
endpoints.MapSubscribeHandler(); &lt;span style="color:#75715e">// This is the Dapr subscribe handler
&lt;/span>&lt;span style="color:#75715e">&lt;/span> endpoints.MapControllers();
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>If adding the subscribe handler did not resolve the problem, please open an issue on this repo and include the contents of your &lt;code>Startup.cs&lt;/code> file.&lt;/strong>&lt;/p>
&lt;h3 id="option-2-the-response-contained-json-but-it-was-empty-like-">Option 2: The response contained JSON but it was empty (like &lt;code>[]&lt;/code>)&lt;/h3>
&lt;p>If the JSON output was an empty array (like &lt;code>[]&lt;/code>) then the subcribe handler is registered, but no topic endpoints were registered.&lt;/p>
&lt;hr>
&lt;p>If you&amp;rsquo;re using a controller for pub/sub you should have a method like:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">&lt;span style="color:#a6e22e">[Topic(&amp;#34;pubsub&amp;#34;, &amp;#34;deposit&amp;#34;)]&lt;/span>
&lt;span style="color:#a6e22e">[HttpPost(&amp;#34;deposit&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;ActionResult&amp;gt; Deposit(...)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example the &lt;code>Topic&lt;/code> and &lt;code>HttpPost&lt;/code> attributes are required, but other details might be different.&lt;/p>
&lt;hr>
&lt;p>If you&amp;rsquo;re using routing for pub/sub you should have an endpoint like:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">endpoints.MapPost(&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>, ...).WithTopic(&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example the call to &lt;code>WithTopic(...)&lt;/code> is required but other details might be different.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>After correcting this code and re-testing if the JSON output is still the empty array (like &lt;code>[]&lt;/code>) then please open an issue on this repository and include the contents of &lt;code>Startup.cs&lt;/code> and your pub/sub endpoint.&lt;/strong>&lt;/p>
&lt;h2 id="step-2-verify-endpoint-reachability">Step 2: Verify endpoint reachability&lt;/h2>
&lt;p>In this step we&amp;rsquo;ll verify that the entries registered with pub/sub are reachable. The last step should have left you with some JSON output like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">[
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;deposit&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>},
{&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;withdraw&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pubsubName&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pubsub&amp;#34;&lt;/span>}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keep this output, as we&amp;rsquo;ll use the &lt;code>route&lt;/code> information to test the application.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Start the application as you would normally (&lt;code>dapr run ...&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Adjust the logging verbosity to include &lt;code>Information&lt;/code> logging for ASP.NET Core as described &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-5.0#debug-diagnostics">here&lt;/a>. Set the &lt;code>Microsoft&lt;/code> key to &lt;code>Information&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>curl&lt;/code> at the command line (or another HTTP testing tool) to access one of the routes registered a pub/sub endpoint.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s an example command assuming your application&amp;rsquo;s listening port is 5000, and one of your pub/sub routes is &lt;code>withdraw&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl http://localhost:5000/withdraw -H &lt;span style="color:#e6db74">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{}&amp;#39;&lt;/span> -v
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s the output from running the above command against the sample:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">* Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 5000 (#0)
&amp;gt; POST /withdraw HTTP/1.1
&amp;gt; Host: localhost:5000
&amp;gt; User-Agent: curl/7.64.1
&amp;gt; Accept: */*
&amp;gt; Content-Type: application/json
&amp;gt; Content-Length: 2
&amp;gt;
* upload completely sent off: 2 out of 2 bytes
&amp;lt; HTTP/1.1 400 Bad Request
&amp;lt; Date: Fri, 15 Jan 2021 22:53:27 GMT
&amp;lt; Content-Type: application/problem+json; charset=utf-8
&amp;lt; Server: Kestrel
&amp;lt; Transfer-Encoding: chunked
&amp;lt;
* Connection #0 to host localhost left intact
{&amp;#34;type&amp;#34;:&amp;#34;https://tools.ietf.org/html/rfc7231#section-6.5.1&amp;#34;,&amp;#34;title&amp;#34;:&amp;#34;One or more validation errors occurred.&amp;#34;,&amp;#34;status&amp;#34;:400,&amp;#34;traceId&amp;#34;:&amp;#34;|5e9d7eee-4ea66b1e144ce9bb.&amp;#34;,&amp;#34;errors&amp;#34;:{&amp;#34;Id&amp;#34;:[&amp;#34;The Id field is required.&amp;#34;]}}* Closing connection 0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Based on the HTTP 400 and JSON payload, this response indicates that the endpoint was reached but the request was rejected due to a validation error.&lt;/p>
&lt;p>You should also look at the console output of the running application. This is example output with the Dapr logging headers stripped away for clarity.&lt;/p>
&lt;pre>&lt;code>info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
Request starting HTTP/1.1 POST http://localhost:5000/withdraw application/json 2
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
Executing endpoint 'ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)'
info: Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker[3]
Route matched with {action = &amp;quot;Withdraw&amp;quot;, controller = &amp;quot;Sample&amp;quot;}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ControllerSample.Account]] Withdraw(ControllerSample.Transaction, Dapr.Client.DaprClient) on controller ControllerSample.Controllers.SampleController (ControllerSample).
info: Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor[1]
Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
info: Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker[2]
Executed action ControllerSample.Controllers.SampleController.Withdraw (ControllerSample) in 52.1211ms
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
Executed endpoint 'ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)'
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
Request finished in 157.056ms 400 application/problem+json; charset=utf-8
&lt;/code>&lt;/pre>&lt;p>The log entry of primary interest is the one coming from routing:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
Executing endpoint &amp;#39;ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This entry shows that:&lt;/p>
&lt;ul>
&lt;li>Routing executed&lt;/li>
&lt;li>Routing chose the &lt;code>ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)'&lt;/code> endpoint&lt;/li>
&lt;/ul>
&lt;p>Now you have the information needed to troubleshoot this step.&lt;/p>
&lt;h3 id="option-0-routing-chose-the-correct-endpoint">Option 0: Routing chose the correct endpoint&lt;/h3>
&lt;p>If the information in the routing log entry is correct, then it means that in isolation your application is behaving correctly.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
Executing endpoint &amp;#39;ControllerSample.Controllers.SampleController.Withdraw (ControllerSample)&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might want to try using the Dapr cli to execute send a pub/sub message directly and compare the logging output.&lt;/p>
&lt;p>Example command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">dapr publish --pubsub pubsub --topic withdraw --data &lt;span style="color:#e6db74">&amp;#39;{}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>If after doing this you still don&amp;rsquo;t understand the problem please open an issue on this repo and include the contents of your &lt;code>Startup.cs&lt;/code>.&lt;/strong>&lt;/p>
&lt;h3 id="option-1-routing-did-not-execute">Option 1: Routing did not execute&lt;/h3>
&lt;p>If you don&amp;rsquo;t see an entry for &lt;code>Microsoft.AspNetCore.Routing.EndpointMiddleware&lt;/code> in the logs, then it means that the request was handled by something other than routing. Usually the problem in this case is a misbehaving middleware. Other logs from the request might give you a clue to what&amp;rsquo;s happening.&lt;/p>
&lt;p>&lt;strong>If you need help understanding the problem please open an issue on this repo and include the contents of your &lt;code>Startup.cs&lt;/code>.&lt;/strong>&lt;/p>
&lt;h3 id="option-2-routing-chose-the-wrong-endpoint">Option 2: Routing chose the wrong endpoint&lt;/h3>
&lt;p>If you see an entry for &lt;code>Microsoft.AspNetCore.Routing.EndpointMiddleware&lt;/code> in the logs, but it contains the wrong endpoint then it means that you&amp;rsquo;ve got a routing conflict. The endpoint that was chosen will appear in the logs so that should give you an idea of what&amp;rsquo;s causing the conflict.&lt;/p>
&lt;p>&lt;strong>If you need help understanding the problem please open an issue on this repo and include the contents of your &lt;code>Startup.cs&lt;/code>.&lt;/strong>&lt;/p></description></item></channel></rss>