<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr ÊñáÊ°£Â∫ì ‚Äì Developing applications with the Dapr .NET SDK</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/</link><description>Recent content in Developing applications with the Dapr .NET SDK on Dapr ÊñáÊ°£Â∫ì</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Dapr .NET SDK Development with Docker-Compose</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-docker-compose/</guid><description>
&lt;h2 id="docker-compose">Docker-Compose&lt;/h2>
&lt;p>&lt;em>Consider this to be a .NET companion to the [Dapr Self-Hosted with Docker Guide]({{ ref self-hosted-with-docker.md }}))&lt;/em>.&lt;/p>
&lt;p>&lt;code>docker-compose&lt;/code> is a CLI tool included with Docker Desktop that you can use to run multiple containers at a time. It is a way to automate the lifecycle of multiple containers together, and offers a development experience similar to a production environment for applications targeting Kubernetes.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pro:&lt;/strong> Since &lt;code>docker-compose&lt;/code> manages containers for you, you can make dependencies part of the application definition and stop the long-running containers on your machine.&lt;/li>
&lt;li>&lt;strong>Con:&lt;/strong> most investment required, services need to be containerized to get started.&lt;/li>
&lt;li>&lt;strong>Con:&lt;/strong> can be difficult to debug and troubleshoot if you are unfamilar with Docker.&lt;/li>
&lt;/ul>
&lt;h3 id="using-docker-compose">Using docker-compose&lt;/h3>
&lt;p>From the .NET perspective, there is no specialized guidance needed for &lt;code>docker-compose&lt;/code> with Dapr. &lt;code>docker-compose&lt;/code> runs containers, and once your service is in a container, configuring it similar to any other programming technology.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">üí° App Port&lt;/h4>
In a container, an ASP.NET Core app will listen on port 80 by default. Remember this for when you need to configure the &lt;code>--app-port&lt;/code> later.
&lt;/div>
&lt;p>To summarize the approach:&lt;/p>
&lt;ul>
&lt;li>Create a &lt;code>Dockerfile&lt;/code> for each service&lt;/li>
&lt;li>Create a &lt;code>docker-compose.yaml&lt;/code> and place check it in to the source code repository&lt;/li>
&lt;/ul>
&lt;p>To understand the authoring the &lt;code>docker-compose.yaml&lt;/code> you should start with the &lt;a href="https://github.com/dapr/samples/tree/master/hello-docker-compose">Hello, docker-compose sample&lt;/a>.&lt;/p>
&lt;p>Similar to running locally with &lt;code>dapr run&lt;/code> for each service you need to choose a unique app-id. Choosing the container name as the app-id will make this simple to remember.&lt;/p>
&lt;p>The compose file will contain at a minimum:&lt;/p>
&lt;ul>
&lt;li>A network that the containers use to communiate&lt;/li>
&lt;li>Each service&amp;rsquo;s container&lt;/li>
&lt;li>A &lt;code>&amp;lt;service&amp;gt;-daprd&lt;/code> sidecar container with the service&amp;rsquo;s port and app-id specified&lt;/li>
&lt;li>Additional dependencies that run in containers (redis for example)&lt;/li>
&lt;li>optional: Dapr placement container (for actors)&lt;/li>
&lt;/ul>
&lt;p>You can also view a larger example from the &lt;a href="https://github.com/dotnet-architecture/eShopOnDapr/blob/master/docker-compose.yml">eShopOnContainers&lt;/a> sample application.&lt;/p></description></item><item><title>Developing-Applications: Dapr .NET SDK Development with Project Tye</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-tye/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-tye/</guid><description>
&lt;h2 id="project-tye">Project Tye&lt;/h2>
&lt;p>&lt;a href="https://github.com/dotnet/tye/">.NET Project Tye&lt;/a> is a microservices development tool designed to make running many .NET services easy. Tye enables you to store a configuration of multiple .NET services, processes, and container images as a runnable application.&lt;/p>
&lt;p>Tye is advantageous for a .NET Dapr developer because:&lt;/p>
&lt;ul>
&lt;li>Tye has the ability to automate the dapr CLI built-in&lt;/li>
&lt;li>Tye understands .NET&amp;rsquo;s conventions and requires almost no configuration for .NET services&lt;/li>
&lt;li>Tye can manage the lifetime of your dependencies in containers&lt;/li>
&lt;/ul>
&lt;p>Pros/cons:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pro:&lt;/strong> Tye can automate all of the steps described above. You no longer need to think about concepts like ports or app-ids.&lt;/li>
&lt;li>&lt;strong>Pro:&lt;/strong> Since Tye can also manage containers for you, you can make those part of the application definition and stop the long-running containers on your machine.&lt;/li>
&lt;/ul>
&lt;h3 id="using-tye">Using Tye&lt;/h3>
&lt;p>Follow the &lt;a href="https://github.com/dotnet/tye/blob/master/docs/getting_started.md">Tye Getting Started&lt;/a> to install the &lt;code>tye&lt;/code> CLI and create a &lt;code>tye.yaml&lt;/code> for your application.&lt;/p>
&lt;p>Next follow the steps in the &lt;a href="https://github.com/dotnet/tye/blob/master/docs/recipes/dapr.md">Tye Dapr recipe&lt;/a> to add Dapr. Make sure to specify the relative path to your components folder with &lt;code>components-path&lt;/code> in &lt;code>tye.yaml&lt;/code>.&lt;/p>
&lt;p>Next add any additional container dependencies and add component definitions to the folder you created earlier.&lt;/p>
&lt;p>You should end up with something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">store-application&lt;/span>
&lt;span style="color:#f92672">extensions&lt;/span>:
&lt;span style="color:#75715e"># Configuration for dapr goes here.&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dapr&lt;/span>
&lt;span style="color:#f92672">components-path&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;components-path&amp;gt; &lt;/span>
&lt;span style="color:#75715e"># Services to run go here.&lt;/span>
&lt;span style="color:#f92672">services&lt;/span>:
&lt;span style="color:#75715e"># The name will be used as the app-id. For a .NET project, Tye only needs the path to the project file.&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">orders&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">orders/orders.csproj&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">products&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">products/products.csproj&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">store&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">store/store.csproj&lt;/span>
&lt;span style="color:#75715e"># Containers you want to run need an image name and set of ports to expose.&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;span style="color:#f92672">bindings&lt;/span>:
- &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">6973&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Checkin &lt;code>tye.yaml&lt;/code> in source control wiht the application code.&lt;/p>
&lt;p>You can now use &lt;code>tye run&lt;/code> to launch the whole application from one terminal. When running, Tye has a dashboard at &lt;code>http://localhost:8000&lt;/code> to view application status and logs.&lt;/p>
&lt;h3 id="‰∏ã‰∏ÄÊ≠•">‰∏ã‰∏ÄÊ≠•&lt;/h3>
&lt;p>Tye runs your services locally as normal .NET process. Â¶ÇÊûúÊÇ®ÈúÄË¶ÅË∞ÉËØïÔºåËØ∑‰ΩøÁî®Ë∞ÉËØïÂô®ÁöÑÈôÑÂä†ÂäüËÉΩÂ∞ÜÂÖ∂ÈôÑÂä†Âà∞Ê≠£Âú®ËøêË°åÁöÑËøõÁ®ã‰∏≠„ÄÇ Since Tye is .NET aware, it has the ability to &lt;a href="https://github.com/dotnet/tye/blob/master/docs/reference/commandline/tye-run.md#options">start a process suspended&lt;/a> for startup debugging.&lt;/p>
&lt;p>Tye also has an &lt;a href="https://github.com/dotnet/tye/blob/master/docs/reference/commandline/tye-run.md#options">option&lt;/a> to run your services in containers if you wish to test locally in containers.&lt;/p></description></item><item><title>Developing-Applications: Dapr .NET SDK ‰∏é Dapr CLI ËøõË°åÂºÄÂèë</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-dapr-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-dapr-cli/</guid><description>
&lt;h2 id="dapr-cli">Dapr CLI&lt;/h2>
&lt;p>&lt;em>ËøôÁØáÊñáÁ´†ÊòØ‰∏ÄÁØá‰∏é .NET Áõ∏ÂÖ≥ÁöÑÊñáÁ´†ÔºåÂè¶ËßÅ [‰ΩøÁî® Docker ËøõË°å Dapr Ëá™ÊâòÁÆ°]({{ ref self-hosted-overview.md }})&lt;/em>&lt;/p>
&lt;p>Dapr CLI ‰∏∫ÊÇ®Êèê‰æõ‰∫Ü‰∏Ä‰∏™ÂæàÂ•ΩÁöÑÂ∑•‰ΩúÂü∫Á°ÄÔºåÈÄöËøáÂàùÂßãÂåñÊú¨Âú∞ÈáçÊñ∞ÂàÜÈÖçÂÆπÂô®„ÄÅÊãâÂèñÂÆπÂô®„ÄÅÊîæÁΩÆÊúçÂä°ÂíåÁî®‰∫éÈáçÊñ∞ÂàÜÈÖçÁöÑÁªÑ‰ª∂Ê∏ÖÂçï„ÄÇ ËøôÂ∞Ü‰ΩøÊÇ®ËÉΩÂ§üÂú®Ê≤°ÊúâÈ¢ùÂ§ñËÆæÁΩÆÁöÑÊñ∞ÂÆâË£Ö‰∏≠Â§ÑÁêÜ‰ª•‰∏ãÊûÑÂª∫ÂùóÔºö&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/">ÊúçÂä°Ë∞ÉÁî®&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/">Áä∂ÊÄÅÂ≠òÂÇ®&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/">ÂèëÂ∏É/ËÆ¢ÈòÖ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/actors/">Actors&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ÊÇ®ÂèØ‰ª•Áî® &lt;code>dapr run&lt;/code> Êù•ËøêË°å.NET ÊúçÂä°Ôºå‰Ωú‰∏∫ÊÇ®Âú®Êú¨Âú∞ÂºÄÂèëÁöÑÁ≠ñÁï•„ÄÇ ‰∏∫ÊØè‰∏™ÊúçÂä°ÁöÑËøô‰∫õÂëΩ‰ª§Ôºå‰ª•‰æøÂêØÂä®ÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇ&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Â•ΩÂ§ÑÔºö&lt;/strong> ÔºåËøôÊòØÂæàÂÆπÊòìËÆæÁΩÆÔºåÂõ†‰∏∫ÂÆÉÁöÑÈªòËÆ§DaprÂÆâË£ÖÁöÑ‰∏ÄÈÉ®ÂàÜ&lt;/li>
&lt;li>&lt;strong>ÂùèÂ§ÑÔºö&lt;/strong> ËøôÂú®‰Ω†ÁöÑÊú∫Âô®‰∏ä‰ΩøÁî®ÈïøÊúüËøêË°åÁöÑ docker ÂÆπÂô®ÔºåËøôÂèØËÉΩÊòØ‰∏çÂèØÂèñÁöÑ&lt;/li>
&lt;li>&lt;strong>ÂùèÂ§ÑÔºö&lt;/strong> ËøôÁßçÊñπÊ≥ïÁöÑÂèØ‰º∏Áº©ÊÄßÂæàÂ∑ÆÔºåÂõ†‰∏∫ÂÆÉÈúÄË¶ÅÊØè‰∏™ÊúçÂä°ËøêË°å‰∏Ä‰∏™ÂçïÁã¨ÁöÑÂëΩ‰ª§&lt;/li>
&lt;/ul>
&lt;h3 id="‰ΩøÁî®-dapr-cli">‰ΩøÁî® Dapr CLI&lt;/h3>
&lt;p>ÂØπ‰∫éÊÇ®ÈúÄË¶ÅÈÄâÊã©ÁöÑÊØè‰∏™ÊúçÂä°ÔºåÈúÄË¶ÅÂ¶Ç‰∏ãÂÜÖÂÆπÔºö&lt;/p>
&lt;ul>
&lt;li>‰∏Ä‰∏™ÂîØ‰∏ÄÁöÑÂú∞ÂùÄÂ∫îÁî®Á®ãÂ∫èID(&lt;code>app-id&lt;/code>)&lt;/li>
&lt;li>‰∏Ä‰∏™ÂîØ‰∏ÄÁöÑ HTTP ÁõëÂê¨Á´ØÂè£ (&lt;code>port&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>ÊÇ®ËøòÂ∫îËØ•ÂÜ≥ÂÆöÂ∞ÜÁªÑ‰ª∂ÈÖçÁΩÆÂ≠òÂÇ®Âú®Âì™ÈáåÔºà&lt;code>components-path&lt;/code>Ôºâ„ÄÇ&lt;/p>
&lt;p>‰ª•‰∏ãÂëΩ‰ª§ÂèØ‰ª•‰ªéÂ§ö‰∏™ÁªàÁ´ØËøêË°å‰ª•ÂêØÂä®ÊØè‰∏™ÊúçÂä°ÔºåÂπ∂ÊõøÊç¢Áõ∏Â∫îÁöÑÂÄº„ÄÇ&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">dapr run --app-id &amp;lt;app-id&amp;gt; --app-port &amp;lt;port&amp;gt; --components-path &amp;lt;components-path&amp;gt; -- dotnet run -p &amp;lt;project&amp;gt; --urls http://localhost:&amp;lt;port&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>ËØ¥ÊòéÔºö&lt;/strong> Ê≠§ÂëΩ‰ª§Â∞Ü‰ΩøÁî® &lt;code>dapr run&lt;/code> Êù•ÂêØÂä®ÊØè‰∏™ÊúçÂä°ÂèäÂÖ∂ sidecar„ÄÇ ÂëΩ‰ª§ÁöÑÂâçÂçäÈÉ®ÂàÜÔºàÂú® &lt;code>--&lt;/code>‰πãÂâçÔºâ Â∞ÜÊâÄÈúÄÁöÑÈÖçÁΩÆ‰º†ÈÄíÁªô Dapr CLI„ÄÇ ÂëΩ‰ª§ÁöÑÂêéÂçäÈÉ®ÂàÜÔºà &lt;code>--&lt;/code>‰πãÂêéÔºâÂ∞ÜÊâÄÈúÄÁöÑÈÖçÁΩÆ‰º†ÈÄíÁªô &lt;code>dotnet run&lt;/code> ÂëΩ‰ª§„ÄÇ&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">üí° Ports&lt;/h4>
Âõ†‰∏∫ÊÇ®ÈúÄË¶Å‰∏∫ÊØè‰∏™ÊúçÂä°ÈÖçÁΩÆ‰∏Ä‰∏™Áã¨ÁâπÁöÑÁ´ØÂè£Ôºå ÊÇ®ÂèØ‰ª•‰ΩøÁî®Ê≠§ÂëΩ‰ª§Â∞ÜËØ•Á´ØÂè£ÂÄº‰º†ÈÄíÂà∞ &lt;strong>ÂêåÊó∂&lt;/strong>‰º†ÈÄíÁªô Dapr ÂíåÂ∫îÁî®ÊúçÂä°„ÄÇ &lt;code>--urls http://localhostÔºö&amp;lt;port&amp;gt;&lt;/code> Â∞ÜÈÖçÁΩÆ ASP.NET Core Êù•ÁõëÂê¨ÊâÄÊèê‰æõÁ´ØÂè£‰∏äÁöÑÊµÅÈáè„ÄÇ Âú®ÂëΩ‰ª§Ë°åÂ§Ñ‰ΩøÁî®ÈÖçÁΩÆÊØîÂú®ÂÖ∂‰ªñÂú∞ÊñπÁ°¨ÁºñÁ†ÅÁõëÂê¨Á´ØÂè£Êõ¥ÁÅµÊ¥ª„ÄÇ
&lt;/div>
&lt;p>Â¶ÇÊûúÊÇ®ÁöÑÊúçÂä°ÈÉΩ‰∏çÊé•Âèó‰ªª‰ΩïHTTPÊµÅÈáèÔºå ÁÑ∂ÂêéÈÄöËøáÂà†Èô§ &lt;code>--app-port&lt;/code> Âíå &lt;code>--urls&lt;/code> ÂèÇÊï∞Êù•‰øÆÊîπ‰∏äÈù¢ÁöÑÂëΩ‰ª§„ÄÇ&lt;/p>
&lt;h3 id="‰∏ã‰∏ÄÊ≠•">‰∏ã‰∏ÄÊ≠•&lt;/h3>
&lt;p>Â¶ÇÊûúÊÇ®ÈúÄË¶ÅË∞ÉËØïÔºåËØ∑‰ΩøÁî®Ë∞ÉËØïÂô®ÁöÑÈôÑÂä†ÂäüËÉΩÂ∞ÜÂÖ∂ÈôÑÂä†Âà∞Ê≠£Âú®ËøêË°åÁöÑËøõÁ®ã‰∏≠„ÄÇ&lt;/p>
&lt;p>Â¶ÇÊûúÊÇ®ÊÉ≥Ë¶Å‰º∏Áº©Ëøô‰∏™ÊñπÊ≥ïÔºå‰ª•ÈÉ®ÁΩ≤Êõ¥Â§öÁöÑÂ∫îÁî®ÔºåÂèØ‰ª•ËÄÉËôëÊûÑÂª∫‰∏Ä‰∏™ËÑöÊú¨Ôºå‰∏∫ÊÇ®ÁöÑÊï¥‰∏™Â∫îÁî®Á®ãÂ∫èËá™Âä®ÂåñÊ≠§ËøáÁ®ã„ÄÇ&lt;/p></description></item></channel></rss>