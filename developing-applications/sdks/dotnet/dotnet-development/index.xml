<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – 使用 Dapr .NET SDK 开发应用程序</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/</link><description>Recent content in 使用 Dapr .NET SDK 开发应用程序 on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: 使用Docker-Compose进行Dapr .NET SDK开发</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-docker-compose/</guid><description>
&lt;h2 id="docker-compose">Docker-Compose&lt;/h2>
&lt;p>&lt;em>这篇文章是一篇与 .NET 相关的文章，另见 [使用 Docker 进行 Dapr 自托管]({{ ref self-hosted-with-docker.md }}))&lt;/em>&lt;/p>
&lt;p>&lt;code>docker-compose &lt;/code> 是一个脚手架工具，它被包含在Docker的桌面版本中，可以用来一次同时运行多个容器。 它是将多个容器的生命周期自动化管理的一种方式，并为 Kubernetes 的应用程序提供类似于生产环境的开发体验。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>优势:&lt;/strong> 由于&lt;code>docker-compose&lt;/code> 为接管了容器管理，所以我们可以将依赖关系作为为应用程序定义的一部分，并停止在机器上的长运行容器。&lt;/li>
&lt;li>&lt;strong>缺点：&lt;/strong> 需要更多资源，服务需要被容器化才能使用。&lt;/li>
&lt;li>&lt;strong>缺点：&lt;/strong> 不熟悉Docker的情况下，可能对调试和问题诊断造成困难。&lt;/li>
&lt;/ul>
&lt;h3 id="使用docker-compose">使用docker-compose&lt;/h3>
&lt;p>从.NET的角度来看，使用 &lt;code>docker-compose&lt;/code> 配合 Dapr 不需要专门的指导。 &lt;code>docker-compose&lt;/code> 运行容器，一旦您的服务放在容器中，它的配置与其他任意的编程技术都是相似的。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">💡 App Port&lt;/h4>
在容器中，ASP.NET Core应用默认监听80端口。 当有需要时，您可在晚些时候进行&lt;code>--app-port&lt;/code>的配置。
&lt;/div>
&lt;p>总结一下：&lt;/p>
&lt;ul>
&lt;li>为每个服务创建一个 &lt;code>Dockerfile&lt;/code>&lt;/li>
&lt;li>创建一个 &lt;code>docker-compose.yaml&lt;/code> 并将其添加到源码仓库中&lt;/li>
&lt;/ul>
&lt;p>要了解如何编写 &lt;code>docker-compose.yaml&lt;/code> ，请查阅： &lt;a href="https://github.com/dapr/samples/tree/master/hello-docker-compose">Hello, docker-compose sample&lt;/a> 。&lt;/p>
&lt;p>就像为每个服务在本地运行 &lt;code>dapr run&lt;/code> 一样，你需要选择一个唯一的app-id。 将此app-id作为容器名称简单易记。&lt;/p>
&lt;p>Compose 文件应至少包含：&lt;/p>
&lt;ul>
&lt;li>容器使用的网络&lt;/li>
&lt;li>每个服务的容器&lt;/li>
&lt;li>一个指定服务端口和app-id的&lt;code>&amp;lt;service&amp;gt;-daprd&lt;/code> 边车容器。&lt;/li>
&lt;li>在容器中运行的其他依赖组件 (例如redis)&lt;/li>
&lt;li>可选：Dapr placement容器 (适用于 Actors)&lt;/li>
&lt;/ul>
&lt;p>您也可以在 &lt;a href="https://github.com/dotnet-architecture/eShopOnDapr/blob/master/docker-compose.yml">eShopOnContainers&lt;/a> 示例应用程序中查看一个更大规模的示例。&lt;/p></description></item><item><title>Developing-Applications: Dapr .NET SDK 与 Tye 项目开发</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-tye/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-tye/</guid><description>
&lt;h2 id="tye项目">Tye项目&lt;/h2>
&lt;p>&lt;a href="https://github.com/dotnet/tye/">.NET Project Tye&lt;/a> 是一种微服务开发工具，旨在使多个.NET 服务更容易运行。 Tye 使您能够将多个 .NET 服务、流程和容器镜像的配置存储为可运行的应用程序。&lt;/p>
&lt;p>Tye 对 .NET Dapr 开发者有利，因为：&lt;/p>
&lt;ul>
&lt;li>Tye有能力将自动化的dapr CLI内置。&lt;/li>
&lt;li>Tye了解.NET的惯例，对.NET服务几乎不需要配置。&lt;/li>
&lt;li>Tye可以管理你在容器中的依赖关系的生命周期&lt;/li>
&lt;/ul>
&lt;p>优点/缺点:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>优点：&lt;/strong> Tye 可以实现上述所有步骤的自动化。 您不再需要思考像端口或应用ID这样的概念。&lt;/li>
&lt;li>**优点：**由于Tye也可以为你管理容器，你可以将这些作为应用程序定义的一部分，并停止你机器上长期运行的容器。&lt;/li>
&lt;/ul>
&lt;h3 id="使用-tye">使用 Tye&lt;/h3>
&lt;p>按照&lt;a href="https://github.com/dotnet/tye/blob/master/docs/getting_started.md">Tye入门&lt;/a>来安装 &lt;code>tye&lt;/code> CLI 并为您的应用程序创建&lt;code>tye.yaml&lt;/code>。&lt;/p>
&lt;p>接下来按照 &lt;a href="https://github.com/dotnet/tye/blob/master/docs/recipes/dapr.md">Tye Dapr配方&lt;/a> 中的步骤来添加Dapr。 请确保在 &lt;code>tye.yaml&lt;/code> 中指定组件目录中包含 &lt;code>components-path&lt;/code> 的相对路径。&lt;/p>
&lt;p>接下来添加任何额外的容器依赖项，并将组件定义添加到你之前创建的文件夹中。&lt;/p>
&lt;p>你最终应该得到这样的结果：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">store-application&lt;/span>
&lt;span style="color:#f92672">extensions&lt;/span>:
&lt;span style="color:#75715e"># Configuration for dapr goes here.&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dapr&lt;/span>
&lt;span style="color:#f92672">components-path&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;components-path&amp;gt; &lt;/span>
&lt;span style="color:#75715e"># Services to run go here.&lt;/span>
&lt;span style="color:#f92672">services&lt;/span>:
&lt;span style="color:#75715e"># 此名称将被用作 app-id. 对于.NET 项目，Tye 只需要项目文件的路径。&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">orders&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">orders/orders.csproj&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">products&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">products/products.csproj&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">store&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">store/store.csproj&lt;/span>
&lt;span style="color:#75715e"># Containers you want to run need an image name and set of ports to expose.&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;span style="color:#f92672">bindings&lt;/span>:
- &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">6973&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用应用程序代码在源控制中签入 &lt;code>tye.yaml&lt;/code> 。&lt;/p>
&lt;p>您现在可以使用 &lt;code>tye run&lt;/code> 从一个终端启动整个应用程序。 运行时，Tye有一个仪表板在 &lt;code>http://localhost:8000&lt;/code> 查看应用程序状态和日志。&lt;/p>
&lt;h3 id="下一步">下一步&lt;/h3>
&lt;p>Tye 将您的服务按正常 .NET 进程在本地运行。 如果您需要调试，请使用调试器的附加功能将其附加到正在运行的进程中。 由于 Tye 具有 .NE T意识，它有能力&lt;a href="https://github.com/dotnet/tye/blob/master/docs/reference/commandline/tye-run.md#options">启动一个暂停的进程&lt;/a>以进行启动调试。&lt;/p>
&lt;p>如果您想要在容器中进行本地测试，Tye 也有 &lt;a href="https://github.com/dotnet/tye/blob/master/docs/reference/commandline/tye-run.md#options">选项&lt;/a> 来运行您的服务。&lt;/p></description></item><item><title>Developing-Applications: Dapr .NET SDK 与 Dapr CLI 进行开发</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-dapr-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/dotnet-development-dapr-cli/</guid><description>
&lt;h2 id="dapr-cli">Dapr CLI&lt;/h2>
&lt;p>&lt;em>这篇文章是一篇与 .NET 相关的文章，另见 [使用 Docker 进行 Dapr 自托管]({{ ref self-hosted-overview.md }})&lt;/em>&lt;/p>
&lt;p>Dapr CLI 为您提供了一个很好的工作基础，通过初始化本地重新分配容器、拉取容器、放置服务和用于重新分配的组件清单。 这将使您能够在没有额外设置的新安装中处理以下构建块：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/">服务调用&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/">状态存储&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/pubsub/">发布/订阅&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/building-blocks/actors/">Actors&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>您可以用 &lt;code>dapr run&lt;/code> 来运行.NET 服务，作为您在本地开发的策略。 为每个服务的这些命令，以便启动您的应用程序。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>好处：&lt;/strong> ，这是很容易设置，因为它的默认Dapr安装的一部分&lt;/li>
&lt;li>&lt;strong>坏处：&lt;/strong> 这在你的机器上使用长期运行的 docker 容器，这可能是不可取的&lt;/li>
&lt;li>&lt;strong>坏处：&lt;/strong> 这种方法的可伸缩性很差，因为它需要每个服务运行一个单独的命令&lt;/li>
&lt;/ul>
&lt;h3 id="使用-dapr-cli">使用 Dapr CLI&lt;/h3>
&lt;p>对于您需要选择的每个服务，需要如下内容：&lt;/p>
&lt;ul>
&lt;li>一个唯一的地址应用程序ID(&lt;code>app-id&lt;/code>)&lt;/li>
&lt;li>一个唯一的 HTTP 监听端口 (&lt;code>port&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>您还应该决定将组件配置存储在哪里（&lt;code>components-path&lt;/code>）。&lt;/p>
&lt;p>以下命令可以从多个终端运行以启动每个服务，并替换相应的值。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">dapr run --app-id &amp;lt;app-id&amp;gt; --app-port &amp;lt;port&amp;gt; --components-path &amp;lt;components-path&amp;gt; -- dotnet run -p &amp;lt;project&amp;gt; --urls http://localhost:&amp;lt;port&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明：&lt;/strong> 此命令将使用 &lt;code>dapr run&lt;/code> 来启动每个服务及其 sidecar。 命令的前半部分（在 &lt;code>--&lt;/code>之前） 将所需的配置传递给 Dapr CLI。 命令的后半部分（ &lt;code>--&lt;/code>之后）将所需的配置传递给 &lt;code>dotnet run&lt;/code> 命令。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">💡 Ports&lt;/h4>
因为您需要为每个服务配置一个独特的端口， 您可以使用此命令将该端口值传递到 &lt;strong>同时&lt;/strong>传递给 Dapr 和应用服务。 &lt;code>--urls http://localhost：&amp;lt;port&amp;gt;&lt;/code> 将配置 ASP.NET Core 来监听所提供端口上的流量。 在命令行处使用配置比在其他地方硬编码监听端口更灵活。
&lt;/div>
&lt;p>如果您的服务都不接受任何HTTP流量， 然后通过删除 &lt;code>--app-port&lt;/code> 和 &lt;code>--urls&lt;/code> 参数来修改上面的命令。&lt;/p>
&lt;h3 id="下一步">下一步&lt;/h3>
&lt;p>如果您需要调试，请使用调试器的附加功能将其附加到正在运行的进程中。&lt;/p>
&lt;p>如果您想要伸缩这个方法，以部署更多的应用，可以考虑构建一个脚本，为您的整个应用程序自动化此过程。&lt;/p></description></item></channel></rss>