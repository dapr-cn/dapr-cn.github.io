<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – Dapr 开发套件 (SDKs)</title><link>https://docs.dapr.io/developing-applications/sdks/</link><description>Recent content in Dapr 开发套件 (SDKs) on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/sdks/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: Dapr .NET SDK</title><link>https://docs.dapr.io/developing-applications/sdks/dotnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/dotnet/</guid><description>
&lt;p>Dapr提供了帮助开发 .NET 应用程序各种包。 你可以使用他们来创建 .NET 客户端、服务器和 virtual actors。&lt;/p>
&lt;div class="card-deck">
&lt;div class="card">
&lt;div class="card-body">
&lt;h5 class="card-title">&lt;b>客户端&lt;/b>&lt;/h5>
&lt;p class="card-text">创建与 Dapr sidecar 和其他Dapr 应用程序交互的 .NET 客户端。&lt;/p>
&lt;a href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-client/" class="stretched-link">&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">
&lt;h5 class="card-title">&lt;b>服务器&lt;/b>&lt;/h5>
&lt;p class="card-text">使用 Dapr SDK 在 .NET 中编写服务器和服务。 包括对 ASP.NET 的支持。&lt;/p>
&lt;a href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-server/" class="stretched-link">&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">
&lt;h5 class="card-title">&lt;b>Actors&lt;/b>&lt;/h5>
&lt;p class="card-text">在 .NET 中创建具有状态、reminders/timer 和方法的 virtual actors。&lt;/p>
&lt;a href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-actors/" class="stretched-link">&lt;/a>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>&lt;br />&lt;/p>
&lt;div class="card-deck">
&lt;div class="card">
&lt;div class="card-body">
&lt;h5 class="card-title">&lt;b>开发&lt;/b>&lt;/h5>
&lt;p class="card-text">了解 .NET Dapr 应用程序的本地开发选项&lt;/p>
&lt;a href="https://docs.dapr.io/developing-applications/sdks/dotnet/dotnet-development/" class="stretched-link">&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">
&lt;h5 class="card-title">&lt;b>示例&lt;/b>&lt;/h5>
&lt;p class="card-text">克隆.NET SDK repo来尝试一些示例并快速开始。&lt;/p>
&lt;a href="https://github.com/dapr/dotnet-sdk/tree/master/examples" class="stretched-link">&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">
&lt;h5 class="card-title">&lt;b>疑难解答&lt;/b>&lt;/h5>
&lt;p class="card-text">关于 Dapr API，CLI，资源绑定及更多内容的详细文档&lt;/p>
&lt;a href="https://docs.dapr.io/reference/" class="stretched-link">&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">
&lt;h5 class="card-title">&lt;b>Nuget 包&lt;/b>&lt;/h5>
&lt;p class="card-text">为您的 .NET应用程序 添加 .NET SDK 的 Dapr 包。&lt;/p>
&lt;a href="https://www.nuget.org/profiles/dapr.io" class="stretched-link">&lt;/a>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br /></description></item><item><title>Developing-Applications: Dapr PHP SDK</title><link>https://docs.dapr.io/developing-applications/sdks/php/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/php/</guid><description>
&lt;p>Dapr提供了帮助开发 PHP 应用程序各种包。 你可以使用他们来创建 PHP 客户端、服务器和 virtual actors。&lt;/p>
&lt;h2 id="设置">设置&lt;/h2>
&lt;h3 id="先决条件">先决条件&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://getcomposer.org/">Composer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.php.net/">PHP 8&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="可选条件">可选条件&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.docker.com/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://xdebug.org/">xdebug&lt;/a> &amp;ndash; for debugging&lt;/li>
&lt;/ul>
&lt;h2 id="初始化您的项目">初始化您的项目&lt;/h2>
&lt;p>在您想要创建服务的目录中，运行 &lt;code>composer init&lt;/code> 并确认命令执行。 安装 &lt;code>dapr/php-sdk&lt;/code> 和您可能希望使用的其他依赖项。&lt;/p>
&lt;h2 id="配置服务">配置服务&lt;/h2>
&lt;p>创建一个 config.php ，复制下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Dapr\Actors\Generators\ProxyFactory&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Dapr\Middleware\Defaults\&lt;/span>{&lt;span style="color:#a6e22e">Response\ApplicationJson&lt;/span>,&lt;span style="color:#a6e22e">Tracing&lt;/span>};
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Psr\Log\LogLevel&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">DI\&lt;/span>{&lt;span style="color:#a6e22e">env&lt;/span>,&lt;span style="color:#a6e22e">get&lt;/span>};
&lt;span style="color:#66d9ef">return&lt;/span> [
&lt;span style="color:#75715e">// set the log level
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.log.level&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">LogLevel&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">WARNING&lt;/span>,
&lt;span style="color:#75715e">// Generate a new proxy on each request - recommended for development
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.actors.proxy.generation&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">ProxyFactory&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">GENERATED&lt;/span>,
&lt;span style="color:#75715e">// put any subscriptions here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.subscriptions&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> [],
&lt;span style="color:#75715e">// if this service will be hosting any actors, add them here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.actors&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> [],
&lt;span style="color:#75715e">// if this service will be hosting any actors, configure how long until dapr should consider an actor idle
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.actors.idle_timeout&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;span style="color:#75715e">// if this service will be hosting any actors, configure how often dapr will check for idle actors
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.actors.scan_interval&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;span style="color:#75715e">// if this service will be hosting any actors, configure how long dapr will wait for an actor to finish during drains
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.actors.drain_timeout&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;span style="color:#75715e">// if this service will be hosting any actors, configure if dapr should wait for an actor to finish
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.actors.drain_enabled&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;span style="color:#75715e">// you shouldn&amp;#39;t have to change this, but the setting is here if you need to
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.port&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;DAPR_HTTP_PORT&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;3500&amp;#39;&lt;/span>),
&lt;span style="color:#75715e">// add any custom serialization routines here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.serializers.custom&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> [],
&lt;span style="color:#75715e">// add any custom deserialization routines here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.deserializers.custom&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> [],
&lt;span style="color:#75715e">// the following has no effect, as it is the default middlewares and processed in order specified
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr.http.middleware.request&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> [&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">Tracing&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)],
&lt;span style="color:#e6db74">&amp;#39;dapr.http.middleware.response&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> [&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">ApplicationJson&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>), &lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">Tracing&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)],
];
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建一个服务">创建一个服务&lt;/h2>
&lt;p>修改&lt;code>index.php&lt;/code>，内容如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">require_once&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Dapr\App&lt;/span>;
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">configure&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span>(&lt;span style="color:#a6e22e">\DI\ContainerBuilder&lt;/span> $builder) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $builder&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">addDefinitions&lt;/span>(&lt;span style="color:#66d9ef">__DIR__&lt;/span> &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/config.php&amp;#39;&lt;/span>));
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/hello/{name}&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $name) {
&lt;span style="color:#66d9ef">return&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;hello&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $name];
});
$app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="试试吧">试试吧&lt;/h2>
&lt;p>用&lt;code>dapr init&lt;/code>初始化dapr，然后用&lt;code>dapr run -a dev -p 3000-php -S 0.0.0.0:3000&lt;/code>启动项目。&lt;/p>
&lt;p>现在，您可以打开网络浏览器访问&lt;a href="http://localhost:3000/hello/world"> http://localhost:3000/ hello/world &lt;/a>用您的名字，宠物的名字或您想要的任何名称替换&lt;code>world&lt;/code>。&lt;/p>
&lt;p>恭喜，你已经建立了你的Dapr 服务！ 我很高兴看到您会怎么做！&lt;/p>
&lt;h2 id="更多信息">更多信息&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://packagist.org/packages/dapr/php-sdk">Packagist&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/sdk-serialization/">Dapr SDK 序列化&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: Dapr Python SDK</title><link>https://docs.dapr.io/developing-applications/sdks/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/python/</guid><description>
&lt;p>Dapr提供了帮助开发Python应用程序各种包。 你可以使用他们来创建 Python 客户端、服务器和 virtual actors。&lt;/p>
&lt;h2 id="可用软件包">可用软件包&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/python/python-client/">&lt;strong>Dapr 客户端&lt;/strong>&lt;/a> 用于与 Python 应用程序交互的 Dapr 边车和其他 Dapr 应用程序&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/python/python-actor/">&lt;strong>Dapr actor&lt;/strong>&lt;/a> 用于使用 Python 创建并和有状态的virtual actors 交互。&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/python/python-sdk-extensions/">&lt;strong>扩展&lt;/strong>&lt;/a> 用于将Dapr与其他 Python 框架兼容
&lt;ul>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/python/python-sdk-extensions/python-grpc/">&lt;strong>gRPC 扩展&lt;/strong>&lt;/a> 用创建 Dapr gRPC 服务器&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/python/python-sdk-extensions/python-fastapi/">&lt;strong>FastAPI 扩展&lt;/strong>&lt;/a> 向 FastAPI 应用程序中添加 Dapr actor 的功能&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/python/python-sdk-extensions/python-flask/">&lt;strong>Flask 扩展&lt;/strong>&lt;/a> 向Flask 应用程序添加 Dapr actor 的功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装-dapr-模块">安装 Dapr 模块&lt;/h2>
&lt;ul class="nav nav-tabs" id="tabs-6" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-6-stable-tab" data-toggle="tab" href="#tabs-6-stable" role="tab"
aria-controls="tabs-6-stable" aria-selected="true">
Stable
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-6-development-tab" data-toggle="tab" href="#tabs-6-development" role="tab"
aria-controls="tabs-6-development" aria-selected="false">
Development
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-6-content">
&lt;div class="tab-pane fade show active" id="tabs-6-stable" role="tabpanel" aria-labelled-by="tabs-6-stable-tab">
&lt;br />&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install dapr
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-6-development" role="tabpanel" aria-labelled-by="tabs-6-development-tab">
&lt;br />&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
开发包包含的功能和行为将兼容此前发行的 Dapr 运行时。 在安装 dapr-dev 包之前，请务必卸载以前任意稳定版本的 Python SDK 扩展包。
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install dapr-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="试试吧">试试吧&lt;/h2>
&lt;p>克隆Python SDK 仓库来尝试一些 &lt;a href="https://github.com/dapr/python-sdk/tree/master/examples">示例&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/dapr/python-sdk.git
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="详情">详情&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://pypi.org/user/dapr.io/">Python 软件包索引 (PyPI)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.dapr.io/developing-applications/sdks/sdk-serialization/">Dapr SDK 序列化&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing-Applications: Dapr SDK中的序列化</title><link>https://docs.dapr.io/developing-applications/sdks/sdk-serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/sdk-serialization/</guid><description>
&lt;p>Dapr的SDK为下面两种情况提供序列化： 首先是对于通过请求和响应的有效载荷传递的API对象。 其次，对于要持久化的对象。 对于这两种情况，SDK都提供了默认的序列化实现。 在Java SDK中，由&lt;a href="https://dapr.github.io/java-sdk/io/dapr/serializer/DefaultObjectSerializer.html">DefaultObjectSerializer&lt;/a>这个类提供JSON序列化功能。&lt;/p>
&lt;h2 id="服务调用">服务调用&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> DaprClient client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
client&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">invokeService&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myappid&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;saySomething&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;My Message&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> HttpExtension&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">POST&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面的示例中，应用程序将收到一个对&lt;code>saySomething&lt;/code>方法的&lt;code>POST&lt;/code>请求，请求的有效载荷为&lt;code>&amp;quot;My Message&amp;quot;&lt;/code>，这句说明中给它添加了引号是因为序列化工具会把输入的String字符串序列化为JSON。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">POST /saySomething HTTP/1.1
Host: localhost
Content-Type: text/plain
Content-Length: 12
&amp;#34;My Message&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="状态管理">状态管理&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> DaprClient client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
client&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">saveState&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyStateStore&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;MyKey&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;My Message&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个例子中，&lt;code>My Message&lt;/code>将被保存下来。 在这句说明中，没有给数据加上引号是因为Dapr的API会在保存JSON请求对象之前在内部进行解析。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JSON" data-lang="JSON">[
{
&lt;span style="color:#f92672">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MyKey&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;My Message&amp;#34;&lt;/span>
}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pubsub">PubSub&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> DaprClient client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
client&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">publishEvent&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TopicName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;My Message&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>事件发布，内容被序列化为&lt;code>byte[]&lt;/code>类型并发送到Dapr sidecar。 订阅者将以&lt;a href="https://github.com/cloudevents/spec">CloudEvent&lt;/a>的格式收到它。 CloudEvent将&lt;code>data&lt;/code>定义为String。 Dapr SDK还为&lt;code>CloudEvent&lt;/code>对象提供了一个内置的反序列化工具。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/TopicName&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">handleMessage&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@RequestBody&lt;/span>&lt;span style="color:#f92672">(&lt;/span>required &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Dapr&amp;#39;s event is compliant to CloudEvent.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> CloudEvent event &lt;span style="color:#f92672">=&lt;/span> CloudEvent&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">deserialize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>body&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
CloudEvent event &lt;span style="color:#f92672">=&lt;/span> CloudEvent&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">deserialize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>body&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="绑定">绑定&lt;/h2>
&lt;p>在这种情况下，对象也会被序列化为&lt;code>byte[]&lt;/code>类型，而输入绑定会按原样接收原始的&lt;code>byte[]&lt;/code>，并将其反序列化为预期的对象类型。&lt;/p>
&lt;ul>
&lt;li>输出绑定:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> DaprClient client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> DaprClientBuilder&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
client&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">invokeBinding&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sample&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;My Message&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>输入绑定:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/sample&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">handleInputBinding&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@RequestBody&lt;/span>&lt;span style="color:#f92672">(&lt;/span>required &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
String message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> DefaultObjectSerializer&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">deserialize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>body&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>message&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>应当会出现如下输出:&lt;/p>
&lt;pre>&lt;code>My Message
&lt;/code>&lt;/pre>&lt;h2 id="调用-actor-方法">调用 Actor 方法&lt;/h2>
&lt;p>Actor方法调用的对象序列化和反序列化与服务方法调用相同，唯一不同的是应用程序不需要反序列化请求或序列化响应，因为这一切都由SDK透明地完成。&lt;/p>
&lt;p>对于Actor的方法，SDK只支持无参或一个参数的方法。&lt;/p>
&lt;ul>
&lt;li>调用一个Actor的方法:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
ActorProxyBuilder builder &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ActorProxyBuilder&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DemoActor&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
String result &lt;span style="color:#f92672">=&lt;/span> actor&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">invokeActorMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;say&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;My Message&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>实现一个Actor的方法:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">say&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String something&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>something&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;OK&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>应当会出现如下输出:&lt;/p>
&lt;pre>&lt;code> My Message
&lt;/code>&lt;/pre>&lt;h2 id="actor-状态管理">Actor 状态管理&lt;/h2>
&lt;p>Actor也可以有状态。 在这种情况下，状态管理器将使用状态序列化工具对对象进行序列化和反序列化，并对应用程序进行透明处理。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">actorMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String message&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Reads a state from key and deserializes it to String.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> String previousMessage &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">super&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getActorStateManager&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;lastmessage&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">// Sets the new state for the key after serializing it.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">super&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getActorStateManager&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;lastmessage&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> message&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> previousMessage&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="默认序列化工具">默认序列化工具&lt;/h2>
&lt;p>Dapr的默认序列化工具是JSON序列化工具，其期望如下:&lt;/p>
&lt;ol>
&lt;li>使用基本的&lt;a href="https://www.w3schools.com/js/js_json_datatypes.asp">JSON数据类型&lt;/a>来实现跨语言和跨平台的兼容性：字符串、数字、数组、布尔值、空值和另一个JSON对象。 应用程序的可序列化对象中的每一个复杂的属性类型（例如DateTime），都应该被表示为JSON的基本类型之一。&lt;/li>
&lt;li>用默认序列化工具持久化的数据也应该被保存为JSON对象，不需要额外的引号或编码。 下面的例子显示了一个字符串和一个JSON对象在Redis存储中的样子。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">redis-cli MGET &lt;span style="color:#e6db74">&amp;#34;ActorStateIT_StatefulActorService||StatefulActorTest||1581130928192||message
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>This is a message to be saved and retrieved.&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> redis-cli MGET &lt;span style="color:#e6db74">&amp;#34;ActorStateIT_StatefulActorService||StatefulActorTest||1581130928192||mydata
&lt;/span>&lt;span style="color:#e6db74">{&amp;#34;&lt;/span>value&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>My data value.&lt;span style="color:#e6db74">&amp;#34;}
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>自定义序列化工具必须将对象序列化为&lt;code>byte[]&lt;/code>类型。&lt;/li>
&lt;li>自定义序列化工具必须将&lt;code>byte[]&lt;/code>反序列化为对象。&lt;/li>
&lt;li>当用户提供一个自定义的序列化工具时，它应该以&lt;code>byte[]&lt;/code>的形式被传输或持久化， 持久化时，也应当编码为Base64字符串， 大多数JSON库都能够完成这个功能。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">redis-cli MGET &lt;span style="color:#e6db74">&amp;#34;ActorStateIT_StatefulActorService||StatefulActorTest||1581130928192||message
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>VGhpcyBpcyBhIG1lc3NhZ2UgdG8gYmUgc2F2ZWQgYW5kIHJldHJpZXZlZC4&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> redis-cli MGET &lt;span style="color:#e6db74">&amp;#34;ActorStateIT_StatefulActorService||StatefulActorTest||1581130928192||mydata
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>eyJ2YWx1ZSI6Ik15IGRhdGEgdmFsdWUuIn0&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>目前而言，&lt;a href="https://github.com/dapr/java-sdk/">Java SDK&lt;/a>是唯一实现该规范的Dapr SDK。 在不久的将来，其他SDK也会实现同样的功能。&lt;/em>&lt;/p></description></item></channel></rss>