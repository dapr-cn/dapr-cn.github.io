<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dapr 文档库 – Virtual Actors</title><link>https://docs.dapr.io/developing-applications/sdks/php/php-actors/</link><description>Recent content in Virtual Actors on Dapr 文档库</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.dapr.io/developing-applications/sdks/php/php-actors/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing-Applications: 参考：actor</title><link>https://docs.dapr.io/developing-applications/sdks/php/php-actors/php-actor-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.dapr.io/developing-applications/sdks/php/php-actors/php-actor-reference/</guid><description>
&lt;h2 id="代理模式">代理模式&lt;/h2>
&lt;p>Actor 代理有四种处理方式。 每种模式都需要您在开发和生产过程中权衡。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#a6e22e">\Dapr\Actors\Generators\ProxyFactory&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">GENERATED&lt;/span>;
&lt;span style="color:#a6e22e">\Dapr\Actors\Generators\ProxyFactory&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">GENERATED_CACHED&lt;/span>;
&lt;span style="color:#a6e22e">\Dapr\Actors\Generators\ProxyFactory&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ONLY_EXISTING&lt;/span>;
&lt;span style="color:#a6e22e">\Dapr\Actors\Generators\ProxyFactory&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">DYNAMIC&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>它可以使用 &lt;code>dapr.actors.proxy.generate&lt;/code> 配置密钥。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">&lt;li class="nav-item">&lt;a class="nav-link active"
id="tabs-0-generated-tab" data-toggle="tab" href="#tabs-0-generated" role="tab"
aria-controls="tabs-0-generated" aria-selected="true">
GENERATED
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-0-generated_cached-tab" data-toggle="tab" href="#tabs-0-generated_cached" role="tab"
aria-controls="tabs-0-generated_cached" aria-selected="false">
GENERATED_CACHED
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-0-only_existing-tab" data-toggle="tab" href="#tabs-0-only_existing" role="tab"
aria-controls="tabs-0-only_existing" aria-selected="false">
ONLY_EXISTING
&lt;/a>
&lt;/li>&lt;li class="nav-item">&lt;a class="nav-link"
id="tabs-0-dynamic-tab" data-toggle="tab" href="#tabs-0-dynamic" role="tab"
aria-controls="tabs-0-dynamic" aria-selected="false">
DYNAMIC
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active" id="tabs-0-generated" role="tabpanel" aria-labelled-by="tabs-0-generated-tab">
&lt;br />&lt;p>这是默认的模式。 在这种模式下，每次请求都会生成一个 &lt;code>eval&lt;/code>类， 它主要用于开发环境而不能应用于生产。 它主要用于开发环境而不能应用于生产。&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-0-generated_cached" role="tabpanel" aria-labelled-by="tabs-0-generated_cached-tab">
&lt;br />&lt;p>这与 &lt;code>ProxyModes::GENERATED&lt;/code> 相同，但这个类存储在临时文件中，所以不需要在每个请求中重新生成。 它不知道何时更新缓存的类，也无法手动生成文件时提供，因此不建议在开发中使用它&lt;/p>
&lt;/div>
&lt;div class="tab-pane fade" id="tabs-0-only_existing" role="tabpanel" aria-labelled-by="tabs-0-only_existing-tab">
&lt;br />&lt;p>在这种模式下，如果不存在代理类，将会抛出异常。 可以用在当你不想在生产生产环境中生成代码时 您必须确保class生成并自动加载。&lt;/p>
&lt;h3 id="生成代理">生成代理&lt;/h3>
&lt;p>您可以创建一个编写器脚本来根据需要生成代理，以利用&lt;code>ONLY_EXISTING&lt;/code>模式。&lt;/p>
&lt;p>创建 &lt;code>ProxyCompiler.php&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ProxyCompiler&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">PROXIES&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
&lt;span style="color:#a6e22e">MyActorInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>,
&lt;span style="color:#a6e22e">MyOtherActorInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>,
];
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">PROXY_LOCATION&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">__DIR__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/proxies/&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">compile&lt;/span>() {
&lt;span style="color:#66d9ef">try&lt;/span> {
$app &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">\Dapr\App&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>();
&lt;span style="color:#66d9ef">foreach&lt;/span>(&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">PROXIES&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $interface) {
$output &lt;span style="color:#f92672">=&lt;/span> $app&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">\DI\FactoryInterface&lt;/span> $factory) &lt;span style="color:#66d9ef">use&lt;/span> ($interface) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">\Dapr\Actors\Generators\FileGenerator&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">generate&lt;/span>($interface, $factory);
});
$reflection &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">ReflectionClass&lt;/span>($interface);
$dapr_type &lt;span style="color:#f92672">=&lt;/span> $reflection&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getAttributes&lt;/span>(&lt;span style="color:#a6e22e">\Dapr\Actors\Attributes\DaprType&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">newInstance&lt;/span>()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">type&lt;/span>;
$filename &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dapr_proxy_&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>$dapr_type&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39;.php&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">file_put_contents&lt;/span>(&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">PROXY_LOCATION&lt;/span>&lt;span style="color:#f92672">.&lt;/span>$filename, $output);
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Compiled: &lt;/span>&lt;span style="color:#e6db74">$interface&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
}
} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">Exception&lt;/span> $ex) {
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Failed to generate proxy for &lt;/span>&lt;span style="color:#e6db74">$interface\n{&lt;/span>$ex&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getMessage&lt;/span>()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> on line &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>$ex&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getLine&lt;/span>()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> in &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>$ex&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getFile&lt;/span>()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在 &lt;code>composer.json&lt;/code> 中为生成的代理添加一个 psr-4 自动加载器和脚本：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;Dapr\\Proxies\\&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;path/to/proxies&amp;#34;&lt;/span>
}
},
&lt;span style="color:#f92672">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;compile-proxies&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ProxyCompiler::compile&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后，将dapr配置为仅使用生成的代理：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#75715e">// in config.php
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> [
&lt;span style="color:#e6db74">&amp;#39;dapr.actors.proxy.generation&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">ProxyFactory&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ONLY_EXISTING&lt;/span>,
];
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade" id="tabs-0-dynamic" role="tabpanel" aria-labelled-by="tabs-0-dynamic-tab">
&lt;br />&lt;p>然而，在这种模式下，代理人满足了接口契约。 它实际上没有实现接口本身 (意指 &lt;code>instanceof&lt;/code> 将是 &lt;code>false&lt;/code>). 这种模式利用了PHP中的一些特性来工作，并适用于某些情况 其中code不能是&lt;code>eval&lt;/code>&amp;lsquo;d或生成。&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="请求列表">请求列表&lt;/h3>
&lt;p>无论使用哪种模式，创建actor代理都是非常方便的。 在创建actor代理对象时不会发出请求。&lt;/p>
&lt;p>当您在代理对象上调用方法时，actor只会为您实现的方法提供服务。 &lt;code>get_id()&lt;/code> 是本地处理的， &lt;code>get_emergder()&lt;/code>, &lt;code>delete_emergder()&lt;/code>, 等由 &lt;code>daprd&lt;/code> 处理。&lt;/p>
&lt;h2 id="添加actor实现">添加Actor实现&lt;/h2>
&lt;p>PHP 中的每个执行者必须实现 &lt;code>\Dapr\Actors\Iactor&lt;/code> 并使用 &lt;code>\Dapr\Actors\ActorTrait&lt;/code> 特性。 这个支持反射. 使用 &lt;code>\Dapr\Actors\Actor&lt;/code> 抽象基础类为您服务。 使用 &lt;code>\Dapr\Actors\Actor&lt;/code> 抽象基础类为您服务。 但是 如果您需要覆盖默认行为，您可以通过实现接口和使用特性来做到这一点。&lt;/p>
&lt;h2 id="激活和停用">激活和停用&lt;/h2>
&lt;p>当actor激活时，令牌文件将被写入临时目录（默认情况下，该目录位于linux下 &lt;code>'/tmp/dapr_'+ sha256（concat（Dapr type，Id））&amp;amp;lt;/ code&amp;amp;gt;和Windows上的&amp;lt;code&amp;gt;'％temp％/ dapr_'+ sha256（concat（Dapr type，Id））&amp;amp;lt;/ code&amp;amp;gt;）。 这种情况持续到actor或host停用。 这允许&amp;lt;code&amp;gt; on_activation &lt;/code>被调用一次 并且只有Dapr激活host上的actor时才执行一次。&lt;/p>
&lt;h2 id="性能">性能&lt;/h2>
&lt;p>actor方法的执行效率非常高， &lt;code>php-fpm&lt;/code> and &lt;code>nginx&lt;/code>, 或 IIS 在 Windows 上有一个生产设置。 虽然actor是在每个请求上都会构造，actor状态密钥是按需加载，而不是在每个请求时加载。 在分别加载每个key时会有一些开销。 可以通过在状态中存储数据数组来缓解这种情况 ，为了速度而牺牲了一些可用性。 不建议从一开始就这样做，而是在需要 时作为一种优化。&lt;/p>
&lt;h2 id="版本状态">版本状态&lt;/h2>
&lt;p>&lt;code>ActorState&lt;/code>对象中的变量名直接对应于存储库中的键名。 这意味着如果更改一个变量的类型或名称，可能会出现错误。 为了解决这个问题，您可能需要对状态进行版本控制 因此，您需要重写状态的加载和存储方式。 There are many ways to approach this, one such solution might be something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">VersionedState&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">\Dapr\Actors\ActorState&lt;/span> {
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @var int The current version of the state in the store. We give a default value of the current version.
&lt;/span>&lt;span style="color:#e6db74"> * However, it may be in the store with a different value.
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> $state_version &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @var int The current version of the data
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">VERSION&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Call when your actor activates.
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">upgrade&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">state_version&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>) {
$value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__get&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get_versioned_key&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>, $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">state_version&lt;/span>));
&lt;span style="color:#75715e">// update the value after updating the data structure
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__set&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get_versioned_key&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>), $value);
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">state_version&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">save_state&lt;/span>();
}
}
&lt;span style="color:#75715e">// if you upgrade all keys as needed in the method above, you don&amp;#39;t need to walk the previous
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// keys when loading/saving and you can just get the current version of the key.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get_previous_version&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $version)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">has_previous_version&lt;/span>($version) &lt;span style="color:#f92672">?&lt;/span> $version &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> $version;
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">has_previous_version&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $version)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">bool&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> $version &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">walk_versions&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $version, &lt;span style="color:#a6e22e">callable&lt;/span> $callback, &lt;span style="color:#a6e22e">callable&lt;/span> $predicate)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">mixed&lt;/span> {
$value &lt;span style="color:#f92672">=&lt;/span> $callback($version);
&lt;span style="color:#66d9ef">if&lt;/span>($predicate($value) &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">!&lt;/span>$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">has_previous_version&lt;/span>($version)) {
&lt;span style="color:#66d9ef">return&lt;/span> $value;
}
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">walk_versions&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get_previous_version&lt;/span>($version), $callback, $predicate);
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get_versioned_key&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $key, &lt;span style="color:#a6e22e">int&lt;/span> $version) {
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">has_previous_version&lt;/span>($version) &lt;span style="color:#f92672">?&lt;/span> $version&lt;span style="color:#f92672">.&lt;/span>$key &lt;span style="color:#f92672">:&lt;/span> $key;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __get(&lt;span style="color:#a6e22e">string&lt;/span> $key)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">mixed&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">walk_versions&lt;/span>(
&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>,
&lt;span style="color:#a6e22e">fn&lt;/span>($version) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__get&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get_versioned_key&lt;/span>($key, $version)),
&lt;span style="color:#a6e22e">fn&lt;/span>($value) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">isset&lt;/span>($value)
);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __isset(&lt;span style="color:#a6e22e">string&lt;/span> $key)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">bool&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">walk_versions&lt;/span>(
&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>,
&lt;span style="color:#a6e22e">fn&lt;/span>($version) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__isset&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get_versioned_key&lt;/span>($key, $version)),
&lt;span style="color:#a6e22e">fn&lt;/span>($isset) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $isset
);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __set(&lt;span style="color:#a6e22e">string&lt;/span> $key,&lt;span style="color:#a6e22e">mixed&lt;/span> $value)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span> {
&lt;span style="color:#75715e">// optional: you can unset previous versions of the key
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__set&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get_versioned_key&lt;/span>($key, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>), $value);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __unset(&lt;span style="color:#a6e22e">string&lt;/span> $key) &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span> {
&lt;span style="color:#75715e">// unset this version and all previous versions
&lt;/span>&lt;span style="color:#75715e">&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">walk_versions&lt;/span>(
&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">VERSION&lt;/span>,
&lt;span style="color:#a6e22e">fn&lt;/span>($version) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__unset&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get_versioned_key&lt;/span>($key, $version)),
&lt;span style="color:#a6e22e">fn&lt;/span>() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有很多要优化的地方，在生产中使用逐字记录不是一个好方式 很多时候它将取决于您的使用案例，所以在SDK 中没有这种情况。 例如，在这个示例实现过程中，先前的值被保留在升级过程中可能存在错误的地方； 保留以前的值允许再次运行升级，但您可能希望删除以前的值。&lt;/p></description></item></channel></rss>